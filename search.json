[
  {
    "objectID": "docs/tud-support/index.html",
    "href": "docs/tud-support/index.html",
    "title": "Research Support Staff Guide",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "docs/software/testing_intro.html",
    "href": "docs/software/testing_intro.html",
    "title": "Software testing",
    "section": "",
    "text": "‚ÄúBefore relying on a new experimental device, an experimental scientist always establishes its accuracy. A new detector is calibrated when the scientist observes its responses to known input signals. The results of this calibration are compared against the expected response.‚Äù\n[From Testing and Continuous Integration with Python, created by K. Huff]\n\nSimulations and analyses using software should be held to the same standards as experimental measurement devices!\nFor a solid introduction and motivation on writing tests, we recommend the lesson on testing from the Code Refinery.\n\n\n\n\nWhen writing tests, ask yourself the following questions: - How would you manually check the correctness of the code? - Do you need to test a particular parameter space? - What do you compare the result to? - How much time would it take to run the module (and therefore the test)?\n\n\n\n\nUnit test: testing of individual units of source code (scripts, functions, classes).\nIntegration test: testing of a combination of individual units as a group.\nRegression test: re-running all tests to ensure that the previously developed and tested code still performes after a code change.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Software testing"
    ]
  },
  {
    "objectID": "docs/software/testing_intro.html#approach",
    "href": "docs/software/testing_intro.html#approach",
    "title": "Software testing",
    "section": "",
    "text": "When writing tests, ask yourself the following questions: - How would you manually check the correctness of the code? - Do you need to test a particular parameter space? - What do you compare the result to? - How much time would it take to run the module (and therefore the test)?\n\n\n\n\nUnit test: testing of individual units of source code (scripts, functions, classes).\nIntegration test: testing of a combination of individual units as a group.\nRegression test: re-running all tests to ensure that the previously developed and tested code still performes after a code change.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Software testing"
    ]
  },
  {
    "objectID": "docs/software/project_cards.html",
    "href": "docs/software/project_cards.html",
    "title": "FAIR assessment cards",
    "section": "",
    "text": "Add the cards below as issues to your repository to track the progress of adopting the best practices for FAIR research software.\n\n\n_Essential_\n- [ ] Use [git](https://www.atlassian.com/git) as a version control system \n- [ ] Upload your project on [GitHub](https://github.com/) or [TU Delft GitLab](https://gitlab.tudelft.nl/)\n\n_Recommended_  \n- [ ] Make your repository [public](https://coderefinery.github.io/social-coding/)\n- [ ] Consider your [branch hygiene](https://coderefinery.github.io/git-branch-design/)\n- [ ] Use a branching model (e.g. [GitFlow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow))\n- [ ] Use [meaningful commit messages](https://www.git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)\n\n\n\n_Essential_  \n- [ ] Make use of [GitHub issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)\n\n_Recommended_\n- [ ] [Contribution guidelines](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)\n- [ ] [Code of conduct](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)\n\n\n\n_Essential_  \n- [ ] [README](https://www.makeareadme.com)\n- [ ] Apply a TU Delft pre-approved [LICENSE](https://zenodo.org/records/4629635)\n- [ ] [CITATION](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files)\n\n\n\n_Essential_  \n- [ ] Source code documentation ([docstrings](https://numpydoc.readthedocs.io/en/latest/format.html))\n- [ ] Document your project dependencies\n- [ ] Installation instructions\n- [ ] User documentation\n\n_Recommended_  \n- [ ] Developer documentation and setup\n- [ ] Examples and tutorials (e.g. Jupyter Notebooks)\n\n_Optional_\n- [ ] Documentation tools ([Sphinx](https://coderefinery.github.io/documentation/sphinx/), [JupyterBook](https://jupyterbook.org/intro.html), [Quarto](https://quarto.org/docs/guide/))\n- [ ] Build an [API reference](https://developer.lsst.io/python/numpydoc.html) from docstrings\n- [ ] Hosting ([GitHub Pages](https://pages.github.com/), [Readthedocs](https://readthedocs.org/))\n\n\n\n_Essential_\n- [ ] Installation/execution verification\n\n_Recommended_\n- [ ] [Defensive programming](https://swcarpentry.github.io/python-novice-inflammation/10-defensive.html)\n- [ ] Test your software with [integration tests](https://the-turing-way.netlify.app/reproducible-research/testing/testing-integrationtest.html) and [unit tests](https://the-turing-way.netlify.app/reproducible-research/testing/testing-unittest.html)\n- [ ] Make use of [Continuous Integration](https://coderefinery.github.io/testing/continuous-integration/) to automate testing\n\n_Optional_\n- [ ] Code coverage check (e.g. [Sonarcloud](https://sonarcloud.io/), [codecov](https://about.codecov.io))\n\n\n\n_Essential_\n- [ ] [Organize](https://coderefinery.github.io/reproducible-research/organizing-projects/) your project for reproducibility\n- [ ] [Record and manage](https://coderefinery.github.io/reproducible-research/dependencies/) your software dependencies \n\n_Recommended_\n- [ ] Make [refactoring](https://refactoring.guru/refactoring) part of your workflow\n- [ ] Follow [best coding practices](https://alan-turing-institute.github.io/rse-course/html/module07_construction_and_design/index.html)\n\n_Recommended for Python_\n- [ ] Follow [PEP8 guidelines](https://realpython.com/python-pep8/)\n- [ ] Use a tool for dependency management (e.g. [poetry](https://the-turing-way.netlify.app/reproducible-research/renv/renv-package.html))\n- [ ] Use linter (e.g. [pylint](https://pypi.org/project/pylint/), [flake8](https://pypi.org/project/flake8/))\n- [ ] Use a formatter (e.g. [black](https://github.com/psf/black))\n\n\n\n_Essential_  \n- [ ] Obtain a DOI ([Zenodo](https://zenodo.org/) or [4TU.ResearchData](https://data.4tu.nl/info/about-your-data/getting-started))\n\n_Recommended_  \n- [ ] Use [semantic versioning](https://semver.org/)\n- [ ] Create tagged releases ([GitHub](https://docs.github.com/en/repositories/releasing-projects-on-github))\n- [ ] [CHANGELOG](https://keepachangelog.com/en/1.0.0/)\n- [ ] Upload to [registry](https://github.com/NLeSC/awesome-research-software-registries) (e.g. [PyPI](https://realpython.com/pypi-publish-python-package/), [conda](https://conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs.html))\n- [ ] [Releasing guide](https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository)\n\n_Optional_\n- [ ] [Continuous Integration](https://the-turing-way.netlify.app/reproducible-research/ci/ci-options.html) for automated build and release",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR assessment cards"
    ]
  },
  {
    "objectID": "docs/software/project_cards.html#version-control",
    "href": "docs/software/project_cards.html#version-control",
    "title": "FAIR assessment cards",
    "section": "",
    "text": "_Essential_\n- [ ] Use [git](https://www.atlassian.com/git) as a version control system \n- [ ] Upload your project on [GitHub](https://github.com/) or [TU Delft GitLab](https://gitlab.tudelft.nl/)\n\n_Recommended_  \n- [ ] Make your repository [public](https://coderefinery.github.io/social-coding/)\n- [ ] Consider your [branch hygiene](https://coderefinery.github.io/git-branch-design/)\n- [ ] Use a branching model (e.g. [GitFlow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow))\n- [ ] Use [meaningful commit messages](https://www.git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines)",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR assessment cards"
    ]
  },
  {
    "objectID": "docs/software/project_cards.html#collaboration",
    "href": "docs/software/project_cards.html#collaboration",
    "title": "FAIR assessment cards",
    "section": "",
    "text": "_Essential_  \n- [ ] Make use of [GitHub issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)\n\n_Recommended_\n- [ ] [Contribution guidelines](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)\n- [ ] [Code of conduct](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR assessment cards"
    ]
  },
  {
    "objectID": "docs/software/project_cards.html#project-documentation",
    "href": "docs/software/project_cards.html#project-documentation",
    "title": "FAIR assessment cards",
    "section": "",
    "text": "_Essential_  \n- [ ] [README](https://www.makeareadme.com)\n- [ ] Apply a TU Delft pre-approved [LICENSE](https://zenodo.org/records/4629635)\n- [ ] [CITATION](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files)",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR assessment cards"
    ]
  },
  {
    "objectID": "docs/software/project_cards.html#software-documentation",
    "href": "docs/software/project_cards.html#software-documentation",
    "title": "FAIR assessment cards",
    "section": "",
    "text": "_Essential_  \n- [ ] Source code documentation ([docstrings](https://numpydoc.readthedocs.io/en/latest/format.html))\n- [ ] Document your project dependencies\n- [ ] Installation instructions\n- [ ] User documentation\n\n_Recommended_  \n- [ ] Developer documentation and setup\n- [ ] Examples and tutorials (e.g. Jupyter Notebooks)\n\n_Optional_\n- [ ] Documentation tools ([Sphinx](https://coderefinery.github.io/documentation/sphinx/), [JupyterBook](https://jupyterbook.org/intro.html), [Quarto](https://quarto.org/docs/guide/))\n- [ ] Build an [API reference](https://developer.lsst.io/python/numpydoc.html) from docstrings\n- [ ] Hosting ([GitHub Pages](https://pages.github.com/), [Readthedocs](https://readthedocs.org/))",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR assessment cards"
    ]
  },
  {
    "objectID": "docs/software/project_cards.html#software-testing",
    "href": "docs/software/project_cards.html#software-testing",
    "title": "FAIR assessment cards",
    "section": "",
    "text": "_Essential_\n- [ ] Installation/execution verification\n\n_Recommended_\n- [ ] [Defensive programming](https://swcarpentry.github.io/python-novice-inflammation/10-defensive.html)\n- [ ] Test your software with [integration tests](https://the-turing-way.netlify.app/reproducible-research/testing/testing-integrationtest.html) and [unit tests](https://the-turing-way.netlify.app/reproducible-research/testing/testing-unittest.html)\n- [ ] Make use of [Continuous Integration](https://coderefinery.github.io/testing/continuous-integration/) to automate testing\n\n_Optional_\n- [ ] Code coverage check (e.g. [Sonarcloud](https://sonarcloud.io/), [codecov](https://about.codecov.io))",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR assessment cards"
    ]
  },
  {
    "objectID": "docs/software/project_cards.html#software-quality",
    "href": "docs/software/project_cards.html#software-quality",
    "title": "FAIR assessment cards",
    "section": "",
    "text": "_Essential_\n- [ ] [Organize](https://coderefinery.github.io/reproducible-research/organizing-projects/) your project for reproducibility\n- [ ] [Record and manage](https://coderefinery.github.io/reproducible-research/dependencies/) your software dependencies \n\n_Recommended_\n- [ ] Make [refactoring](https://refactoring.guru/refactoring) part of your workflow\n- [ ] Follow [best coding practices](https://alan-turing-institute.github.io/rse-course/html/module07_construction_and_design/index.html)\n\n_Recommended for Python_\n- [ ] Follow [PEP8 guidelines](https://realpython.com/python-pep8/)\n- [ ] Use a tool for dependency management (e.g. [poetry](https://the-turing-way.netlify.app/reproducible-research/renv/renv-package.html))\n- [ ] Use linter (e.g. [pylint](https://pypi.org/project/pylint/), [flake8](https://pypi.org/project/flake8/))\n- [ ] Use a formatter (e.g. [black](https://github.com/psf/black))",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR assessment cards"
    ]
  },
  {
    "objectID": "docs/software/project_cards.html#releases",
    "href": "docs/software/project_cards.html#releases",
    "title": "FAIR assessment cards",
    "section": "",
    "text": "_Essential_  \n- [ ] Obtain a DOI ([Zenodo](https://zenodo.org/) or [4TU.ResearchData](https://data.4tu.nl/info/about-your-data/getting-started))\n\n_Recommended_  \n- [ ] Use [semantic versioning](https://semver.org/)\n- [ ] Create tagged releases ([GitHub](https://docs.github.com/en/repositories/releasing-projects-on-github))\n- [ ] [CHANGELOG](https://keepachangelog.com/en/1.0.0/)\n- [ ] Upload to [registry](https://github.com/NLeSC/awesome-research-software-registries) (e.g. [PyPI](https://realpython.com/pypi-publish-python-package/), [conda](https://conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs.html))\n- [ ] [Releasing guide](https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository)\n\n_Optional_\n- [ ] [Continuous Integration](https://the-turing-way.netlify.app/reproducible-research/ci/ci-options.html) for automated build and release",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR assessment cards"
    ]
  },
  {
    "objectID": "docs/software/git/branch_management.html",
    "href": "docs/software/git/branch_management.html",
    "title": "Branch management",
    "section": "",
    "text": "Branch management is an important consideration when working collaboratively with Git and GitHub. In Git, branches are a part of your everyday development process. Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bug ‚Äî no matter how big or how small ‚Äî you spawn a new branch to encapsulate your changes.\nBranches are primarily used as a means for teams to develop featurest and give them a separate workspace for their code. Branching allows you to diverge from the main (stable) version of development and continue to do work without affecting that main line[^1].\nA branching strategy, therefore, is the strategy that teams adopt when writing, merging and releasing code when using a version control system. It is essentially a set of rules that developers can follow to stipulate how they interact with a shared codebase.\nFor open source projects, the branching strategy is often described in the Contributing guide of the repository.\n\n\n\n\n\n\nA branching strategy aims to\n\n\n\n\nEnhance productivity by ensuring proper coordination among developers\nEnable parallel development\nHelp organize a series of planned, structured releases\nMap a clear path when making changes to software through to production\nMaintain a bug-free code where developers can quickly fix issues and get these changes back to production without disrupting the development workflow\n\n\n\nVarious branch management workflows have been developed for different teams and software types[^2]. When developing research software, we recommend using either GitHub Flow or Gitflow[^3].\n\n\nGitHub Flow is a simpler alternative to GitFlow ideal for smaller teams. This strategy relies on three different branches:\n\nMain: main\nDevelop: develop\nFeature: feature/[name-of-feature]\n\nYou start off with the master branch then developers create feature branches that stem directly from the master to isolate their work. When ready, these are then merged back into main and the feature branch is deleted.\n\n\nAim: create a new feature\n\nCreate new descriptively-named branches off the master branch for new work, such as feature/add-new-payment-types.\nCommit new work to your local branches and regularly push work to the remote.\nTo request feedback or help, or when you think your work is ready to merge into the master branch, open a pull request.\nAfter your work or feature has been reviewed and approved, it can be merged into the master branch.\nOnce your work has been merged into the master branch, it is available for use.\n\n\n\n\n\n\nSimple design\nWorks well for small teams, especially without (anonymous) external contributors\nSuitable for teams that continuously deploy production code\n\n\n\n\n\nUnable to support multiple versions of code in production at the same time\nThe lack of dedicated development branches makes GitHub Flow more susceptible to bugs in production.\n\n\n\n\n\nGitflow is more complicated and advances, but allows for more control over the development cycle. The main idea behind the Git flow branching strategy is to isolate your work into different types of branches. There are six different branch types in total:\n\nMain: main\nDevelop: develop\nFeature: feature/[name-of-feature]\nBug fix: fix/[issue-number]\nHot fix: hotfix/[issue-number] (for a bug in origin/master)\nRelease: release/[version]\n\nThe two primary branches in Gitflow are main and develop and have an infinite timeline. The other branches are temporary supporting branches with different intended purposes: feature, release, bugfix, and hotfix.\n\nIn general, the origin/masterbranch is considered to be the main branch where the source code always reflects a production-ready state, i.e.¬†a stable source code that you would like to share with the community. The origin/develop branch is the main development branch where the source code always reflects a state with the latest delivered development changes for the next release. When the source code in the origin/develop branch reaches a stable point, it needs to be merged into origin/master and tagged with a release number.\nWe would like develop new code in isolation to keep origin/develop clean. To do this, we use feature branches to develop new features for upcoming releases. When starting work on a new feature, branch off from origin/develop and develop the feature in isolation. When the feature is ready, create a pull request to merge the feature back into origin/develop. Once the feature branch is merged, it should be deleted.\n\n\n\nThe various types of branches make it easy and intuitive to organize your work.\nThe systematic development process allows for efficient testing.\nThe use of release branches allows you to easily and continuously support multiple versions of production code.\nStructured and more secure approach better suited for open source project with contributions from external (anonymous) developers.\n\n\n\n\n\nDepending on the complexity of the product, the Git flow model could overcomplicate and slow the development process and release cycle.\nBecause of the long development cycle, Git flow is historically not able to support Continuous Delivery or Continuous Integration.\n\n\n\n\nAim: implement new features into the code.\n\nGeneral development of the code takes place on origin/develop. When you want to fix a bug or work on a new feature, first create an issue where you announce what you will be working on.\nWhen you want to work on a new feature or fix a bug, create a new feature branch from the development branch.\nWork on the code in the feature branch.\nCreate a merge request on GitLab to merge the feature branch into the development branch when ready. A good practice is to invite another developer to review your feature.\nRepeat previous steps to implement more features. Best practice is to keep the merge requests small; this makes it easy to review and limits the possibilty of generating conflicts.\n\nAim: create a new release on origin/master.\n\nWhen ready to make a new release, create a release branch from the development branch.\nOn the release branch: compile and package the software, update documentation, update version, dotting i‚Äôs, ‚Ä¶\nCreate a merge request to merge the release branch with the main branch and back into the development branch.\nDelete release branch after merge.\nCreate a new release in the master branch.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Version control with git",
      "Branch management"
    ]
  },
  {
    "objectID": "docs/software/git/branch_management.html#github-flow",
    "href": "docs/software/git/branch_management.html#github-flow",
    "title": "Branch management",
    "section": "",
    "text": "GitHub Flow is a simpler alternative to GitFlow ideal for smaller teams. This strategy relies on three different branches:\n\nMain: main\nDevelop: develop\nFeature: feature/[name-of-feature]\n\nYou start off with the master branch then developers create feature branches that stem directly from the master to isolate their work. When ready, these are then merged back into main and the feature branch is deleted.\n\n\nAim: create a new feature\n\nCreate new descriptively-named branches off the master branch for new work, such as feature/add-new-payment-types.\nCommit new work to your local branches and regularly push work to the remote.\nTo request feedback or help, or when you think your work is ready to merge into the master branch, open a pull request.\nAfter your work or feature has been reviewed and approved, it can be merged into the master branch.\nOnce your work has been merged into the master branch, it is available for use.\n\n\n\n\n\n\nSimple design\nWorks well for small teams, especially without (anonymous) external contributors\nSuitable for teams that continuously deploy production code\n\n\n\n\n\nUnable to support multiple versions of code in production at the same time\nThe lack of dedicated development branches makes GitHub Flow more susceptible to bugs in production.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Version control with git",
      "Branch management"
    ]
  },
  {
    "objectID": "docs/software/git/branch_management.html#gitflow",
    "href": "docs/software/git/branch_management.html#gitflow",
    "title": "Branch management",
    "section": "",
    "text": "Gitflow is more complicated and advances, but allows for more control over the development cycle. The main idea behind the Git flow branching strategy is to isolate your work into different types of branches. There are six different branch types in total:\n\nMain: main\nDevelop: develop\nFeature: feature/[name-of-feature]\nBug fix: fix/[issue-number]\nHot fix: hotfix/[issue-number] (for a bug in origin/master)\nRelease: release/[version]\n\nThe two primary branches in Gitflow are main and develop and have an infinite timeline. The other branches are temporary supporting branches with different intended purposes: feature, release, bugfix, and hotfix.\n\nIn general, the origin/masterbranch is considered to be the main branch where the source code always reflects a production-ready state, i.e.¬†a stable source code that you would like to share with the community. The origin/develop branch is the main development branch where the source code always reflects a state with the latest delivered development changes for the next release. When the source code in the origin/develop branch reaches a stable point, it needs to be merged into origin/master and tagged with a release number.\nWe would like develop new code in isolation to keep origin/develop clean. To do this, we use feature branches to develop new features for upcoming releases. When starting work on a new feature, branch off from origin/develop and develop the feature in isolation. When the feature is ready, create a pull request to merge the feature back into origin/develop. Once the feature branch is merged, it should be deleted.\n\n\n\nThe various types of branches make it easy and intuitive to organize your work.\nThe systematic development process allows for efficient testing.\nThe use of release branches allows you to easily and continuously support multiple versions of production code.\nStructured and more secure approach better suited for open source project with contributions from external (anonymous) developers.\n\n\n\n\n\nDepending on the complexity of the product, the Git flow model could overcomplicate and slow the development process and release cycle.\nBecause of the long development cycle, Git flow is historically not able to support Continuous Delivery or Continuous Integration.\n\n\n\n\nAim: implement new features into the code.\n\nGeneral development of the code takes place on origin/develop. When you want to fix a bug or work on a new feature, first create an issue where you announce what you will be working on.\nWhen you want to work on a new feature or fix a bug, create a new feature branch from the development branch.\nWork on the code in the feature branch.\nCreate a merge request on GitLab to merge the feature branch into the development branch when ready. A good practice is to invite another developer to review your feature.\nRepeat previous steps to implement more features. Best practice is to keep the merge requests small; this makes it easy to review and limits the possibilty of generating conflicts.\n\nAim: create a new release on origin/master.\n\nWhen ready to make a new release, create a release branch from the development branch.\nOn the release branch: compile and package the software, update documentation, update version, dotting i‚Äôs, ‚Ä¶\nCreate a merge request to merge the release branch with the main branch and back into the development branch.\nDelete release branch after merge.\nCreate a new release in the master branch.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Version control with git",
      "Branch management"
    ]
  },
  {
    "objectID": "docs/software/fair.html",
    "href": "docs/software/fair.html",
    "title": "FAIR Software",
    "section": "",
    "text": "FAIR Software\nüèóÔ∏è Under construction",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software"
    ]
  },
  {
    "objectID": "docs/software/containers/docker_gui.html",
    "href": "docs/software/containers/docker_gui.html",
    "title": "Using a docker container with a GUI",
    "section": "",
    "text": "Docker is an open platform for developing, shipping, and running applications. Docker provides the ability to package and run an application in a loosely isolated environment called a container. Containers are lightweight and contain everything needed to run the application, so you do not need to rely on what is currently installed on the host system. You can easily share containers while you work, and be sure that everyone you share with gets the same container that works in the same way.\n\nDockerfile ‚Äì is a text document that contains all the commands you would normally execute manually in order to build a Docker image. The instructions include a choice of operating system and all the libraries we need to install into it. Docker can build images automatically by reading the instructions from a Dockerfile.\nDocker Images ‚Äì are the basis of containers. A Docker image is an immutable (unchangeable) file that contains the source code, libraries, dependencies, tools, and other files needed for an application to run.\nDocker Container ‚Äì A container is, ultimately, just a running image.\n\n\nDocker can be installed on Windows, macOS, and Linux. Please visit the Docker website for downloading and installation instructions. Note, you will need admin access to your system.\nPlease check the Issues/troubleshooting session at the end of this page if you encounter some problems during installation. If your problem is not listed you can add it as an issue in the main repository.\n\n\nRun the following commands in the terminal (see below) to verify your installation:\n\ndocker --version\nWill output the version number\ndocker run hello-world\nWill output a welcome message. If you haven‚Äôt run this command before, you will receive the message Unable to find image: ‚Äòhello-world:latest‚Äô locally. Docker will then proceed by downloading and running the latest version from DockerHub.\n\n\n\n\n\nLinux\nThe default Unix Shell for Linux operating systems is usually Bash. On most versions of Linux, it is accessible by running the (Gnome) Terminal or (KDE) Konsole or xterm, which can be found via the applications menu or the search bar. If your machine is set up to use something other than bash, you can run it by opening a terminal and typing bash.\nmacOS\nFor a Mac computer, the default Unix Shell is Bash, and it is available via the Terminal Utilities program within your Applications folder. To open Terminal, try one or both of the following:\n\nGo to your Applications. Within Applications, open the Utilities folder. Locate Terminal in the Utilities folder and open it.\nUse the Mac ‚ÄòSpotlight‚Äô computer search function. Search for: Terminal and press Return.\n\nFor more info: How To use a terminal on Mac\nWindows\nComputers with Windows operating systems do not automatically have a Unix Shell program installed. We encourage you to use an emulator included in Git for Windows, which gives you access to both Bash shell commands and Git. To install, please follow these instructions.\n\n\n\nDocker doesn‚Äôt have any build-in graphics, which means it cannot run desktop applications by default. For this, we require the X Windows System. The X Window System (X11, or simply X) is a windowing system for bitmap displays, common on Unix-like operating systems. X provides the basic framework for a GUI environment: drawing and moving windows on the display device and interacting with a mouse and a keyboard.\nIf you are on a desktop Linux, you already have one. For macOS, you can download XQuartz, and for Windows, we tested VcXsrv.\nDesktop applications will run in Docker and will try to communicate with the X server you‚Äôre running on your PC. They don‚Äôt need to know anything but the location of the X server and an optional display that they target. This is denoted by an environmental variable named DISPLAY, with the following syntax: DISPLAY=xserver-host:0. The number you see after the : is the display number; for the intents and purpose of this article, we will consider this to be equivalent to 0 is the primary display attached to the X server.\nIn order to set up the environment variable, we need to add the following code to the docker run command in the terminal:\n\nWindowsmacOSLinux\n\n\n-e DISPLAY=host.docker.internal:0\n\n\n-e DISPLAY=docker.for.mac.host.internal:0\n\n\n--net=host -e DISPLAY=:0\n\n\n\nWith these commands (and an active X server on the host system), any graphical output inside the container will be shown on your own desktop.\n\n\n\nThe docker image with which you can spawn a container contains all the software and general datafiles. However, we still need to give the container access to your dataset. To do so, we can mount a directory on your own system inside the container with the following command structure: -v &lt;abs_path_host&gt;:&lt;abs_path_container&gt;. Assuming your terminal is opened inside the data folder on your system, the specific commands for the different operating systems mount this folder as the /data folder inside the container, are:\nFor Windows in GitBash: -v /$(pwd):/data\nFor Windows in cmd: -v %cd%:/data\nFor Linux and macOS: -v $(pwd):/data\n$(pwd) can be replaced with the absolute path of the datafolder, or be used to access subdirectories (e.g.¬†$(pwd)/data:/data).\nFor more info about mounting volumes, check this StackOverflow question\n\n\n\nTo start a container from an image, we use the command docker run &lt;image_name&gt;. We also pass the additional flags --rm to delete the container after closing and -it to be able to interact with the container. Combining all arguments then leads to the following commands to run (and automatically close) the container:\n\nWindowsmacOSLinux\n\n\ndocker run --rm -it -e DISPLAY=host.docker.internal:0 -v /$(pwd):/data &lt;image_name&gt;:&lt;image_version&gt;\n\n\ndocker run --rm -it -e DISPLAY=docker.for.mac.host.internal:0 -v $(pwd):/data &lt;image_name&gt;:&lt;image_version&gt;\n\n\ndocker run --rm -it --net=host -e DISPLAY=:0 -v $(pwd):/data &lt;image_name&gt;:&lt;image_version&gt;\n\n\n\n\n\n\n\nFor Linux users encountering the error Unable to init server, please run xhost + in the terminal and rerun the docker run command. For more info, see here.\nWSL 2 installation incomplete for Windows users\n\nEnable the virtualization in the BIOS\nFollow ALL the steps described in: https://docs.microsoft.com/en-us/windows/wsl/install-manual\n\nFailing to port a display in the docker container for Mac users.\n\nSolution: Change the docker run command by this one , docker run --rm -it -e DISPLAY=IPADDRESS:0 -v $(pwd):/data &lt;image_name&gt;:&lt;image_version&gt;\nThe IPADDRESS is gotten from typing ifconfig in the terminal.\n\nFailing to run the pipeline once the GUI is open\n\nCheck that all documents are closed before run it , namely the Getting started and the adapter files documents.\n\nFailing to mount an external hard drive in Windows when running a docker container\n\nError:\n\n      libGL error: No matching fbConfigs or visuals found\n      libGL error: failed to load driver: swrast\n\nSolution (noy yet found):\n\nLook into this links:\n\nhttps://stackoverflow.com/questions/46586013/glxgears-not-working-inside-of-docker",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Working with containers",
      "Using a docker container with a GUI"
    ]
  },
  {
    "objectID": "docs/software/containers/docker_gui.html#docker-installation",
    "href": "docs/software/containers/docker_gui.html#docker-installation",
    "title": "Using a docker container with a GUI",
    "section": "",
    "text": "Docker can be installed on Windows, macOS, and Linux. Please visit the Docker website for downloading and installation instructions. Note, you will need admin access to your system.\nPlease check the Issues/troubleshooting session at the end of this page if you encounter some problems during installation. If your problem is not listed you can add it as an issue in the main repository.\n\n\nRun the following commands in the terminal (see below) to verify your installation:\n\ndocker --version\nWill output the version number\ndocker run hello-world\nWill output a welcome message. If you haven‚Äôt run this command before, you will receive the message Unable to find image: ‚Äòhello-world:latest‚Äô locally. Docker will then proceed by downloading and running the latest version from DockerHub.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Working with containers",
      "Using a docker container with a GUI"
    ]
  },
  {
    "objectID": "docs/software/containers/docker_gui.html#terminal-access",
    "href": "docs/software/containers/docker_gui.html#terminal-access",
    "title": "Using a docker container with a GUI",
    "section": "",
    "text": "Linux\nThe default Unix Shell for Linux operating systems is usually Bash. On most versions of Linux, it is accessible by running the (Gnome) Terminal or (KDE) Konsole or xterm, which can be found via the applications menu or the search bar. If your machine is set up to use something other than bash, you can run it by opening a terminal and typing bash.\nmacOS\nFor a Mac computer, the default Unix Shell is Bash, and it is available via the Terminal Utilities program within your Applications folder. To open Terminal, try one or both of the following:\n\nGo to your Applications. Within Applications, open the Utilities folder. Locate Terminal in the Utilities folder and open it.\nUse the Mac ‚ÄòSpotlight‚Äô computer search function. Search for: Terminal and press Return.\n\nFor more info: How To use a terminal on Mac\nWindows\nComputers with Windows operating systems do not automatically have a Unix Shell program installed. We encourage you to use an emulator included in Git for Windows, which gives you access to both Bash shell commands and Git. To install, please follow these instructions.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Working with containers",
      "Using a docker container with a GUI"
    ]
  },
  {
    "objectID": "docs/software/containers/docker_gui.html#x-windows-system",
    "href": "docs/software/containers/docker_gui.html#x-windows-system",
    "title": "Using a docker container with a GUI",
    "section": "",
    "text": "Docker doesn‚Äôt have any build-in graphics, which means it cannot run desktop applications by default. For this, we require the X Windows System. The X Window System (X11, or simply X) is a windowing system for bitmap displays, common on Unix-like operating systems. X provides the basic framework for a GUI environment: drawing and moving windows on the display device and interacting with a mouse and a keyboard.\nIf you are on a desktop Linux, you already have one. For macOS, you can download XQuartz, and for Windows, we tested VcXsrv.\nDesktop applications will run in Docker and will try to communicate with the X server you‚Äôre running on your PC. They don‚Äôt need to know anything but the location of the X server and an optional display that they target. This is denoted by an environmental variable named DISPLAY, with the following syntax: DISPLAY=xserver-host:0. The number you see after the : is the display number; for the intents and purpose of this article, we will consider this to be equivalent to 0 is the primary display attached to the X server.\nIn order to set up the environment variable, we need to add the following code to the docker run command in the terminal:\n\nWindowsmacOSLinux\n\n\n-e DISPLAY=host.docker.internal:0\n\n\n-e DISPLAY=docker.for.mac.host.internal:0\n\n\n--net=host -e DISPLAY=:0\n\n\n\nWith these commands (and an active X server on the host system), any graphical output inside the container will be shown on your own desktop.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Working with containers",
      "Using a docker container with a GUI"
    ]
  },
  {
    "objectID": "docs/software/containers/docker_gui.html#mount-a-volume",
    "href": "docs/software/containers/docker_gui.html#mount-a-volume",
    "title": "Using a docker container with a GUI",
    "section": "",
    "text": "The docker image with which you can spawn a container contains all the software and general datafiles. However, we still need to give the container access to your dataset. To do so, we can mount a directory on your own system inside the container with the following command structure: -v &lt;abs_path_host&gt;:&lt;abs_path_container&gt;. Assuming your terminal is opened inside the data folder on your system, the specific commands for the different operating systems mount this folder as the /data folder inside the container, are:\nFor Windows in GitBash: -v /$(pwd):/data\nFor Windows in cmd: -v %cd%:/data\nFor Linux and macOS: -v $(pwd):/data\n$(pwd) can be replaced with the absolute path of the datafolder, or be used to access subdirectories (e.g.¬†$(pwd)/data:/data).\nFor more info about mounting volumes, check this StackOverflow question",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Working with containers",
      "Using a docker container with a GUI"
    ]
  },
  {
    "objectID": "docs/software/containers/docker_gui.html#running-a-container-with-data-and-graphical-output",
    "href": "docs/software/containers/docker_gui.html#running-a-container-with-data-and-graphical-output",
    "title": "Using a docker container with a GUI",
    "section": "",
    "text": "To start a container from an image, we use the command docker run &lt;image_name&gt;. We also pass the additional flags --rm to delete the container after closing and -it to be able to interact with the container. Combining all arguments then leads to the following commands to run (and automatically close) the container:\n\nWindowsmacOSLinux\n\n\ndocker run --rm -it -e DISPLAY=host.docker.internal:0 -v /$(pwd):/data &lt;image_name&gt;:&lt;image_version&gt;\n\n\ndocker run --rm -it -e DISPLAY=docker.for.mac.host.internal:0 -v $(pwd):/data &lt;image_name&gt;:&lt;image_version&gt;\n\n\ndocker run --rm -it --net=host -e DISPLAY=:0 -v $(pwd):/data &lt;image_name&gt;:&lt;image_version&gt;",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Working with containers",
      "Using a docker container with a GUI"
    ]
  },
  {
    "objectID": "docs/software/containers/docker_gui.html#issuestroubleshooting",
    "href": "docs/software/containers/docker_gui.html#issuestroubleshooting",
    "title": "Using a docker container with a GUI",
    "section": "",
    "text": "For Linux users encountering the error Unable to init server, please run xhost + in the terminal and rerun the docker run command. For more info, see here.\nWSL 2 installation incomplete for Windows users\n\nEnable the virtualization in the BIOS\nFollow ALL the steps described in: https://docs.microsoft.com/en-us/windows/wsl/install-manual\n\nFailing to port a display in the docker container for Mac users.\n\nSolution: Change the docker run command by this one , docker run --rm -it -e DISPLAY=IPADDRESS:0 -v $(pwd):/data &lt;image_name&gt;:&lt;image_version&gt;\nThe IPADDRESS is gotten from typing ifconfig in the terminal.\n\nFailing to run the pipeline once the GUI is open\n\nCheck that all documents are closed before run it , namely the Getting started and the adapter files documents.\n\nFailing to mount an external hard drive in Windows when running a docker container\n\nError:\n\n      libGL error: No matching fbConfigs or visuals found\n      libGL error: failed to load driver: swrast\n\nSolution (noy yet found):\n\nLook into this links:\n\nhttps://stackoverflow.com/questions/46586013/glxgears-not-working-inside-of-docker",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Working with containers",
      "Using a docker container with a GUI"
    ]
  },
  {
    "objectID": "docs/resources/tools.html",
    "href": "docs/resources/tools.html",
    "title": "Tools",
    "section": "",
    "text": "Tools\nüèóÔ∏è Under construction",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Tools"
    ]
  },
  {
    "objectID": "docs/resources/courses.html",
    "href": "docs/resources/courses.html",
    "title": "Courses and workshops",
    "section": "",
    "text": "The TU Delft organises courses for researchers on data management, research software development, and open science. For an overview of available courses, please visit the website.\n\n\n\n\n\n\n\n\n\nThe Carpentries\n\n\n\n\n\n\nThe Carpentries teaches foundational coding and data science skills to researchers worldwide. You can also sign up as a helper.\n\nSoftware Carpentry\nData Carpentry\nLibrary Carpentry\n\nSign up\n\n\n\n\n\n\n\n\n\n\nCodeRefinery\n\n\n\n\n\n\nCodeRefinery acts as a hub for FAIR (Findable, Accessible, Interoperable, and Reusable) software practices. The main focus is on professional tools for efficiently writing and maintaining research software, focussed on open source software. You can also sign up as a helper.\nSign up\n\n\n\n\n\n\n\n\n\n\neScience Center\n\n\n\n\n\n\nThe eScience Center offers has open-source training materials available and offers regular workshops.\nUpcoming events\n\n\n\n\n\n\n\n\n\n\nDCSE\n\n\n\n\n\n\nThe Delft Institute for Computational Science and Engineering offers courses on supercomputing through the Delft High Performance Computing Center.\nCourse list\n\n\n\n\n\n\n\n\n\n\nSURF\n\n\n\n\n\n\nSURF offers various workshops for researchers.\nUpcoming events\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR Caf√©\n\n\n\n\n\n\nDo you want to build your R skills, write R code with others, or ask questions about working with R? To join the TU Delft R Caf√©.\nUpcoming events\n\n\n\n\n\n\n\n\n\n\n4TU.ResearchData\n\n\n\n\n\n\n4TU.ResearchData offers training and community engagement resources to research and research-support professionals working to make their research data findable, accessible, interoperable and reproducible (FAIR).\nUpcoming events\n\n\n\n\n\nSince 2010, the Software Sustainability Institute has facilitated the advancement of software in research by cultivating better, more sustainable, research software to enable world-class research (‚ÄúBetter software, better research‚Äù). The Institute is based at the Universities of Edinburgh, Manchester, Oxford and Southampton, and draws on a team of experts with a breadth of experience in software development, project and programme management, research facilitation, publicity and community engagement.\nYou can view their upcoming workshops here.\n\n\n\n\nAs part of the support it provides, the DCC also develops tailor-made workshops to address specific needs of researchers not covered by general workshop materials. We always aim to have our workshops publicaly available.",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Courses and workshops"
    ]
  },
  {
    "objectID": "docs/resources/courses.html#training-for-researchers-at-the-tu-delft",
    "href": "docs/resources/courses.html#training-for-researchers-at-the-tu-delft",
    "title": "Courses and workshops",
    "section": "",
    "text": "The TU Delft organises courses for researchers on data management, research software development, and open science. For an overview of available courses, please visit the website.\n\n\n\n\n\n\n\n\n\nThe Carpentries\n\n\n\n\n\n\nThe Carpentries teaches foundational coding and data science skills to researchers worldwide. You can also sign up as a helper.\n\nSoftware Carpentry\nData Carpentry\nLibrary Carpentry\n\nSign up\n\n\n\n\n\n\n\n\n\n\nCodeRefinery\n\n\n\n\n\n\nCodeRefinery acts as a hub for FAIR (Findable, Accessible, Interoperable, and Reusable) software practices. The main focus is on professional tools for efficiently writing and maintaining research software, focussed on open source software. You can also sign up as a helper.\nSign up\n\n\n\n\n\n\n\n\n\n\neScience Center\n\n\n\n\n\n\nThe eScience Center offers has open-source training materials available and offers regular workshops.\nUpcoming events\n\n\n\n\n\n\n\n\n\n\nDCSE\n\n\n\n\n\n\nThe Delft Institute for Computational Science and Engineering offers courses on supercomputing through the Delft High Performance Computing Center.\nCourse list\n\n\n\n\n\n\n\n\n\n\nSURF\n\n\n\n\n\n\nSURF offers various workshops for researchers.\nUpcoming events",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Courses and workshops"
    ]
  },
  {
    "objectID": "docs/resources/courses.html#community-initiatives",
    "href": "docs/resources/courses.html#community-initiatives",
    "title": "Courses and workshops",
    "section": "",
    "text": "R Caf√©\n\n\n\n\n\n\nDo you want to build your R skills, write R code with others, or ask questions about working with R? To join the TU Delft R Caf√©.\nUpcoming events\n\n\n\n\n\n\n\n\n\n\n4TU.ResearchData\n\n\n\n\n\n\n4TU.ResearchData offers training and community engagement resources to research and research-support professionals working to make their research data findable, accessible, interoperable and reproducible (FAIR).\nUpcoming events\n\n\n\n\n\nSince 2010, the Software Sustainability Institute has facilitated the advancement of software in research by cultivating better, more sustainable, research software to enable world-class research (‚ÄúBetter software, better research‚Äù). The Institute is based at the Universities of Edinburgh, Manchester, Oxford and Southampton, and draws on a team of experts with a breadth of experience in software development, project and programme management, research facilitation, publicity and community engagement.\nYou can view their upcoming workshops here.",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Courses and workshops"
    ]
  },
  {
    "objectID": "docs/resources/courses.html#dcc-project-workshops",
    "href": "docs/resources/courses.html#dcc-project-workshops",
    "title": "Courses and workshops",
    "section": "",
    "text": "As part of the support it provides, the DCC also develops tailor-made workshops to address specific needs of researchers not covered by general workshop materials. We always aim to have our workshops publicaly available.",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Courses and workshops"
    ]
  },
  {
    "objectID": "docs/infrastructure/moving_data.html",
    "href": "docs/infrastructure/moving_data.html",
    "title": "Moving data to your server",
    "section": "",
    "text": "$ scp -o \"ProxyCommand ssh -W %h:%p &lt;bastion-username&gt;@linux-bastion-ex.tudelft.nl\" &lt;my-local-file&gt;  &lt;target-username&gt;@&lt;target-host&gt;:/&lt;remote-directory&gt;/\n\n\n\n$ scp -o \"ProxyCommand ssh -W %h:%p &lt;bastion-username&gt;@linux-bastion-ex.tudelft.nl\" &lt;target-username&gt;@&lt;target-host&gt;:/tmp/&lt;my-remote-file&gt; /&lt;my-local-directory&gt;/\n\n\n\nIf a default ssh tunneling was configured correctly. Data can be copied to and from a remote host as follows:\n# Copy TO Remote Host\n$ scp &lt;my-local-file&gt; &lt;host-nickname&gt;:/&lt;remote-directory&gt;/\n# Copy FROM Remote Host\n$ scp &lt;host-nickname&gt;:/&lt;my-remote-file&gt; /&lt;my-local-directory&gt;/ \n\n\n\n‚Äú-C /tmp/a‚Äù can be used when you wanted to ‚Äúcd /tmp/a‚Äù\nssh source.tudelft.nl sudo tar cf - -C /tmp/a . | ssh target.tudelft.nl  sudo tar xvf - -C /tmp/b/",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Moving data to your server"
    ]
  },
  {
    "objectID": "docs/infrastructure/moving_data.html#copy-data-from-client-to-host-using-proxycommand",
    "href": "docs/infrastructure/moving_data.html#copy-data-from-client-to-host-using-proxycommand",
    "title": "Moving data to your server",
    "section": "",
    "text": "$ scp -o \"ProxyCommand ssh -W %h:%p &lt;bastion-username&gt;@linux-bastion-ex.tudelft.nl\" &lt;my-local-file&gt;  &lt;target-username&gt;@&lt;target-host&gt;:/&lt;remote-directory&gt;/",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Moving data to your server"
    ]
  },
  {
    "objectID": "docs/infrastructure/moving_data.html#copy-data-from-host-to-client-using-proxycommand",
    "href": "docs/infrastructure/moving_data.html#copy-data-from-host-to-client-using-proxycommand",
    "title": "Moving data to your server",
    "section": "",
    "text": "$ scp -o \"ProxyCommand ssh -W %h:%p &lt;bastion-username&gt;@linux-bastion-ex.tudelft.nl\" &lt;target-username&gt;@&lt;target-host&gt;:/tmp/&lt;my-remote-file&gt; /&lt;my-local-directory&gt;/",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Moving data to your server"
    ]
  },
  {
    "objectID": "docs/infrastructure/moving_data.html#copy-data-using-ssh-tunneling",
    "href": "docs/infrastructure/moving_data.html#copy-data-using-ssh-tunneling",
    "title": "Moving data to your server",
    "section": "",
    "text": "If a default ssh tunneling was configured correctly. Data can be copied to and from a remote host as follows:\n# Copy TO Remote Host\n$ scp &lt;my-local-file&gt; &lt;host-nickname&gt;:/&lt;remote-directory&gt;/\n# Copy FROM Remote Host\n$ scp &lt;host-nickname&gt;:/&lt;my-remote-file&gt; /&lt;my-local-directory&gt;/",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Moving data to your server"
    ]
  },
  {
    "objectID": "docs/infrastructure/moving_data.html#scp-with-sudo-files-from-a-remote-host-to-another-remote-host",
    "href": "docs/infrastructure/moving_data.html#scp-with-sudo-files-from-a-remote-host-to-another-remote-host",
    "title": "Moving data to your server",
    "section": "",
    "text": "‚Äú-C /tmp/a‚Äù can be used when you wanted to ‚Äúcd /tmp/a‚Äù\nssh source.tudelft.nl sudo tar cf - -C /tmp/a . | ssh target.tudelft.nl  sudo tar xvf - -C /tmp/b/",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Moving data to your server"
    ]
  },
  {
    "objectID": "docs/infrastructure/giving_sudo_privilege.html",
    "href": "docs/infrastructure/giving_sudo_privilege.html",
    "title": "Giving sudo privilege to a user",
    "section": "",
    "text": "There are some tasks in Linux that requires superuser (sudo) permission. For instance editing the /etc/fstab file, rebooting the system, mounting a drive, viewing /etc/passwd file and many other tasks cannot be done without sudo privilege.\n\n\n\nThis documentation helps you to give sudo privilege to a user.\n\n\n\n\nTU Delft netID\nBasic knowledge of Linux\nThose who grant sudo permission need to have sudo permission themselves.\n\n\n\n\n\nFor Windows users, you will need a programming and runtime environment like Cygwin or SSH client like PuTTY in order to access the VPS running Linux.\n\n\n\n\n\nGetting the username(s) of sudo access candidates\nNavigating to the sudoers directory\nCreate an access file for each of the candidates\nEditing the access files\n\n\n\nYou can get the usernames by checking the /etc/passwd file. This file contains all the usernames and their login information.\n\n\n\nThe list of users who posses the sudo permission is in the /etc/sudoers.d/ folder, so navigate to that folder.\n\n\n\nIf you use ls command to check the available files in this folder, you can see there are some files that their name start with a number and then a dash and then a user name (&lt;number&gt;-&lt;username&gt;). In Linux for every user with a sudo permission, there is a file like that, so we duplicate one of the existing files and rename them for each of the sudo candidates (in fact, name of those file doesn‚Äôt matter; however, it helps us to understand which users have sudo privilege without opening them).\n\n\n\nIn this step you need to open each of the newly duplicated files and replace the old username in the second line with the sudo candidate username. After the edit, you just save the changes and exit the file."
  },
  {
    "objectID": "docs/infrastructure/giving_sudo_privilege.html#background",
    "href": "docs/infrastructure/giving_sudo_privilege.html#background",
    "title": "Giving sudo privilege to a user",
    "section": "",
    "text": "There are some tasks in Linux that requires superuser (sudo) permission. For instance editing the /etc/fstab file, rebooting the system, mounting a drive, viewing /etc/passwd file and many other tasks cannot be done without sudo privilege."
  },
  {
    "objectID": "docs/infrastructure/giving_sudo_privilege.html#what-this-documentation-will-help-achieve",
    "href": "docs/infrastructure/giving_sudo_privilege.html#what-this-documentation-will-help-achieve",
    "title": "Giving sudo privilege to a user",
    "section": "",
    "text": "This documentation helps you to give sudo privilege to a user."
  },
  {
    "objectID": "docs/infrastructure/giving_sudo_privilege.html#prerequisites",
    "href": "docs/infrastructure/giving_sudo_privilege.html#prerequisites",
    "title": "Giving sudo privilege to a user",
    "section": "",
    "text": "TU Delft netID\nBasic knowledge of Linux\nThose who grant sudo permission need to have sudo permission themselves."
  },
  {
    "objectID": "docs/infrastructure/giving_sudo_privilege.html#toolssoftware",
    "href": "docs/infrastructure/giving_sudo_privilege.html#toolssoftware",
    "title": "Giving sudo privilege to a user",
    "section": "",
    "text": "For Windows users, you will need a programming and runtime environment like Cygwin or SSH client like PuTTY in order to access the VPS running Linux."
  },
  {
    "objectID": "docs/infrastructure/giving_sudo_privilege.html#steps",
    "href": "docs/infrastructure/giving_sudo_privilege.html#steps",
    "title": "Giving sudo privilege to a user",
    "section": "",
    "text": "Getting the username(s) of sudo access candidates\nNavigating to the sudoers directory\nCreate an access file for each of the candidates\nEditing the access files\n\n\n\nYou can get the usernames by checking the /etc/passwd file. This file contains all the usernames and their login information.\n\n\n\nThe list of users who posses the sudo permission is in the /etc/sudoers.d/ folder, so navigate to that folder.\n\n\n\nIf you use ls command to check the available files in this folder, you can see there are some files that their name start with a number and then a dash and then a user name (&lt;number&gt;-&lt;username&gt;). In Linux for every user with a sudo permission, there is a file like that, so we duplicate one of the existing files and rename them for each of the sudo candidates (in fact, name of those file doesn‚Äôt matter; however, it helps us to understand which users have sudo privilege without opening them).\n\n\n\nIn this step you need to open each of the newly duplicated files and replace the old username in the second line with the sudo candidate username. After the edit, you just save the changes and exit the file."
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_transfer_ownership.html",
    "href": "docs/infrastructure/gitlab/gitlab_transfer_ownership.html",
    "title": "Transfer ownership of a GitLab repository",
    "section": "",
    "text": "GitLab repositories belonging to employees leaving the TU Delft might be deleted in future.\nFrom the TU Delft GitLab help documentation, we read the following:\nCurrent situation\nFirst, if you use Git on your computer, you will have the entire history also locally on your machine. Without a valid TU Delft account, your GitLab access will become inactive. There are currently no plans to delete any content when an account becomes inactive.\nFuture situation\nAt some point in the future, repositories of former TU Delft employees may be deleted. To avoid losing information, it is recommended to transfer ownership of your repositories to a current TU Delft employee when you leave.\n\n\n\nThis guide provides the steps required to secure access to repositories of employees who will leave the TU Delft.\nIf they have access to your projects, they will still have access after you leave, as long as the projects still exist. You can control who has access to your projects by going to Project Information &gt; Members in the sidebar of your repository. To be safe, transfer the ownership of the projects to a current TU Delft employee when you leave.\nYou can transfer a project to another user‚Äôs GitLab namespace. Read what a namespace is here.\n\n\n\n\n\n\nNote\n\n\n\nProviding a more straightforward way to transfer ownership in GitLab was raised as an issue in 2016 but the issue is still open; you can follow the progress here if interested.\n\n\n\n\n\nThe steps will guide you through transferring repository ownership between TU Delft employees through an intermediary GitLab group:\n\n\n\n\n\n\n\nNote\n\n\n\nSummary (based on this Stack Overflow post): ‚Äã‚ÄãMove your project from your namespace to a group where both you and the other user are owners, then the other user can transfer it to their own namespace\n\n\n\n\nCreate a new group if you don‚Äôt have one that you want to use (Menu &gt; Groups &gt; Create group)\n\n\n\nMake sure that both the maintainer of the project repository, and the person who it will be transferred to, are members of the group and have the Owner role (to add a new owner: go to the group namespace, then from the sidebar choose Group information &gt; Members &gt; Invite members.\n\n\nEnter the username or email of the person you want to invite and change the role to ‚ÄòOwner‚Äô. Click ‚ÄòInvite‚Äô.)\n\n\n\n\nHave a maintainer of the project repository transfer it to the group namespace (go to the project namespace, then from the sidebar go to Settings &gt; General &gt; Advanced &gt; Transfer Project)\n\n\n\n\nAfter doing this, the maintainer(s) of the project will get an email:\n\n\n\n\nNow the person who the project is being transferred to can move it to their own namespace (go to the project namespace, then from the sidebar, go to Settings &gt; General &gt; Advanced &gt; Transfer Project like before).\n\n\n\nIf desired, the group can be deleted after the transfer is complete (go to the group namespace, then from the sidebar go to Settings &gt; General &gt; Advanced &gt; Remove Group)",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Transfer ownership of a GitLab repository"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_transfer_ownership.html#background",
    "href": "docs/infrastructure/gitlab/gitlab_transfer_ownership.html#background",
    "title": "Transfer ownership of a GitLab repository",
    "section": "",
    "text": "GitLab repositories belonging to employees leaving the TU Delft might be deleted in future.\nFrom the TU Delft GitLab help documentation, we read the following:\nCurrent situation\nFirst, if you use Git on your computer, you will have the entire history also locally on your machine. Without a valid TU Delft account, your GitLab access will become inactive. There are currently no plans to delete any content when an account becomes inactive.\nFuture situation\nAt some point in the future, repositories of former TU Delft employees may be deleted. To avoid losing information, it is recommended to transfer ownership of your repositories to a current TU Delft employee when you leave.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Transfer ownership of a GitLab repository"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_transfer_ownership.html#purpose-of-this-guide",
    "href": "docs/infrastructure/gitlab/gitlab_transfer_ownership.html#purpose-of-this-guide",
    "title": "Transfer ownership of a GitLab repository",
    "section": "",
    "text": "This guide provides the steps required to secure access to repositories of employees who will leave the TU Delft.\nIf they have access to your projects, they will still have access after you leave, as long as the projects still exist. You can control who has access to your projects by going to Project Information &gt; Members in the sidebar of your repository. To be safe, transfer the ownership of the projects to a current TU Delft employee when you leave.\nYou can transfer a project to another user‚Äôs GitLab namespace. Read what a namespace is here.\n\n\n\n\n\n\nNote\n\n\n\nProviding a more straightforward way to transfer ownership in GitLab was raised as an issue in 2016 but the issue is still open; you can follow the progress here if interested.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Transfer ownership of a GitLab repository"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_transfer_ownership.html#steps",
    "href": "docs/infrastructure/gitlab/gitlab_transfer_ownership.html#steps",
    "title": "Transfer ownership of a GitLab repository",
    "section": "",
    "text": "The steps will guide you through transferring repository ownership between TU Delft employees through an intermediary GitLab group:\n\n\n\n\n\n\n\nNote\n\n\n\nSummary (based on this Stack Overflow post): ‚Äã‚ÄãMove your project from your namespace to a group where both you and the other user are owners, then the other user can transfer it to their own namespace\n\n\n\n\nCreate a new group if you don‚Äôt have one that you want to use (Menu &gt; Groups &gt; Create group)\n\n\n\nMake sure that both the maintainer of the project repository, and the person who it will be transferred to, are members of the group and have the Owner role (to add a new owner: go to the group namespace, then from the sidebar choose Group information &gt; Members &gt; Invite members.\n\n\nEnter the username or email of the person you want to invite and change the role to ‚ÄòOwner‚Äô. Click ‚ÄòInvite‚Äô.)\n\n\n\n\nHave a maintainer of the project repository transfer it to the group namespace (go to the project namespace, then from the sidebar go to Settings &gt; General &gt; Advanced &gt; Transfer Project)\n\n\n\n\nAfter doing this, the maintainer(s) of the project will get an email:\n\n\n\n\nNow the person who the project is being transferred to can move it to their own namespace (go to the project namespace, then from the sidebar, go to Settings &gt; General &gt; Advanced &gt; Transfer Project like before).\n\n\n\nIf desired, the group can be deleted after the transfer is complete (go to the group namespace, then from the sidebar go to Settings &gt; General &gt; Advanced &gt; Remove Group)",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Transfer ownership of a GitLab repository"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_groups.html",
    "href": "docs/infrastructure/gitlab/gitlab_groups.html",
    "title": "Creating GitLab groups",
    "section": "",
    "text": "Groups and subgroups are similar to directories in the operating systems. In windows or Mac, we create directories to organise files or other directories. For example, imagine a scenario where you want to keep your photos in an organised manner. To this end, you may organise your photos on multiple levels. In the first level, perhaps you broadly classify them and then in the next levels you narrow it down to more specific subjects. Similarly, in the GitLab, a group is used as a binder to put together projects or even other groups. For example, if three themes are researched in a lab, each of those themes could be a group, and all the research in a certain theme fall into its corresponding group. Sometimes there are also sub-themes. For every sub-theme you can create a subgroup (within the group corresponding to the broader theme) and assign the research close to the sub-theme there.\n\n\n\nThis documentation helps researchers to set up a group and assign contributors to the projects within the GitLab.\n\n\n\n\nTU Delft netID\n\n\n\n\n\nLog-in to the GitLab with your netid and password.\nEnter to the Groups section.\nCreate a group.\nAssign contributors to the group.\n\n\n\nTo create a group in GitLab, first you need to log in to the TU Delft‚Äôs instance of GitLab.\n Figure 1: The login page of TU Delft‚Äôs GitLab.\n\n\n\nAfter the log-in, from the top bar click on groups and then Your groups. I\n Figure 2: The Group section of the GitLab.\n\n\n\nIn the new web page, click on the New group and then fill in the form by choosing a suitable group name and then selecting the visibility level. You can later on change both group name and visibility level.\n Figure 3: Creation of a new Group in the GitLab.\n\n\n\nAfter creating a group, it appears in the Groups tab. The group owner can add different people to the projects. This can be done by entering a project and then clicking on the Members on the left panel and filling in the form (Figure 4). A very important part of this form is permissions which are explained here in detail.\n Figure 4: Assigning members to a project.\nYou can also create subgroups within a group. To create a subgroup, you need to enter an existing group and press the New subgroup button. Then, similar to creating a group, you fill in the subgroup name and select the degree of visibility for the subgroup. The subgroup visibility level is always a subset of its (parent) group visibility, hence if the parent visibility is private, there is no choice except private for the subgroup visibility but if the parent visibility is public, subgroup visibility could be either public, internal, or private. The same logic applies when you create a subgroup within another subgroup.\n Figure 5: Creating a subgroup.\nAfter setting up the group, (sub groups,) projects, and assigning the collaborators to the projects, they can start working with the remote repository and transfer their scripts there.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Creating GitLab groups"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_groups.html#background",
    "href": "docs/infrastructure/gitlab/gitlab_groups.html#background",
    "title": "Creating GitLab groups",
    "section": "",
    "text": "Groups and subgroups are similar to directories in the operating systems. In windows or Mac, we create directories to organise files or other directories. For example, imagine a scenario where you want to keep your photos in an organised manner. To this end, you may organise your photos on multiple levels. In the first level, perhaps you broadly classify them and then in the next levels you narrow it down to more specific subjects. Similarly, in the GitLab, a group is used as a binder to put together projects or even other groups. For example, if three themes are researched in a lab, each of those themes could be a group, and all the research in a certain theme fall into its corresponding group. Sometimes there are also sub-themes. For every sub-theme you can create a subgroup (within the group corresponding to the broader theme) and assign the research close to the sub-theme there.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Creating GitLab groups"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_groups.html#what-this-documentation-will-help-achieve",
    "href": "docs/infrastructure/gitlab/gitlab_groups.html#what-this-documentation-will-help-achieve",
    "title": "Creating GitLab groups",
    "section": "",
    "text": "This documentation helps researchers to set up a group and assign contributors to the projects within the GitLab.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Creating GitLab groups"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_groups.html#prerequisites",
    "href": "docs/infrastructure/gitlab/gitlab_groups.html#prerequisites",
    "title": "Creating GitLab groups",
    "section": "",
    "text": "TU Delft netID",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Creating GitLab groups"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_groups.html#steps",
    "href": "docs/infrastructure/gitlab/gitlab_groups.html#steps",
    "title": "Creating GitLab groups",
    "section": "",
    "text": "Log-in to the GitLab with your netid and password.\nEnter to the Groups section.\nCreate a group.\nAssign contributors to the group.\n\n\n\nTo create a group in GitLab, first you need to log in to the TU Delft‚Äôs instance of GitLab.\n Figure 1: The login page of TU Delft‚Äôs GitLab.\n\n\n\nAfter the log-in, from the top bar click on groups and then Your groups. I\n Figure 2: The Group section of the GitLab.\n\n\n\nIn the new web page, click on the New group and then fill in the form by choosing a suitable group name and then selecting the visibility level. You can later on change both group name and visibility level.\n Figure 3: Creation of a new Group in the GitLab.\n\n\n\nAfter creating a group, it appears in the Groups tab. The group owner can add different people to the projects. This can be done by entering a project and then clicking on the Members on the left panel and filling in the form (Figure 4). A very important part of this form is permissions which are explained here in detail.\n Figure 4: Assigning members to a project.\nYou can also create subgroups within a group. To create a subgroup, you need to enter an existing group and press the New subgroup button. Then, similar to creating a group, you fill in the subgroup name and select the degree of visibility for the subgroup. The subgroup visibility level is always a subset of its (parent) group visibility, hence if the parent visibility is private, there is no choice except private for the subgroup visibility but if the parent visibility is public, subgroup visibility could be either public, internal, or private. The same logic applies when you create a subgroup within another subgroup.\n Figure 5: Creating a subgroup.\nAfter setting up the group, (sub groups,) projects, and assigning the collaborators to the projects, they can start working with the remote repository and transfer their scripts there.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Creating GitLab groups"
    ]
  },
  {
    "objectID": "docs/infrastructure/apache_webserver.html",
    "href": "docs/infrastructure/apache_webserver.html",
    "title": "Setting up an Apache web server",
    "section": "",
    "text": "If you want to host a website for your lab, or a web application of some sort, you are going to need to work with a webserver. Apache Web Server is a software package that turns a computer into an HTTP server. That is, it sends web pages ‚Äì stored as HTML files ‚Äì to people on the internet who request them. It is open-source software, which means it can be used and modified freely.\n\nThe job of a web server is to serve websites on the internet. To achieve that goal, it acts as a middleman between the server and client machines. It pulls content from the server on each user request and delivers it to the web‚Ä¶..One of the most popular web servers, Apache allows you to run a secure website without too much of a headache. It is free and open-source, making it a frequent choice of solopreneurs and small businesses who want a presence on the web‚Ä¶..The way Apache HTTP server works is that it will accept requests from the web browser, such as Google Chrome and Microsoft Edge, and turn programming scripts into web pages which contents are visible by the visitors.\n\n\n\n\nThis guide will help you install the Apache web server on Ubuntu Linux and configure a HTTPS secure connection for all incoming web traffic.\nThe steps outlined below will ensure that all incoming web traffic to your server from port 80 (HTTP) will be redirected to port 443 (HTTPS). Port 80 is still accessible but redirects automatically. Redirection is configured after the SSL certificate is in place.\n\n\n\n\nA system running Ubuntu Server\nAn internet connection\nAccess to a user account with sudo privileges\n\n\n\n\n\nA command-line utility (Use keyboard shortcut CTRL-ALT-T, or right-click the desktop and left-click Open Terminal)\nA firewall ‚Äì the default UFW (Uncomplicated Firewall) in Ubuntu is fine\nThe APT package manager, installed by default on Ubuntu\n\n\n\n\n\nRequest a Virtual Private Server (VPS) from TU Delft ICT\nInstall Apache web server on the VPS\nRequest an SSL certificate from TU Delft ICT\nConfigure the SSL certificate file on your VPS\nRedirect all incoming web traffic to HTTPS\n\n\n\nYou can make a request for a server via the TopDesk self service portal. If you would like more information, documentation can be found here ___\nNote: to run a web server, ports 80 (HTTP) and 443 (HTTPS) must be opened.\n\n\n\nApache is an open source web server that‚Äôs available for Linux servers. It is one of the most commonly used softwares for creating a web server. And, it‚Äôs free!\nInstalling Apache can be done using commands in the terminal. These instructions are documented with further information at the link in the beginning of this paragraph. First, make sure your local software packages are up to date by running:\nsudo apt-get update\nWhen that has finished, install the Apache package using:\nsudo apt-get install apache2\nThe system prompts for confirmation ‚Äì do so, and allow the system to complete the installation.\nFind the IP address of your VPS by running:\nhostname -I | awk '{print $1}'\nUse this IP address to enter the following command in your terminal, replacing local.server.ip with the actual IP address of your server:\nhttp://local.server.ip\nIf the installation was completed successfully, you should see the Apache2 Ubuntu Default page in your web browser.\nAlthough the Apache installation process is complete, there is one more additional step. Configure the default UFW firewall to allow traffic on port 80.\nStart by displaying available app profiles on UFW:\nsudo ufw show app list\nUse the following command to allow normal web traffic on port 80:\nsudo ufw allow 'Apache Full'\nVerify the changes by checking UFW status:\nsudo ufw status\nAt this point, your Apache web server is serving over HTTP, which is a good first step! But remember, we need to secure the connection over HTTPS. So, we still have a few more steps.\n\n\n\nDetailed directions on how to do this can be found here ___\nYou can create the .csr file directly on the VPS by first create a directory on /etc/apache2 called ssl:\nmkdir /etc/apache2/ssl\nThen, generate a CSR and private key using:\nopenssl req -x509 -newkey rsa:4096 -keyout &lt;server_domain&gt;.key -out &lt;server_domain&gt;.csr -nodes\nAfter successfully running the command it will ask for the information of certificate request. Complete it using the appropriate information and then .key and .csr files will be generated.\nThe .csr file must be sent to TU Delft ICT using this TopDesk form: TOPdesk SSL certificate server request.\n\n\n\nWhen you receive SSL certificate files from the signing authority via TU Delft ICT, you need to put the information from this certificate in a specific place on your VPS in order to securely expose the web server. These instructions come from here: - Configure ssl for https\nNavigate to the default Apache site config directory using the following command:\nsudo nano /etc/apache2/sites-available/default-ssl.conf\nThis config file tells the server where to find SSL certificate. It should look like this:\n                &lt;IfModule mod_ssl.c&gt;\n                &lt;VirtualHost _default_:443&gt;\n                ServerAdmin webmaster@localhost\n\n                DocumentRoot /var/www/html\n\n                ErrorLog ${APACHE_LOG_DIR}/error.log\n                CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n                SSLEngine on\n\n                SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem\n                SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n\n                &lt;FilesMatch \".(cgi|shtml|phtml|php)$\"&gt;\n                SSLOptions +StdEnvVars\n                &lt;/FilesMatch&gt;\n                &lt;Directory /usr/lib/cgi-bin&gt;\n                SSLOptions +StdEnvVars\n                &lt;/Directory&gt;\n\n                &lt;/VirtualHost&gt;\n                &lt;/IfModule&gt;\nEdit this: ServerAdmin webmaster@localhost to this: ServerAdmin email@example.net\nAdd this right below the ServerAdmin line:\n                ServerName ADD_YOUR_IP_OR_DOMAIN_NAME_HERE\nNow, edit these lines with our certificate location:\n                SSLCertificateFile    /etc/apache2/ssl/apache.crt\n                SSLCertificateKeyFile /etc/apache2/ssl/apache.key\nOur file should look like this:\n                &lt;IfModule mod_ssl.c&gt;\n                &lt;VirtualHost _default_:443&gt;\n                ServerAdmin email@example.net\n                ServerName 203.0.113.122\n\n                DocumentRoot /var/www/html\n\n                ErrorLog ${APACHE_LOG_DIR}/error.log\n                CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n                SSLEngine on\n\n                SSLCertificateFile    /etc/apache2/ssl/apache.crt\n                SSLCertificateKeyFile /etc/apache2/ssl/apache.key\n\n                &lt;FilesMatch \".(cgi|shtml|phtml|php)$\"&gt;\n                SSLOptions +StdEnvVars\n                &lt;/FilesMatch&gt;\n                &lt;Directory /usr/lib/cgi-bin&gt;\n                SSLOptions +StdEnvVars\n                &lt;/Directory&gt;\n\n                &lt;/VirtualHost&gt;\n                &lt;/IfModule&gt;\nSave the file, and close it.\nNote: If you are using something other than Apache Web Server (like, nginx for example) you can also create the SSL config file from scratch. Each application will have different syntax that should be used in this file. You can see how the syntax is set up by using this tool\nEnable the SSL module using following command:\nsudo a2enmod ssl\nNow enable the site we have just edited:\nsudo a2ensite default-ssl.conf\nRestart Apache:\nsudo service apache2 restart\nThe website is now secure, access it using following address in the browser\nhttps://YOUR_SERVER_IP\n\n\n\nsudo a2enmod proxy\nsudo a2enmod proxy_http\nsudo a2enmod rewrite\nAdd in apache conf:\n                ProxyPass /thredds http://localhost:8080/thredds\n                ProxyPassReverse /thredds http://localhost:8080/thredds\n                RedirectMatch ^/$ /thredds/\n\n\n\n\nTest that your web server is secured by HTTPS by typing the Fully Qualified Domain Name (FQDN) of your server in a web browser. If HTTPS is enabled, the URL should begin with it - if it still says HTTP, something will need to be reconfigured.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Setting up an Apache web server"
    ]
  },
  {
    "objectID": "docs/infrastructure/apache_webserver.html#background",
    "href": "docs/infrastructure/apache_webserver.html#background",
    "title": "Setting up an Apache web server",
    "section": "",
    "text": "If you want to host a website for your lab, or a web application of some sort, you are going to need to work with a webserver. Apache Web Server is a software package that turns a computer into an HTTP server. That is, it sends web pages ‚Äì stored as HTML files ‚Äì to people on the internet who request them. It is open-source software, which means it can be used and modified freely.\n\nThe job of a web server is to serve websites on the internet. To achieve that goal, it acts as a middleman between the server and client machines. It pulls content from the server on each user request and delivers it to the web‚Ä¶..One of the most popular web servers, Apache allows you to run a secure website without too much of a headache. It is free and open-source, making it a frequent choice of solopreneurs and small businesses who want a presence on the web‚Ä¶..The way Apache HTTP server works is that it will accept requests from the web browser, such as Google Chrome and Microsoft Edge, and turn programming scripts into web pages which contents are visible by the visitors.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Setting up an Apache web server"
    ]
  },
  {
    "objectID": "docs/infrastructure/apache_webserver.html#what-this-documentation-will-help-achieve",
    "href": "docs/infrastructure/apache_webserver.html#what-this-documentation-will-help-achieve",
    "title": "Setting up an Apache web server",
    "section": "",
    "text": "This guide will help you install the Apache web server on Ubuntu Linux and configure a HTTPS secure connection for all incoming web traffic.\nThe steps outlined below will ensure that all incoming web traffic to your server from port 80 (HTTP) will be redirected to port 443 (HTTPS). Port 80 is still accessible but redirects automatically. Redirection is configured after the SSL certificate is in place.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Setting up an Apache web server"
    ]
  },
  {
    "objectID": "docs/infrastructure/apache_webserver.html#prerequisites",
    "href": "docs/infrastructure/apache_webserver.html#prerequisites",
    "title": "Setting up an Apache web server",
    "section": "",
    "text": "A system running Ubuntu Server\nAn internet connection\nAccess to a user account with sudo privileges",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Setting up an Apache web server"
    ]
  },
  {
    "objectID": "docs/infrastructure/apache_webserver.html#tools-software",
    "href": "docs/infrastructure/apache_webserver.html#tools-software",
    "title": "Setting up an Apache web server",
    "section": "",
    "text": "A command-line utility (Use keyboard shortcut CTRL-ALT-T, or right-click the desktop and left-click Open Terminal)\nA firewall ‚Äì the default UFW (Uncomplicated Firewall) in Ubuntu is fine\nThe APT package manager, installed by default on Ubuntu",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Setting up an Apache web server"
    ]
  },
  {
    "objectID": "docs/infrastructure/apache_webserver.html#steps",
    "href": "docs/infrastructure/apache_webserver.html#steps",
    "title": "Setting up an Apache web server",
    "section": "",
    "text": "Request a Virtual Private Server (VPS) from TU Delft ICT\nInstall Apache web server on the VPS\nRequest an SSL certificate from TU Delft ICT\nConfigure the SSL certificate file on your VPS\nRedirect all incoming web traffic to HTTPS\n\n\n\nYou can make a request for a server via the TopDesk self service portal. If you would like more information, documentation can be found here ___\nNote: to run a web server, ports 80 (HTTP) and 443 (HTTPS) must be opened.\n\n\n\nApache is an open source web server that‚Äôs available for Linux servers. It is one of the most commonly used softwares for creating a web server. And, it‚Äôs free!\nInstalling Apache can be done using commands in the terminal. These instructions are documented with further information at the link in the beginning of this paragraph. First, make sure your local software packages are up to date by running:\nsudo apt-get update\nWhen that has finished, install the Apache package using:\nsudo apt-get install apache2\nThe system prompts for confirmation ‚Äì do so, and allow the system to complete the installation.\nFind the IP address of your VPS by running:\nhostname -I | awk '{print $1}'\nUse this IP address to enter the following command in your terminal, replacing local.server.ip with the actual IP address of your server:\nhttp://local.server.ip\nIf the installation was completed successfully, you should see the Apache2 Ubuntu Default page in your web browser.\nAlthough the Apache installation process is complete, there is one more additional step. Configure the default UFW firewall to allow traffic on port 80.\nStart by displaying available app profiles on UFW:\nsudo ufw show app list\nUse the following command to allow normal web traffic on port 80:\nsudo ufw allow 'Apache Full'\nVerify the changes by checking UFW status:\nsudo ufw status\nAt this point, your Apache web server is serving over HTTP, which is a good first step! But remember, we need to secure the connection over HTTPS. So, we still have a few more steps.\n\n\n\nDetailed directions on how to do this can be found here ___\nYou can create the .csr file directly on the VPS by first create a directory on /etc/apache2 called ssl:\nmkdir /etc/apache2/ssl\nThen, generate a CSR and private key using:\nopenssl req -x509 -newkey rsa:4096 -keyout &lt;server_domain&gt;.key -out &lt;server_domain&gt;.csr -nodes\nAfter successfully running the command it will ask for the information of certificate request. Complete it using the appropriate information and then .key and .csr files will be generated.\nThe .csr file must be sent to TU Delft ICT using this TopDesk form: TOPdesk SSL certificate server request.\n\n\n\nWhen you receive SSL certificate files from the signing authority via TU Delft ICT, you need to put the information from this certificate in a specific place on your VPS in order to securely expose the web server. These instructions come from here: - Configure ssl for https\nNavigate to the default Apache site config directory using the following command:\nsudo nano /etc/apache2/sites-available/default-ssl.conf\nThis config file tells the server where to find SSL certificate. It should look like this:\n                &lt;IfModule mod_ssl.c&gt;\n                &lt;VirtualHost _default_:443&gt;\n                ServerAdmin webmaster@localhost\n\n                DocumentRoot /var/www/html\n\n                ErrorLog ${APACHE_LOG_DIR}/error.log\n                CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n                SSLEngine on\n\n                SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem\n                SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n\n                &lt;FilesMatch \".(cgi|shtml|phtml|php)$\"&gt;\n                SSLOptions +StdEnvVars\n                &lt;/FilesMatch&gt;\n                &lt;Directory /usr/lib/cgi-bin&gt;\n                SSLOptions +StdEnvVars\n                &lt;/Directory&gt;\n\n                &lt;/VirtualHost&gt;\n                &lt;/IfModule&gt;\nEdit this: ServerAdmin webmaster@localhost to this: ServerAdmin email@example.net\nAdd this right below the ServerAdmin line:\n                ServerName ADD_YOUR_IP_OR_DOMAIN_NAME_HERE\nNow, edit these lines with our certificate location:\n                SSLCertificateFile    /etc/apache2/ssl/apache.crt\n                SSLCertificateKeyFile /etc/apache2/ssl/apache.key\nOur file should look like this:\n                &lt;IfModule mod_ssl.c&gt;\n                &lt;VirtualHost _default_:443&gt;\n                ServerAdmin email@example.net\n                ServerName 203.0.113.122\n\n                DocumentRoot /var/www/html\n\n                ErrorLog ${APACHE_LOG_DIR}/error.log\n                CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n                SSLEngine on\n\n                SSLCertificateFile    /etc/apache2/ssl/apache.crt\n                SSLCertificateKeyFile /etc/apache2/ssl/apache.key\n\n                &lt;FilesMatch \".(cgi|shtml|phtml|php)$\"&gt;\n                SSLOptions +StdEnvVars\n                &lt;/FilesMatch&gt;\n                &lt;Directory /usr/lib/cgi-bin&gt;\n                SSLOptions +StdEnvVars\n                &lt;/Directory&gt;\n\n                &lt;/VirtualHost&gt;\n                &lt;/IfModule&gt;\nSave the file, and close it.\nNote: If you are using something other than Apache Web Server (like, nginx for example) you can also create the SSL config file from scratch. Each application will have different syntax that should be used in this file. You can see how the syntax is set up by using this tool\nEnable the SSL module using following command:\nsudo a2enmod ssl\nNow enable the site we have just edited:\nsudo a2ensite default-ssl.conf\nRestart Apache:\nsudo service apache2 restart\nThe website is now secure, access it using following address in the browser\nhttps://YOUR_SERVER_IP\n\n\n\nsudo a2enmod proxy\nsudo a2enmod proxy_http\nsudo a2enmod rewrite\nAdd in apache conf:\n                ProxyPass /thredds http://localhost:8080/thredds\n                ProxyPassReverse /thredds http://localhost:8080/thredds\n                RedirectMatch ^/$ /thredds/",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Setting up an Apache web server"
    ]
  },
  {
    "objectID": "docs/infrastructure/apache_webserver.html#notes-and-next-steps",
    "href": "docs/infrastructure/apache_webserver.html#notes-and-next-steps",
    "title": "Setting up an Apache web server",
    "section": "",
    "text": "Test that your web server is secured by HTTPS by typing the Fully Qualified Domain Name (FQDN) of your server in a web browser. If HTTPS is enabled, the URL should begin with it - if it still says HTTP, something will need to be reconfigured.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Setting up an Apache web server"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSL_Certs.html",
    "href": "docs/infrastructure/VPS_SSL_Certs.html",
    "title": "Configure SSL certificates",
    "section": "",
    "text": "It is common practice to have web servers serving content over HTTPS, which is the secure version of HTTP. In order to do this and make the connection secure, you need an SSL certificate from a certificate signing authority.\nThe role of the SSL certificate is to indicate the encryption of user data from a server exposed on the web. SSL is a key for encrypting information. When a website‚Äôs certificate is expired or invalid, or if it using a self-signed (unofficial) certificate, as a user you either get a warning saying, ‚Äúgo back to safety,‚Äù or can‚Äôt access the website over https - instead you see a message that says ‚ÄúNot Secure‚Äù in your web browser. This means that the certificate is not signed by an authority, so it‚Äôs not trusted.\nIn theory, if your web server is universally accessible and doesn‚Äôt contain forms for users with personal or confidential information, there is no strict need for HTTPS connection. But, HTTPS is the modern standard and without it, visitors will have impression that the website is not safe. Therefore it is good practice to always have HTTPS on your web server.\n\n\n\nSSL certificates for TU Delft researchers and staff may be requested by contacting the ICT service desk. TU Delft ICT will order SSL certificates on your behalf from a trusted certificate signing authority.\n\n\n\n\nTU Delft netID\nLinux-based VPS provided by TU Delft ICT\n(optional) 1-step SSH connection established (see instructions ___)\n\n\n\n\n\nNone\n\n\n\n\n\nGenerate .csr file\nSecure-copy .csr file from server to local machine\nSubmit Certificate Server Request to TU Delft ICT via TopDesk form\n\n\n\nThe Certificate Signing Request (.csr) file is a file generated by you in a standard format that contains all the information the signing authority needs to create a signed certificate. You will need to include this .csr file in submitting your SSL certificate request form to TU Delft ICT, and you should generate it on your VPS directly. The instructions for generating a .csr file come from here.\nSSH to your VPS (____ link if you have followed the process to connect directly, you can use: username@localmachine ~ % ssh externalserveralias)\nEnter following command in the terminal: Note: replace mydomain with your actual domain name:\nusername@externalserver ~ % openssl req -new -newkey rsa:2048 -nodes -keyout mydomain.key -out mydomain.csr\nYou will be prompted to answer a series of questions:\n\nCountry name: 2 letter abbreviation for your country. Netherlands is NL.\nState or Province Name: this is where your org operates from. Zuid-Holland.\nLocality Name - name of the city your org operates from. Don‚Äôt use abbreviations in this field.\nOrganisation Name - use your (organisation‚Äôs) full name.\nOrganisational Unit Name - Use a department name ex. ‚ÄúIT Department‚Äù or ‚ÄúLibrary‚Äù\nCommon Name - the FQDN that you are requesting an SSL certificate for.\nEmail address\nOptional password (can skip step)\nOptional company name\n\nYour CSR file has now been generated. To find your CSR, take a look at the contents of your current working directory with the ls command. You should notice two new files ending with ‚Äú.key‚Äù and ‚Äú.csr‚Äù respectively. For example:\nusername@externalserver ~ % ls\n-rw-r--r--. 1 root root 1082 Jan 31 12:10 mydomain.csr\n-rw-------. 1 root root 1704 Jan 31 12:10 mydomain.key\nThe .key file should be kept private on your server. The .csr file is your certificate signing request, and can be sent to a Certificate Authority.\n\n\n\nIn this step we use Secure Copy protocol (SCP) which is a means of securely transferring files between hosts on a network. This example will save the file in the Home directory, but you can also save it into any other project folder on your machine.\nNavigate to directory of choice. In this case, we‚Äôll use home.\nusername@localmachine .ssh % cd ~\nUse scp to secure copy .csr file from your external server. If you have followed ___these steps to enable 1-step SSH access to your VPS, you can do this using the alias you set, and the .csr file name which should be your external server FQDN.csr. Don‚Äôt forget to add the . at the end of the command.\nusername@localmachine ~ % scp externalserveralias:~/external-server-FQDN.nl.csr .\nCheck to see that it saved on your local machine using ls:\nusername@localmachine ~ % ls\nApplications        Movies\nDesktop             Music\nDocuments           Pictures\nDownloads           Public\nDropbox             external-server-FQDN.nl.csr\nLibrary             surfdrive\nIf you have not set up 1-step SSH connection to your VPS, the file transfer procedure from the VPS to your local computer is composed of two steps:\n\nFrom the VPS to the intermediary server, and\nFrom the intermediary server to the local computer.\n\nFor the first step use:\nscp &lt;path to the csr file&gt; &lt;netid&gt;@&lt;intermediary_server_address&gt;:&lt;a path in the intermediary_server&gt; (e.g., scp thredds.tudelft.nl.csr mynetid@linux-bastion-ex.tudelft.nl:~).\nIn the second step, you need to copy the file from the intermediary server to the local computer using the same command but with a different source and destination:\nscp &lt;netid&gt;@&lt;intermediary_server_address&gt;:&lt;the path in the intermediary_server to the selected file&gt; &lt;a path in the local computer&gt; (e.g., scp mynetid@linux-bastion-ex.tudelft.nl:~/thredds.tudelft.nl.csr .)\nPlease note, if you are a Windows user, for the second step you need to install cygwin and ssh to the intermediary server using:\nssh &lt;netid&gt;@&lt;intermediary_server_address&gt; (e.g., ssh mynetid@linux-bastion-ex.tudelft.nl).\n\n\n\nTU Delft ICT will use the information stored in your .csr file to get the SSL certificate from the signing authority and send the SSL certificate to you. In order to make this request, you must attach your .csr file from the previous step.\nNavigate to TopDesk form for TU Delft. TOPdesk SSL certificate server request.\nChoose ‚ÄúAttach file‚Äù and navigate to directory where .csr file is stored** (in this example, it is in ‚ÄúHome‚Äù). Select ‚Äúexternal-server-FQDN.nl.csr‚Äù.\nSubmit request. You can delete this file from your home directory after you submit the form.\nICT will respond with a SSL certificate (with the extension .crt, .cer, and/or .pem) that comes from the signing authority. When you have this, you can configure the SSL certificate to work with the web server on your VPS.\n\n\n\n\nSSL certificates can expire - TU Delft ICT will let you know when this is about to happen. To renew, you will need a new .csr file. You can send this to TU Delft ICT via the original TopDesk form and they will forward to the signing authority.\nTo use your SSL certificate with your web server, you need to change some configuration settings based on the web server you are using (e.g., Apache, nginx). See ___Set up an Apache web server for more information.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSL certificates"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSL_Certs.html#background",
    "href": "docs/infrastructure/VPS_SSL_Certs.html#background",
    "title": "Configure SSL certificates",
    "section": "",
    "text": "It is common practice to have web servers serving content over HTTPS, which is the secure version of HTTP. In order to do this and make the connection secure, you need an SSL certificate from a certificate signing authority.\nThe role of the SSL certificate is to indicate the encryption of user data from a server exposed on the web. SSL is a key for encrypting information. When a website‚Äôs certificate is expired or invalid, or if it using a self-signed (unofficial) certificate, as a user you either get a warning saying, ‚Äúgo back to safety,‚Äù or can‚Äôt access the website over https - instead you see a message that says ‚ÄúNot Secure‚Äù in your web browser. This means that the certificate is not signed by an authority, so it‚Äôs not trusted.\nIn theory, if your web server is universally accessible and doesn‚Äôt contain forms for users with personal or confidential information, there is no strict need for HTTPS connection. But, HTTPS is the modern standard and without it, visitors will have impression that the website is not safe. Therefore it is good practice to always have HTTPS on your web server.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSL certificates"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSL_Certs.html#what-this-documentation-will-help-achieve",
    "href": "docs/infrastructure/VPS_SSL_Certs.html#what-this-documentation-will-help-achieve",
    "title": "Configure SSL certificates",
    "section": "",
    "text": "SSL certificates for TU Delft researchers and staff may be requested by contacting the ICT service desk. TU Delft ICT will order SSL certificates on your behalf from a trusted certificate signing authority.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSL certificates"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSL_Certs.html#prerequisites",
    "href": "docs/infrastructure/VPS_SSL_Certs.html#prerequisites",
    "title": "Configure SSL certificates",
    "section": "",
    "text": "TU Delft netID\nLinux-based VPS provided by TU Delft ICT\n(optional) 1-step SSH connection established (see instructions ___)",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSL certificates"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSL_Certs.html#toolssoftware",
    "href": "docs/infrastructure/VPS_SSL_Certs.html#toolssoftware",
    "title": "Configure SSL certificates",
    "section": "",
    "text": "None",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSL certificates"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSL_Certs.html#steps",
    "href": "docs/infrastructure/VPS_SSL_Certs.html#steps",
    "title": "Configure SSL certificates",
    "section": "",
    "text": "Generate .csr file\nSecure-copy .csr file from server to local machine\nSubmit Certificate Server Request to TU Delft ICT via TopDesk form\n\n\n\nThe Certificate Signing Request (.csr) file is a file generated by you in a standard format that contains all the information the signing authority needs to create a signed certificate. You will need to include this .csr file in submitting your SSL certificate request form to TU Delft ICT, and you should generate it on your VPS directly. The instructions for generating a .csr file come from here.\nSSH to your VPS (____ link if you have followed the process to connect directly, you can use: username@localmachine ~ % ssh externalserveralias)\nEnter following command in the terminal: Note: replace mydomain with your actual domain name:\nusername@externalserver ~ % openssl req -new -newkey rsa:2048 -nodes -keyout mydomain.key -out mydomain.csr\nYou will be prompted to answer a series of questions:\n\nCountry name: 2 letter abbreviation for your country. Netherlands is NL.\nState or Province Name: this is where your org operates from. Zuid-Holland.\nLocality Name - name of the city your org operates from. Don‚Äôt use abbreviations in this field.\nOrganisation Name - use your (organisation‚Äôs) full name.\nOrganisational Unit Name - Use a department name ex. ‚ÄúIT Department‚Äù or ‚ÄúLibrary‚Äù\nCommon Name - the FQDN that you are requesting an SSL certificate for.\nEmail address\nOptional password (can skip step)\nOptional company name\n\nYour CSR file has now been generated. To find your CSR, take a look at the contents of your current working directory with the ls command. You should notice two new files ending with ‚Äú.key‚Äù and ‚Äú.csr‚Äù respectively. For example:\nusername@externalserver ~ % ls\n-rw-r--r--. 1 root root 1082 Jan 31 12:10 mydomain.csr\n-rw-------. 1 root root 1704 Jan 31 12:10 mydomain.key\nThe .key file should be kept private on your server. The .csr file is your certificate signing request, and can be sent to a Certificate Authority.\n\n\n\nIn this step we use Secure Copy protocol (SCP) which is a means of securely transferring files between hosts on a network. This example will save the file in the Home directory, but you can also save it into any other project folder on your machine.\nNavigate to directory of choice. In this case, we‚Äôll use home.\nusername@localmachine .ssh % cd ~\nUse scp to secure copy .csr file from your external server. If you have followed ___these steps to enable 1-step SSH access to your VPS, you can do this using the alias you set, and the .csr file name which should be your external server FQDN.csr. Don‚Äôt forget to add the . at the end of the command.\nusername@localmachine ~ % scp externalserveralias:~/external-server-FQDN.nl.csr .\nCheck to see that it saved on your local machine using ls:\nusername@localmachine ~ % ls\nApplications        Movies\nDesktop             Music\nDocuments           Pictures\nDownloads           Public\nDropbox             external-server-FQDN.nl.csr\nLibrary             surfdrive\nIf you have not set up 1-step SSH connection to your VPS, the file transfer procedure from the VPS to your local computer is composed of two steps:\n\nFrom the VPS to the intermediary server, and\nFrom the intermediary server to the local computer.\n\nFor the first step use:\nscp &lt;path to the csr file&gt; &lt;netid&gt;@&lt;intermediary_server_address&gt;:&lt;a path in the intermediary_server&gt; (e.g., scp thredds.tudelft.nl.csr mynetid@linux-bastion-ex.tudelft.nl:~).\nIn the second step, you need to copy the file from the intermediary server to the local computer using the same command but with a different source and destination:\nscp &lt;netid&gt;@&lt;intermediary_server_address&gt;:&lt;the path in the intermediary_server to the selected file&gt; &lt;a path in the local computer&gt; (e.g., scp mynetid@linux-bastion-ex.tudelft.nl:~/thredds.tudelft.nl.csr .)\nPlease note, if you are a Windows user, for the second step you need to install cygwin and ssh to the intermediary server using:\nssh &lt;netid&gt;@&lt;intermediary_server_address&gt; (e.g., ssh mynetid@linux-bastion-ex.tudelft.nl).\n\n\n\nTU Delft ICT will use the information stored in your .csr file to get the SSL certificate from the signing authority and send the SSL certificate to you. In order to make this request, you must attach your .csr file from the previous step.\nNavigate to TopDesk form for TU Delft. TOPdesk SSL certificate server request.\nChoose ‚ÄúAttach file‚Äù and navigate to directory where .csr file is stored** (in this example, it is in ‚ÄúHome‚Äù). Select ‚Äúexternal-server-FQDN.nl.csr‚Äù.\nSubmit request. You can delete this file from your home directory after you submit the form.\nICT will respond with a SSL certificate (with the extension .crt, .cer, and/or .pem) that comes from the signing authority. When you have this, you can configure the SSL certificate to work with the web server on your VPS.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSL certificates"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSL_Certs.html#notes-and-next-steps",
    "href": "docs/infrastructure/VPS_SSL_Certs.html#notes-and-next-steps",
    "title": "Configure SSL certificates",
    "section": "",
    "text": "SSL certificates can expire - TU Delft ICT will let you know when this is about to happen. To renew, you will need a new .csr file. You can send this to TU Delft ICT via the original TopDesk form and they will forward to the signing authority.\nTo use your SSL certificate with your web server, you need to change some configuration settings based on the web server you are using (e.g., Apache, nginx). See ___Set up an Apache web server for more information.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSL certificates"
    ]
  },
  {
    "objectID": "docs/guides.html",
    "href": "docs/guides.html",
    "title": "How-to Guides",
    "section": "",
    "text": "The guides are split into a few major sections:\n\nComputing Infrastructure contains information and guides on TU Delft ICT infrastructure.\nData Management contains information and guides on using TU Delft data storage options and best-practices for FAIR data.\nResearch Software contains information for creating FAIR research software.\nResources contains a collection of courses, workshops, and references."
  },
  {
    "objectID": "docs/data/storage_options.html",
    "href": "docs/data/storage_options.html",
    "title": "TU Delft data storage",
    "section": "",
    "text": "TU Delft data storage\nStoring your data in a secure location is a key element of a successful project with a data component. TU Delft recommends using a Project Drive for storing research data. This solution enables secure data storage and facilitates access to your data to other researchers from your research group during the duration of the project. It also allows TU Delft researchers to have access to the data after your PhD contract is completed.\nThe TU Delft offers various data storage options. A complete list is available throught the Service desk (TU delft login required).",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage"
    ]
  },
  {
    "objectID": "docs/data/project_drive_request.html",
    "href": "docs/data/project_drive_request.html",
    "title": "Request Project Drive space",
    "section": "",
    "text": "TU Delft offers several options for researchers to store their data. One of the most commonly recommended options is the Project Drive (Project Data, U:) for its large storage capacity and secure backups from the University.\n\n\n\nThis documentation will walk through the steps needed to request Project Drive storage from TU Delft ICT. This storage can then be accessed directly through webdata.tudelft.nl (uses WebDAV protocol), through a client like WebDrive on your local machine (click on the link and then the WebDrive heading to download and install this software for your operating system), or mounted to a TU Delft Virtual Private Server following the instructions here.\n\n\n\n\nTU Delft netID\nAn Excel file with the netIDs of TU Delft collaborators who should have read/write access to the Project Drive storage space you are requesting (optional)\n\n\n\n\n\nWebDrive (optional GUI to access data on Project Drive)\n\n\n\n\n\nRequest Project Drive storage via the TU Delft ICT form on TopDesk\nFill and send the form according to your data storage preferences and requirements\nAccess your data storage on Project Drive\n\n\n\nYou can make a request for data storage via the TopDesk self service portal. Navigate to this form (requires netID sign in) and see below for guidance on how to fill in each of the sections.\n\n\n\nThe form is divided into three sections: ‚ÄúCaller‚Äù, ‚ÄúInformation about Requester and Data‚Äù, and ‚ÄúData for a Research Project‚Äù.\nThe Caller section should contain the contact information of the main administrator of this server. If you select your name, the fields below should be auto-populated with your building, phone number, email, department/program, organizational unit, and (sometimes) room.\n\n\nIn the next part you choose your preferences about data preservation. The first question asks whether you are setting up new storage on the Project Drive, or want to change existing storage. The next question is about the availability - see below for more information. The usual choice here is ‚ÄúStandard‚Äù.\n\nFor the next question, you need to determine if your data is critical, sensitive, or standard, using these criteria:\n\nThere are two options for backup retention: standard and high. Data are backed up by ICT on a daily basis, so the retention time refers to the period for which these backups are stored. The standard option refers to 14 days of retention while in the other one the retention period is one year. In other words, if the retention time is set to 14 days (Standard) and you delete a file, you can restore it within those two weeks. If retention time is 1 year (High), you can restore it anytime within the year. For most situations, a Standard backup retention time is suitable.\n\nIn the final section, you need to provide some information about your research project. Depending on your research needs, you should specify how much space you will need on the Project Drive to hold all your data, initially and into the planned future. It is important to know that the Project Drive storage is able to expand as your data grows, but you should make your best guess when requesting the space.\nAt the bottom of this section you can attach an Excel file that contains the netIDs of TU Delft affiliated employees that should have read/write access to the storage you are requesting on the Project Drive. If access to the storage is required for TU Delft external researchers, this information can be added as well. Note that it is unusual that non-TU Delft personnel are added to Project Drive storage, and if you would like to do so you should provide a company-affiliated email address for each person you want to add.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Request Project Drive space"
    ]
  },
  {
    "objectID": "docs/data/project_drive_request.html#background",
    "href": "docs/data/project_drive_request.html#background",
    "title": "Request Project Drive space",
    "section": "",
    "text": "TU Delft offers several options for researchers to store their data. One of the most commonly recommended options is the Project Drive (Project Data, U:) for its large storage capacity and secure backups from the University.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Request Project Drive space"
    ]
  },
  {
    "objectID": "docs/data/project_drive_request.html#what-this-documentation-will-help-achieve",
    "href": "docs/data/project_drive_request.html#what-this-documentation-will-help-achieve",
    "title": "Request Project Drive space",
    "section": "",
    "text": "This documentation will walk through the steps needed to request Project Drive storage from TU Delft ICT. This storage can then be accessed directly through webdata.tudelft.nl (uses WebDAV protocol), through a client like WebDrive on your local machine (click on the link and then the WebDrive heading to download and install this software for your operating system), or mounted to a TU Delft Virtual Private Server following the instructions here.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Request Project Drive space"
    ]
  },
  {
    "objectID": "docs/data/project_drive_request.html#prerequisites",
    "href": "docs/data/project_drive_request.html#prerequisites",
    "title": "Request Project Drive space",
    "section": "",
    "text": "TU Delft netID\nAn Excel file with the netIDs of TU Delft collaborators who should have read/write access to the Project Drive storage space you are requesting (optional)",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Request Project Drive space"
    ]
  },
  {
    "objectID": "docs/data/project_drive_request.html#toolssoftware",
    "href": "docs/data/project_drive_request.html#toolssoftware",
    "title": "Request Project Drive space",
    "section": "",
    "text": "WebDrive (optional GUI to access data on Project Drive)",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Request Project Drive space"
    ]
  },
  {
    "objectID": "docs/data/project_drive_request.html#steps",
    "href": "docs/data/project_drive_request.html#steps",
    "title": "Request Project Drive space",
    "section": "",
    "text": "Request Project Drive storage via the TU Delft ICT form on TopDesk\nFill and send the form according to your data storage preferences and requirements\nAccess your data storage on Project Drive\n\n\n\nYou can make a request for data storage via the TopDesk self service portal. Navigate to this form (requires netID sign in) and see below for guidance on how to fill in each of the sections.\n\n\n\nThe form is divided into three sections: ‚ÄúCaller‚Äù, ‚ÄúInformation about Requester and Data‚Äù, and ‚ÄúData for a Research Project‚Äù.\nThe Caller section should contain the contact information of the main administrator of this server. If you select your name, the fields below should be auto-populated with your building, phone number, email, department/program, organizational unit, and (sometimes) room.\n\n\nIn the next part you choose your preferences about data preservation. The first question asks whether you are setting up new storage on the Project Drive, or want to change existing storage. The next question is about the availability - see below for more information. The usual choice here is ‚ÄúStandard‚Äù.\n\nFor the next question, you need to determine if your data is critical, sensitive, or standard, using these criteria:\n\nThere are two options for backup retention: standard and high. Data are backed up by ICT on a daily basis, so the retention time refers to the period for which these backups are stored. The standard option refers to 14 days of retention while in the other one the retention period is one year. In other words, if the retention time is set to 14 days (Standard) and you delete a file, you can restore it within those two weeks. If retention time is 1 year (High), you can restore it anytime within the year. For most situations, a Standard backup retention time is suitable.\n\nIn the final section, you need to provide some information about your research project. Depending on your research needs, you should specify how much space you will need on the Project Drive to hold all your data, initially and into the planned future. It is important to know that the Project Drive storage is able to expand as your data grows, but you should make your best guess when requesting the space.\nAt the bottom of this section you can attach an Excel file that contains the netIDs of TU Delft affiliated employees that should have read/write access to the storage you are requesting on the Project Drive. If access to the storage is required for TU Delft external researchers, this information can be added as well. Note that it is unusual that non-TU Delft personnel are added to Project Drive storage, and if you would like to do so you should provide a company-affiliated email address for each person you want to add.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Request Project Drive space"
    ]
  },
  {
    "objectID": "docs/data/getting_started.html",
    "href": "docs/data/getting_started.html",
    "title": "Getting started",
    "section": "",
    "text": "Getting started\nüèóÔ∏è Under construction",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "Getting started"
    ]
  },
  {
    "objectID": "docs/community/maintainers.html",
    "href": "docs/community/maintainers.html",
    "title": "Guide maintainers",
    "section": "",
    "text": "Guide maintainers\nThis content is automatically generated, all changes made will be lost.\n\n\n\n\n\n\n\n\n\nSection\nTitle\nLead maintainer\nBackup maintainer\n\n\n\n\ncontainers\nDocker users\nMaurits Kok\n\n\n\ndata\nRequestProject Drive\nAshley Cryan\n\n\n\ndata\nSync with Unison\nAshley Cryan\n\n\n\ndata\nMount Project Drive\nRa√∫l Ortiz Merino\nMaurits Kok\n\n\ndata\nData publishing\nAleksandra Wilczynska\n\n\n\ngitlab\nTransfer ownership of a GitLab repository\nLora Armstrong\nMaurits Kok\n\n\ngitlab\nCI with Gitlab\nAshley Cryan\nMaurits Kok\n\n\ngitlab\nGitLab runner for MATLAB\nMaurits Kok\n\n\n\ninfrastructure\nOverview\nMaurits Kok\nJose Urra\n\n\ninfrastructure\nRequest SSL Certificate\nAshley Cryan\n\n\n\ninfrastructure\nRequest VPS\nAshley Cryan\n\n\n\ninfrastructure\nSet up an Apache web server\nAshley Cryan\n\n\n\nresources\nCurriculum\nAshley Cryan\nMaurits Kok\n\n\nsoftware\nFAIR4RS checklist\nMaurits Kok\nElviss Dvinskis\n\n\nsoftware\nSoftware Management Plan\nMaurits Kok\n\n\n\nsoftware\nBranch management\nMaurits Kok\n\n\n\ntesting\nTesting with MATLAB\nMaurits Kok"
  },
  {
    "objectID": "docs/community/contribute.html",
    "href": "docs/community/contribute.html",
    "title": "Contributing guidelines",
    "section": "",
    "text": "Do you have issues, tips, ideas, events, or questions related to Research Computing, Research Data, and Research Software at TU Delft?\nAre you a researcher interested in these topics?\nDo you work and collaborate with researchers on these topics?\n\nWe‚Äôre using GitHub Discussions as a place to connect with other members of our community. We hope that you:\n\nAsk questions about challenges you encounter\nShare ideas and solutions\nEngage with other community members\nBe welcoming and open-minded. Remember that this is a community we build together. See our Code of Conduct for more information.\n\n\n\n\nDo you have questions, ideas or ongoing developments on FAIR related aspects, Open Science, training, etc? Would you like to point to specific resources and potential solutions or ideas?\n\nUse the Q&A to ask a question on a specific topic, such as\n\nHow do I generate a reproducible software development environment?\nWhere can I find information on creating a Python package?\nHow should I archive my software?\nHow do I get started with git?\n\nUse Ideas to make proposals, for instance\n\nUsing jupyter hub for a workshop\nUsing jupyter books to create educational resources\nRunning monthly webinars for the community to transfer FAIR practices\n\nUse Solutions to point people to existing solutions or share your own. These solutions might end up on our Guides website to share with our community.\nShow and tell things you have done that you are proud of and like other to be aware of.\n\n\n\n\n\n\n\nInstall Quarto if you don‚Äôt already have it installed on your machine. You can find the installation instructions here.\nFork the repository to your own GitHub profile.\nClone the repository.\nNavigate to the root of this repository in your terminal.\nRun quarto preview.\nYou will see the rendered version in a browser window.\n\n\n\n\n\nFork the repository to your own GitHub profile.\nEither commit a new change to the repository to trigger the build action or manually trigger the action. To manually trigger the action, go to Actions -&gt; Quarto Publish Guides and press Run workflow and Run workflow.\nIn your forked repository, under Settings -&gt; Pages set Source to gh-pages and /(root) and press Save.\n\n\n\n\n\n(important) announce your plan to the rest of the community before you start working. This announcement should be in the form of a (new) issue;\n(important) wait until some kind of consensus is reached about your idea being a good idea;\nif needed, fork the repository to your own GitHub profile and create your own feature branch off of the latest main commit. While working on your feature branch, make sure to stay up to date with the main branch by pulling in changes, possibly from the ‚Äòupstream‚Äô repository (follow the instructions here and here);\npush your feature branch to (your fork of) the DCC guides repository on GitHub;\ncreate the pull request, e.g.¬†following the instructions here. If needed, provide a link to the gh-pages in your forked repository: https://&lt;your-username&gt;.github.io/TU-Delft-DCC.github.io/."
  },
  {
    "objectID": "docs/community/contribute.html#welcome",
    "href": "docs/community/contribute.html#welcome",
    "title": "Contributing guidelines",
    "section": "",
    "text": "Do you have issues, tips, ideas, events, or questions related to Research Computing, Research Data, and Research Software at TU Delft?\nAre you a researcher interested in these topics?\nDo you work and collaborate with researchers on these topics?\n\nWe‚Äôre using GitHub Discussions as a place to connect with other members of our community. We hope that you:\n\nAsk questions about challenges you encounter\nShare ideas and solutions\nEngage with other community members\nBe welcoming and open-minded. Remember that this is a community we build together. See our Code of Conduct for more information."
  },
  {
    "objectID": "docs/community/contribute.html#how-to-participate",
    "href": "docs/community/contribute.html#how-to-participate",
    "title": "Contributing guidelines",
    "section": "",
    "text": "Do you have questions, ideas or ongoing developments on FAIR related aspects, Open Science, training, etc? Would you like to point to specific resources and potential solutions or ideas?\n\nUse the Q&A to ask a question on a specific topic, such as\n\nHow do I generate a reproducible software development environment?\nWhere can I find information on creating a Python package?\nHow should I archive my software?\nHow do I get started with git?\n\nUse Ideas to make proposals, for instance\n\nUsing jupyter hub for a workshop\nUsing jupyter books to create educational resources\nRunning monthly webinars for the community to transfer FAIR practices\n\nUse Solutions to point people to existing solutions or share your own. These solutions might end up on our Guides website to share with our community.\nShow and tell things you have done that you are proud of and like other to be aware of."
  },
  {
    "objectID": "docs/community/contribute.html#for-developers",
    "href": "docs/community/contribute.html#for-developers",
    "title": "Contributing guidelines",
    "section": "",
    "text": "Install Quarto if you don‚Äôt already have it installed on your machine. You can find the installation instructions here.\nFork the repository to your own GitHub profile.\nClone the repository.\nNavigate to the root of this repository in your terminal.\nRun quarto preview.\nYou will see the rendered version in a browser window.\n\n\n\n\n\nFork the repository to your own GitHub profile.\nEither commit a new change to the repository to trigger the build action or manually trigger the action. To manually trigger the action, go to Actions -&gt; Quarto Publish Guides and press Run workflow and Run workflow.\nIn your forked repository, under Settings -&gt; Pages set Source to gh-pages and /(root) and press Save.\n\n\n\n\n\n(important) announce your plan to the rest of the community before you start working. This announcement should be in the form of a (new) issue;\n(important) wait until some kind of consensus is reached about your idea being a good idea;\nif needed, fork the repository to your own GitHub profile and create your own feature branch off of the latest main commit. While working on your feature branch, make sure to stay up to date with the main branch by pulling in changes, possibly from the ‚Äòupstream‚Äô repository (follow the instructions here and here);\npush your feature branch to (your fork of) the DCC guides repository on GitHub;\ncreate the pull request, e.g.¬†following the instructions here. If needed, provide a link to the gh-pages in your forked repository: https://&lt;your-username&gt;.github.io/TU-Delft-DCC.github.io/."
  },
  {
    "objectID": "docs/community/code_of_conduct.html",
    "href": "docs/community/code_of_conduct.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others‚Äô private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\n\n\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at dcc@tudelft.nl. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project‚Äôs leadership.\n\n\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4"
  },
  {
    "objectID": "docs/community/code_of_conduct.html#our-pledge",
    "href": "docs/community/code_of_conduct.html#our-pledge",
    "title": "Code of Conduct",
    "section": "",
    "text": "In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation."
  },
  {
    "objectID": "docs/community/code_of_conduct.html#our-standards",
    "href": "docs/community/code_of_conduct.html#our-standards",
    "title": "Code of Conduct",
    "section": "",
    "text": "Examples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others‚Äô private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting"
  },
  {
    "objectID": "docs/community/code_of_conduct.html#our-responsibilities",
    "href": "docs/community/code_of_conduct.html#our-responsibilities",
    "title": "Code of Conduct",
    "section": "",
    "text": "Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful."
  },
  {
    "objectID": "docs/community/code_of_conduct.html#scope",
    "href": "docs/community/code_of_conduct.html#scope",
    "title": "Code of Conduct",
    "section": "",
    "text": "This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers."
  },
  {
    "objectID": "docs/community/code_of_conduct.html#enforcement",
    "href": "docs/community/code_of_conduct.html#enforcement",
    "title": "Code of Conduct",
    "section": "",
    "text": "Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at dcc@tudelft.nl. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project‚Äôs leadership."
  },
  {
    "objectID": "docs/community/code_of_conduct.html#attribution",
    "href": "docs/community/code_of_conduct.html#attribution",
    "title": "Code of Conduct",
    "section": "",
    "text": "This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to the DCC Guides!",
    "section": "",
    "text": "These guides are an initiative from TU Delft Digital Competence Centre and aim to provide a comprehensive entrypoint to get you started with Research Computing, Research Data, and Research Software at TU Delft.\n\n\n\n\n\n\nDisclaimer\n\n\n\nThe guides are under active development and mainly in use as a useful resource for the support provided by the DCC. The content is a compilation of developed solutions, relevant links and resources, and documents produced by colleagues inside and outside TU Delft. This is not an official TU Delft website, but rather a place where we keep note of things we find important and useful to share.\n\n\nThe guides are split into a few major sections:\n\nComputing Infrastructure contains information and guides on TU Delft ICT infrastructure.\nData Management contains information and guides on using TU Delft data storage options and best-practices for FAIR data.\nResearch Software contains information for creating FAIR research software.\nResources contains a collection of courses, workshops, and references.\n\n\n\n\n\n\n\nLearn more and get involved\n\n\n\nüôå Join the community\nWe welcome anyone to join us in improving our guides. To join, check out our contributing guide.\nüí¨ Join the discussion\nWe have community discussions, talk about ideas, share general questions and develop solutions and feedback in our community forum.\nüí° Open an issue\nWe track topic requests and bug-reports via GitHub issues.",
    "crumbs": [
      "Guides",
      "Getting started"
    ]
  },
  {
    "objectID": "docs/community/community.html",
    "href": "docs/community/community.html",
    "title": "Community",
    "section": "",
    "text": "Teams channel - DCC Community\nData Stewards\nOpen Science Program\nOpen Science Community\nDelft HPC\nData Champions\nICT Innovation\nStatistical Helpdesk\n\n\n\n\n4TU.ResearchData is an international data repository for science, engineering and design. Its services include curation, sharing, long-term access and preservation of research datasets. These services are available to anyone around the world. In addition, 4TU.ResearchData also offers training and resources to researchers to support them in making research data findable, accessible, interoperable and reproducible (FAIR).\n\n\n\nFounded in 2012 as an independent foundation by NWO and SURF, the Netherlands eScience Center is the national centre with the digital skills to create innovative software solutions in academic research. They award research projects based on calls for proposals, and train researchers in the use of research software. They offer our expertise in the form of research software engineers (RSEs), the technology specialists with expert digital skills who work with us at the Center.\n\n\n\nNL-RSE brings together the community of people writing and contributing to research software from Dutch universities, knowledge institutes, companies and other organizations to share knowledge, to organize meetings, and raise awareness for the scientific recognition of research software."
  },
  {
    "objectID": "docs/community/community.html#partners-within-the-tu-delft",
    "href": "docs/community/community.html#partners-within-the-tu-delft",
    "title": "Community",
    "section": "",
    "text": "Teams channel - DCC Community\nData Stewards\nOpen Science Program\nOpen Science Community\nDelft HPC\nData Champions\nICT Innovation\nStatistical Helpdesk"
  },
  {
    "objectID": "docs/community/community.html#tu.researchdata",
    "href": "docs/community/community.html#tu.researchdata",
    "title": "Community",
    "section": "",
    "text": "4TU.ResearchData is an international data repository for science, engineering and design. Its services include curation, sharing, long-term access and preservation of research datasets. These services are available to anyone around the world. In addition, 4TU.ResearchData also offers training and resources to researchers to support them in making research data findable, accessible, interoperable and reproducible (FAIR)."
  },
  {
    "objectID": "docs/community/community.html#escience-center",
    "href": "docs/community/community.html#escience-center",
    "title": "Community",
    "section": "",
    "text": "Founded in 2012 as an independent foundation by NWO and SURF, the Netherlands eScience Center is the national centre with the digital skills to create innovative software solutions in academic research. They award research projects based on calls for proposals, and train researchers in the use of research software. They offer our expertise in the form of research software engineers (RSEs), the technology specialists with expert digital skills who work with us at the Center."
  },
  {
    "objectID": "docs/community/community.html#nl-rse",
    "href": "docs/community/community.html#nl-rse",
    "title": "Community",
    "section": "",
    "text": "NL-RSE brings together the community of people writing and contributing to research software from Dutch universities, knowledge institutes, companies and other organizations to share knowledge, to organize meetings, and raise awareness for the scientific recognition of research software."
  },
  {
    "objectID": "docs/community/dcc.html",
    "href": "docs/community/dcc.html",
    "title": "About the DCC",
    "section": "",
    "text": "About the DCC\nThe TU Delft Digital Competence Centre (DCC) is an on-campus initiative to help researchers make research data FAIR, improve research software, and apply computing practices to increase the efficiency of the research process. The DCC is an initiative of the Open Science Programme at TU Delft designed to benefit researchers at all levels.\nFor more information, please visit our website at dcc.tudelft.nl or email us at dcc@tudelft.nl."
  },
  {
    "objectID": "docs/data/fair.html",
    "href": "docs/data/fair.html",
    "title": "FAIR data",
    "section": "",
    "text": "FAIR data\nüèóÔ∏è Under construction",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "FAIR Data"
    ]
  },
  {
    "objectID": "docs/data/project_drive_mounting.html",
    "href": "docs/data/project_drive_mounting.html",
    "title": "Mount Project Drive on Server",
    "section": "",
    "text": "Project drive storage from TU Delft ICT can be mounted and made accessible in your (TU Delft) Virtual Private Server.\n\n\n\n\nA (TU Delft) Virtual Private Server\n(TU Delft) Project Drive\n\n\n\n\n\nLocate the URL of your project storage\nConnect to your TU Delft VPS via SSH\nCreate a new directory as a mounting point\nRetrieve your Linux user and group details\nEdit the fstab file to include project storage technical details\nMount the project drive\n\n\n\nThe URL for your project drive can be obtained from either - the email from TU Delft ICT with the confirmation of your project drive request, or - by navigating to https://webdata.tudelft.nl/, and then through WebDav Web Links &gt; Staff-Umbrella &gt; ‚ÄúEnter your netID and password‚Äù to retrieve a list of your project drives.\nCopy everything after ‚Äúhttps://webdata.tudelft.nl/‚Äù (this will be staff-umbrella/&lt;your_project_name&gt;)\n\n\n\nFollow instructions in TU Delft ICT email from initial server setup or configure a 1-step connection via SSH.\n\n\n\nThe convention is to create mounting points in the folder /media. Navigate to the folder and create a new folder with\ncd /media\nmkdir &lt;server_mount_point&gt;\nReplace &lt;server_mount_point&gt; with the name of your choice. This will be the name of the folder where your project drive will be mounted.\n\n\n\nIn the terminal, you can retrieve your local user and group details with:\nid -u &lt;your_netID&gt; # User ID\nid -g &lt;your_netID&gt; # Group ID\nYou may need the values for uid and gid for step 5.\n\n\n\n\n\n\nNote\n\n\n\nThese commands are server-specific, so make sure to execute them on the server where the project drives will be mounted.\n\n\n\n\n\nThe fstab file containes a list of the addresses of external file systems. In this file, the details of your project drive will need to be added in a single line. This line consists of four parts: 1. filesystem - the address of the project drive 2. mount point - the location in the VPS where you want to mount the project drive 3. type - the type of the filesystem 4. options - additional option such as user privileges\nThe fstab file must be in the /etc/ directory and can be opened with the vi or nano editor:\n\nvinano\n\n\nIn the terminal, enter the following command to open the fstab file in the vi editor:\nsudo vi /etc/fstab\nThen, switch to the insert mode (hit ‚Äúi‚Äù to switch to insert mode and be able to type)\n\n\nIn the terminal, enter the following command to open the fstab file in the nano editor:\nsudo nano /etc/fstab\n\n\n\nAdd the following line to the file:\n&lt;your_netID&gt;@sftp.tudelft.nl:/staff-umbrella/&lt;project_drive_name&gt;  /media/&lt;server_mount_point&gt; fuse.sshfs  rw,noauto,users,_netdev  0  0\nreplacing the values between &lt; and &gt; with your NetID, the name of your project drive, and the name of the folder you created in step 3.\n\n\n\n\n\n\nNote\n\n\n\nIf this configuration throws a permission error during mounting, try:\n//tudelft.net/staff-umbrella/&lt;project_drive_name&gt;/ /media/&lt;server_mount_point&gt; cifs username=&lt;your_netID&gt;,noauto,uid=&lt;your_uid&gt;,gid=&lt;your_gid&gt;,forcegid,rw,_netdev\nUse the values for uid and gid from step 4.\n\n\nClose the file editor and save the changes:\n\nvinano\n\n\nUse Control+C followed by :wq to save the file and close it to get back to your terminal.\n\n\nAs indicated by the nano interface, use Control+O to write the file. Then, confirm your choice of filename by hitting enter. Finally, exit the file with Control+X\n\n\n\n\n\n\nTo mount the project drive execute the command\nsudo mount /media/&lt;server_mount_point&gt;\nYou can also unmount the drive with\nfusermount -u /media/&lt;server_mount_point&gt;\nThe project drive will not mount automatically, so you will need to remount it manually each time you restart the server.\n\n\n\n\n\n\nNote\n\n\n\nIf the step above does not work, it probably means that the packages for mounting cifs-type filesystems haven‚Äôt been installed. Depending on your linux flavour you will need to install them using:\n\nUbuntu/DebianRedhat/Centos/Fedora\n\n\nsudo apt install cifs-utils\n\n\nsudo yum install cifs-utils\n\n\n\n\n\n\n\n\n\nThe steps above can also be used to mount any storage offered by TU Delft with a WebDav link (staff-homes, staff-groups, staff-bulk, student-homes, student-groups and apps). Simply use the latter half of the URL from the WebDav web link of your storage drive, which will change from staff-umbrella (project drive) to something else depending on the storage drive you would like to mount.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Mount Project Drive on Server"
    ]
  },
  {
    "objectID": "docs/data/project_drive_mounting.html#what-this-documentation-will-help-achieve",
    "href": "docs/data/project_drive_mounting.html#what-this-documentation-will-help-achieve",
    "title": "Mount Project Drive on Server",
    "section": "",
    "text": "Project drive storage from TU Delft ICT can be mounted and made accessible in your (TU Delft) Virtual Private Server.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Mount Project Drive on Server"
    ]
  },
  {
    "objectID": "docs/data/project_drive_mounting.html#prerequisites",
    "href": "docs/data/project_drive_mounting.html#prerequisites",
    "title": "Mount Project Drive on Server",
    "section": "",
    "text": "A (TU Delft) Virtual Private Server\n(TU Delft) Project Drive",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Mount Project Drive on Server"
    ]
  },
  {
    "objectID": "docs/data/project_drive_mounting.html#steps",
    "href": "docs/data/project_drive_mounting.html#steps",
    "title": "Mount Project Drive on Server",
    "section": "",
    "text": "Locate the URL of your project storage\nConnect to your TU Delft VPS via SSH\nCreate a new directory as a mounting point\nRetrieve your Linux user and group details\nEdit the fstab file to include project storage technical details\nMount the project drive\n\n\n\nThe URL for your project drive can be obtained from either - the email from TU Delft ICT with the confirmation of your project drive request, or - by navigating to https://webdata.tudelft.nl/, and then through WebDav Web Links &gt; Staff-Umbrella &gt; ‚ÄúEnter your netID and password‚Äù to retrieve a list of your project drives.\nCopy everything after ‚Äúhttps://webdata.tudelft.nl/‚Äù (this will be staff-umbrella/&lt;your_project_name&gt;)\n\n\n\nFollow instructions in TU Delft ICT email from initial server setup or configure a 1-step connection via SSH.\n\n\n\nThe convention is to create mounting points in the folder /media. Navigate to the folder and create a new folder with\ncd /media\nmkdir &lt;server_mount_point&gt;\nReplace &lt;server_mount_point&gt; with the name of your choice. This will be the name of the folder where your project drive will be mounted.\n\n\n\nIn the terminal, you can retrieve your local user and group details with:\nid -u &lt;your_netID&gt; # User ID\nid -g &lt;your_netID&gt; # Group ID\nYou may need the values for uid and gid for step 5.\n\n\n\n\n\n\nNote\n\n\n\nThese commands are server-specific, so make sure to execute them on the server where the project drives will be mounted.\n\n\n\n\n\nThe fstab file containes a list of the addresses of external file systems. In this file, the details of your project drive will need to be added in a single line. This line consists of four parts: 1. filesystem - the address of the project drive 2. mount point - the location in the VPS where you want to mount the project drive 3. type - the type of the filesystem 4. options - additional option such as user privileges\nThe fstab file must be in the /etc/ directory and can be opened with the vi or nano editor:\n\nvinano\n\n\nIn the terminal, enter the following command to open the fstab file in the vi editor:\nsudo vi /etc/fstab\nThen, switch to the insert mode (hit ‚Äúi‚Äù to switch to insert mode and be able to type)\n\n\nIn the terminal, enter the following command to open the fstab file in the nano editor:\nsudo nano /etc/fstab\n\n\n\nAdd the following line to the file:\n&lt;your_netID&gt;@sftp.tudelft.nl:/staff-umbrella/&lt;project_drive_name&gt;  /media/&lt;server_mount_point&gt; fuse.sshfs  rw,noauto,users,_netdev  0  0\nreplacing the values between &lt; and &gt; with your NetID, the name of your project drive, and the name of the folder you created in step 3.\n\n\n\n\n\n\nNote\n\n\n\nIf this configuration throws a permission error during mounting, try:\n//tudelft.net/staff-umbrella/&lt;project_drive_name&gt;/ /media/&lt;server_mount_point&gt; cifs username=&lt;your_netID&gt;,noauto,uid=&lt;your_uid&gt;,gid=&lt;your_gid&gt;,forcegid,rw,_netdev\nUse the values for uid and gid from step 4.\n\n\nClose the file editor and save the changes:\n\nvinano\n\n\nUse Control+C followed by :wq to save the file and close it to get back to your terminal.\n\n\nAs indicated by the nano interface, use Control+O to write the file. Then, confirm your choice of filename by hitting enter. Finally, exit the file with Control+X\n\n\n\n\n\n\nTo mount the project drive execute the command\nsudo mount /media/&lt;server_mount_point&gt;\nYou can also unmount the drive with\nfusermount -u /media/&lt;server_mount_point&gt;\nThe project drive will not mount automatically, so you will need to remount it manually each time you restart the server.\n\n\n\n\n\n\nNote\n\n\n\nIf the step above does not work, it probably means that the packages for mounting cifs-type filesystems haven‚Äôt been installed. Depending on your linux flavour you will need to install them using:\n\nUbuntu/DebianRedhat/Centos/Fedora\n\n\nsudo apt install cifs-utils\n\n\nsudo yum install cifs-utils",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Mount Project Drive on Server"
    ]
  },
  {
    "objectID": "docs/data/project_drive_mounting.html#notes-and-next-steps",
    "href": "docs/data/project_drive_mounting.html#notes-and-next-steps",
    "title": "Mount Project Drive on Server",
    "section": "",
    "text": "The steps above can also be used to mount any storage offered by TU Delft with a WebDav link (staff-homes, staff-groups, staff-bulk, student-homes, student-groups and apps). Simply use the latter half of the URL from the WebDav web link of your storage drive, which will change from staff-umbrella (project drive) to something else depending on the storage drive you would like to mount.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Mount Project Drive on Server"
    ]
  },
  {
    "objectID": "docs/data/publishing.html",
    "href": "docs/data/publishing.html",
    "title": "Prepare data for publishing",
    "section": "",
    "text": "Prepare data for publishing\nIf you would like to publish your data collection in 4TU.ResearchData or another data repository, it is advisable that you discuss the publishing process, including the reuse and citation of the original datasets and appropriate licensing options with your faculty Data Steward.\n\nTo learn more about research data management, you can participate in an introductory workshop on Research Data Management offered by TU Delft, or review materials from online resources.\nSee a videos on best practices on organising data files from UK Data Service.\nSee a General guide prepared by Princeton Research Data Service on how to prepare data for publication as well more detailed videos on:\n\nREADMEs and codebooks\nFindability and accessibility\nCiting data\n\n\nTo prepare the data, see TU Delft Library recommendations regarding data documentation:\n\nMake sure to include metadata document in the data package. Follow 4TU.ResearchData guide on writing README file.\nFor tabular data, consider creating a code book.\n\nDetermine whether there is a defined/ preferred metadata standard for your discipline and follow the standard. You can browse through existing standards here.\n\nConsider the file format of the data. Data repositories might have preferred file formats, that ensure interoperability and long-term preservation of the files. See the list of 4TU.ResearchData preferred file formats or UK Data Archive recommended and acceptable file formats. The list might vary by repository, so it is important to cross-reference your file formats with the list of recommended formats of the repository of your choice.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "FAIR Data",
      "Prepare data for publishing"
    ]
  },
  {
    "objectID": "docs/data/sync_unison.html",
    "href": "docs/data/sync_unison.html",
    "title": "Sync with Project Drive and SURFDrive with Unison",
    "section": "",
    "text": "From Unison website: ‚ÄúUnison is a file-synchronization tool for OSX, Unix, and Windows. It allows two replicas of a collection of files and directories to be stored on different hosts (or different disks on the same host), modified separately, and then brought up to date by propagating the changes in each replica to the other.‚Äù\n\n\n\nThis documentation will help you create bi-directional backups between your local machine and a server (such as TU Delft project drive). Sync profiles can be customized so that, for example, shared folders on SurfDrive can be automatically synced with directories in the WebDAV links for TU Delft Staff and Students.\n\n\n\n\n\n\n\n\nUnison\nGTK+ for Windows\nDesktop client for SURFDrive\n\n\n\n\n\nUnison requires .dll‚Äôs from GTK+ for Windows Runtime Environment. Download it and install it (to C:Files (x86)-Runtime).\nInstall Unison 2.48.4 and extract it in a folder.\nDownload desktop client for SurfDrive\nIf not already there, mount H: Drive or Project Drive folder in your local machine from WebDAV link https://webdata.tudelft.nl/\nNavigate to Unison folder via command prompt and then enter ‚Äúunison 2.48.4 GTK.exe‚Äù to run the Unison GUI.\nThe GUI starts & asks you to set a Profile for your file syncing. The Profile Creation Wizard guides you through this. For the Synchronization kind choose Local. Set the First directory to your local SurfDrive and Second directory, to WebDAV folder.\nBy pressing the Go button on the top menu, Unison start synchronizing both specified directories.\n\n\n\n\nThese steps should theoretically be feasible, but there is an issue with the configuration of mounted TU Delft drives and them disconnecting which interrupts automated backup and read/write access. We are working on this with TU Delft ICT.\n\nInstall Unison\nDownload desktop client for SurfDrive\nMount H: drive or Project Drive folder in your local machine using these directions\nChoose folders for sync from local machine or Surfdrive to WebDAV folder",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Sync with Project Drive and SURFDrive with Unison"
    ]
  },
  {
    "objectID": "docs/data/sync_unison.html#background",
    "href": "docs/data/sync_unison.html#background",
    "title": "Sync with Project Drive and SURFDrive with Unison",
    "section": "",
    "text": "From Unison website: ‚ÄúUnison is a file-synchronization tool for OSX, Unix, and Windows. It allows two replicas of a collection of files and directories to be stored on different hosts (or different disks on the same host), modified separately, and then brought up to date by propagating the changes in each replica to the other.‚Äù",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Sync with Project Drive and SURFDrive with Unison"
    ]
  },
  {
    "objectID": "docs/data/sync_unison.html#what-this-documentation-will-help-achieve",
    "href": "docs/data/sync_unison.html#what-this-documentation-will-help-achieve",
    "title": "Sync with Project Drive and SURFDrive with Unison",
    "section": "",
    "text": "This documentation will help you create bi-directional backups between your local machine and a server (such as TU Delft project drive). Sync profiles can be customized so that, for example, shared folders on SurfDrive can be automatically synced with directories in the WebDAV links for TU Delft Staff and Students.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Sync with Project Drive and SURFDrive with Unison"
    ]
  },
  {
    "objectID": "docs/data/sync_unison.html#toolssoftware",
    "href": "docs/data/sync_unison.html#toolssoftware",
    "title": "Sync with Project Drive and SURFDrive with Unison",
    "section": "",
    "text": "Unison\nGTK+ for Windows\nDesktop client for SURFDrive",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Sync with Project Drive and SURFDrive with Unison"
    ]
  },
  {
    "objectID": "docs/data/sync_unison.html#steps-for-windows",
    "href": "docs/data/sync_unison.html#steps-for-windows",
    "title": "Sync with Project Drive and SURFDrive with Unison",
    "section": "",
    "text": "Unison requires .dll‚Äôs from GTK+ for Windows Runtime Environment. Download it and install it (to C:Files (x86)-Runtime).\nInstall Unison 2.48.4 and extract it in a folder.\nDownload desktop client for SurfDrive\nIf not already there, mount H: Drive or Project Drive folder in your local machine from WebDAV link https://webdata.tudelft.nl/\nNavigate to Unison folder via command prompt and then enter ‚Äúunison 2.48.4 GTK.exe‚Äù to run the Unison GUI.\nThe GUI starts & asks you to set a Profile for your file syncing. The Profile Creation Wizard guides you through this. For the Synchronization kind choose Local. Set the First directory to your local SurfDrive and Second directory, to WebDAV folder.\nBy pressing the Go button on the top menu, Unison start synchronizing both specified directories.",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Sync with Project Drive and SURFDrive with Unison"
    ]
  },
  {
    "objectID": "docs/data/sync_unison.html#steps-for-mac-beta",
    "href": "docs/data/sync_unison.html#steps-for-mac-beta",
    "title": "Sync with Project Drive and SURFDrive with Unison",
    "section": "",
    "text": "These steps should theoretically be feasible, but there is an issue with the configuration of mounted TU Delft drives and them disconnecting which interrupts automated backup and read/write access. We are working on this with TU Delft ICT.\n\nInstall Unison\nDownload desktop client for SurfDrive\nMount H: drive or Project Drive folder in your local machine using these directions\nChoose folders for sync from local machine or Surfdrive to WebDAV folder",
    "crumbs": [
      "Guides",
      "üóÉÔ∏è **Data Management**",
      "TU Delft Data storage",
      "Sync with Project Drive and SURFDrive with Unison"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSH.html",
    "href": "docs/infrastructure/VPS_SSH.html",
    "title": "Configure SSH Tunneling",
    "section": "",
    "text": "To connect to a remote host, TU Delft uses a proxy server, know as bastion. To reach a remote host, a user has to connect first to the bastion and from there to the remote host. However, a user can connect directly to the remote host using ssh tunneling.\n\n\n\nOn your local machine, edit the ~/.ssh/config file and add the following confuration:\n\nHost &lt;host-nickname&gt;\n    HostName &lt;target-host&gt;\n    User &lt;target-username&gt;\n    ProxyCommand ssh &lt;bastion-username&gt;@linux-bastion-ex.tudelft.nl -W %h:%p \nReplace: : a name for you choice for the targe host, e.g., my-server : the actual name of the target host (FQDM), e.g, server.tudelft.nl : the username used to login to the target host : the username used to login to the bastion server\n\nCreate a key-pair on the local machine.\n\n$ ssh-keygen -f ~/.ssh/&lt;my-keyname&gt; -t rsa -b 4096\nYou will be promted to crate a passphrase, we recommend you to add one to make the connection more secure. The passphrase will be asked every time you connect to the target host.\nA private and public keys will be added to ~/.ssh. The public key is in the &lt;my-keyname&gt;.pub\n\nCopy the content of the public key to the ~/.ssh/authorized_keys file in the target host.\nConnect to the target host using ssh tunneling. Use your bastion-password when asked.\n\n$ ssh &lt;host-nickname&gt;\nIf you encounter problems with the connection. Use the debug mode ssh -vvv &lt;host-nickname&gt; to find out what might have gone wrong.\n\n\n\nWinSCP is a GUI that makes it very easy to inspect, edit and transfer files on the webserver. Instructions for setting this up on a hypothetical server from the CiTG faculty are provided below. General documentation on tunneling with WinSCP are here: https://winscp.net/eng/docs/ui_login_tunnel\nThese instructions were tested with an existing id_ed25519 key, assume you already have WinSCP installed and can modify a text file on the server in your user directory using the terminal.\nDo the following:\n\nAs explained above, log in to the server and add your public key to the file /home/&lt;username&gt;/.ssh/authorized_keys (this only needs to be done once).\n\nIt should look like this with your own keys XXXXXXX and NetID filled between the &lt;...&gt; (note the &lt;XXXXXXX&gt; is much longer in reality):\nssh-rsa &lt;XXXXXXX&gt; ICT-SYSTEMS-&lt;NETID&gt;\nssh-rsa &lt;XXXXXXX&gt; ICT-SYSTEMS-&lt;NETID&gt;\nssh-ed25519 &lt;XXXXXXX&gt; &lt;NETID&gt;@tudelft.nl\n\nUsing WinSCP, the following fields should be entered:\n\nOn the main login settings page: - File protocol: SFTP - Host name: &lt;server&gt;.citg.tudelft.nl - User name: your NetID\n\nOpen the ‚ÄúAdvanced‚Ä¶‚Äù window\nOn the page ‚ÄúTunnel‚Äù (under heading ‚ÄúConnection,‚Äù still in the Advanced window):\n\n\nHost name: linux-bastion-ex.tudelft.nl\nUser name: your NetID\n\n\nOn the page ‚ÄúAuthentication‚Äù (under heading ‚ÄúSSH,‚Äù still in the Advanced window):\n\n\nPrivate key file: select your private key file, for example C:..../&lt;username&gt;/.ssh/id_ed25519\nNote that the app may ask you to convert your existing key to a Putty format (for example ‚ÄúDo you want to convert OpenSSH private key to PuTTY format?‚Äù). Click ‚ÄúOK‚Äù then make sure you select the new PuTTY file (e.g., C:..../&lt;username&gt;/.ssh/id_ed25519.ppk)\n\n\nSave the setting and click ‚ÄúLogin‚Äù, using your NetID password to authenticate.\n\n\n\nIf you have sudo rights on the webserver you can use this via WinSCP as follows:\n\nOnce agin go to the ‚ÄúAdvanced‚Ä¶‚Äù window to the ‚ÄúSFTP‚Äù page under heading ‚ÄúEnvironment‚Äù\nIn field ‚ÄúSFTP server‚Äù enter the following: sudo /usr/lib/openssh/sftp-server\nSave the changes\nUse with caution!\n\nNote that the path to sftp-server may be different but can be easily checked and arranged. This will not work if you change the setting and continue to use an open session.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSH Tunneling"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSH.html#set-a-default-ssh-tunneling-for-a-host-linux-terminal",
    "href": "docs/infrastructure/VPS_SSH.html#set-a-default-ssh-tunneling-for-a-host-linux-terminal",
    "title": "Configure SSH Tunneling",
    "section": "",
    "text": "On your local machine, edit the ~/.ssh/config file and add the following confuration:\n\nHost &lt;host-nickname&gt;\n    HostName &lt;target-host&gt;\n    User &lt;target-username&gt;\n    ProxyCommand ssh &lt;bastion-username&gt;@linux-bastion-ex.tudelft.nl -W %h:%p \nReplace: : a name for you choice for the targe host, e.g., my-server : the actual name of the target host (FQDM), e.g, server.tudelft.nl : the username used to login to the target host : the username used to login to the bastion server\n\nCreate a key-pair on the local machine.\n\n$ ssh-keygen -f ~/.ssh/&lt;my-keyname&gt; -t rsa -b 4096\nYou will be promted to crate a passphrase, we recommend you to add one to make the connection more secure. The passphrase will be asked every time you connect to the target host.\nA private and public keys will be added to ~/.ssh. The public key is in the &lt;my-keyname&gt;.pub\n\nCopy the content of the public key to the ~/.ssh/authorized_keys file in the target host.\nConnect to the target host using ssh tunneling. Use your bastion-password when asked.\n\n$ ssh &lt;host-nickname&gt;\nIf you encounter problems with the connection. Use the debug mode ssh -vvv &lt;host-nickname&gt; to find out what might have gone wrong.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSH Tunneling"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_SSH.html#tunneling-with-winscp",
    "href": "docs/infrastructure/VPS_SSH.html#tunneling-with-winscp",
    "title": "Configure SSH Tunneling",
    "section": "",
    "text": "WinSCP is a GUI that makes it very easy to inspect, edit and transfer files on the webserver. Instructions for setting this up on a hypothetical server from the CiTG faculty are provided below. General documentation on tunneling with WinSCP are here: https://winscp.net/eng/docs/ui_login_tunnel\nThese instructions were tested with an existing id_ed25519 key, assume you already have WinSCP installed and can modify a text file on the server in your user directory using the terminal.\nDo the following:\n\nAs explained above, log in to the server and add your public key to the file /home/&lt;username&gt;/.ssh/authorized_keys (this only needs to be done once).\n\nIt should look like this with your own keys XXXXXXX and NetID filled between the &lt;...&gt; (note the &lt;XXXXXXX&gt; is much longer in reality):\nssh-rsa &lt;XXXXXXX&gt; ICT-SYSTEMS-&lt;NETID&gt;\nssh-rsa &lt;XXXXXXX&gt; ICT-SYSTEMS-&lt;NETID&gt;\nssh-ed25519 &lt;XXXXXXX&gt; &lt;NETID&gt;@tudelft.nl\n\nUsing WinSCP, the following fields should be entered:\n\nOn the main login settings page: - File protocol: SFTP - Host name: &lt;server&gt;.citg.tudelft.nl - User name: your NetID\n\nOpen the ‚ÄúAdvanced‚Ä¶‚Äù window\nOn the page ‚ÄúTunnel‚Äù (under heading ‚ÄúConnection,‚Äù still in the Advanced window):\n\n\nHost name: linux-bastion-ex.tudelft.nl\nUser name: your NetID\n\n\nOn the page ‚ÄúAuthentication‚Äù (under heading ‚ÄúSSH,‚Äù still in the Advanced window):\n\n\nPrivate key file: select your private key file, for example C:..../&lt;username&gt;/.ssh/id_ed25519\nNote that the app may ask you to convert your existing key to a Putty format (for example ‚ÄúDo you want to convert OpenSSH private key to PuTTY format?‚Äù). Click ‚ÄúOK‚Äù then make sure you select the new PuTTY file (e.g., C:..../&lt;username&gt;/.ssh/id_ed25519.ppk)\n\n\nSave the setting and click ‚ÄúLogin‚Äù, using your NetID password to authenticate.\n\n\n\nIf you have sudo rights on the webserver you can use this via WinSCP as follows:\n\nOnce agin go to the ‚ÄúAdvanced‚Ä¶‚Äù window to the ‚ÄúSFTP‚Äù page under heading ‚ÄúEnvironment‚Äù\nIn field ‚ÄúSFTP server‚Äù enter the following: sudo /usr/lib/openssh/sftp-server\nSave the changes\nUse with caution!\n\nNote that the path to sftp-server may be different but can be easily checked and arranged. This will not work if you change the setting and continue to use an open session.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Configure SSH Tunneling"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_request.html",
    "href": "docs/infrastructure/VPS_request.html",
    "title": "Request a Virtual Private Server (VPS)",
    "section": "",
    "text": "This guide describes the essentials for requesting and setting up a TU Delft managed server. A server is a computer that can handle requests. Servers are often a critical component of architectural solutions for data management. There are many reasons why you as a researcher may need to request a server, for example:\n\nAutomation of a process in your data collection\nSet up runners for the TU Delft Gitlab\nA part of your analysis should be running continuously, and you cannot do it with your own machine\nSpecific functionality (web server)\nYou need a machine to handle large amounts of requests\nYou want to outsource the maintenance of a server to TU Delft ICT\nRely on safety and security administrated by the University, including backups\nSecuring/controlling access\nMounting storage drive\n\n\n\n\nThis documentation helps researchers to request a VPS and data storage on the Project Drive. There are other forms of storage available, but Project Drive storage is often recommended for expandable and secure data preservation.\n\n\n\n\nTU Delft netID\nBasic knowledge of Linux (if requesting Linux server, recommended)\n\n\n\n\n\nFor Windows users, you will need a programming and runtime environment like Cygwin or SSH client like PuTTY in order to access the VPS running Linux\n\n\n\n\n\nNavigate to the TU Delft server request form\nFill and send the form according to your preferences and needs\nReceive confirmation of server deployment from TU Delft ICT\nLogin to your server for the first time\n\n\n\nYou can make a request for a server via the TopDesk self service portal.\n\n\n\nThe form is divided into three sections: Caller Details, General Questions, and Technical Questions.\nCaller Details should contain the contact information of the main administrator of this server. If you select your name, the fields below should be auto-populated with your building, phone number, email, department/program, organizational unit, and (sometimes) room.\n\nThe last question in the Caller Details section access to the server by external users. Generally speaking, granting access to TU Delft-managed servers is not recommended, but if it is necessary you can add the contact details of the external party and the reason(s) for which they should have access. You will need to provide a company-affiliated email address for the external user, and the request may or may not be granted by ICT.\n\n\n\n\n\n\nNote\n\n\n\nKeep in mind that a server provides access to the backend of your application. If for example you want to deploy a web server to share your data widely, users do not need direct access to the server in order to access the data itself.\n\n\nThe next section contains General Questions about the name and purpose of your server. If you plan to use this server ongoing into the future, you can either leave the field ‚ÄúExpiration Date‚Äù blank or add a date in 10+ years. TU Delft ICT will alert you when the expiration date you select is nearing.\n\n\n\n436ab820-8194-4212-8622-93758ba56f56\n\n\nYou can add the netIDs of your collaborators who should have read/write access to the server, and optionally the netID of your faculty Data Steward or of a DCC Team member if you would like their help. You can find your faculty Data Steward contact information here.\nThe Technical Questions section asks you to specify an operating system and some other technical details about your server configuration. You can choose between four basic configuration options - you can of course consider which one best fits your needs. If you are new to working with servers, generally the best choice is Basic configuration 4.\nThe next question deals with opening ports to the server through the TU Delft firewall. Ports are essentially gateways to the server that are specific to different purposes. For example, port 80 is opened to handle HTTP requests, port 20 is opened to handle SSH requests, port 3306 is opened to allow access to a MySQL database, and port 443 is opened to handle HTTPS requests. If you are planning to use your VPS as a webserver, ports 80 and 443 should be open. You can use this space to ask ICT to do so.\nThe next section, FQDN, is the way you can refer to your server on the internet. The recommendation is a format like &lt;servername&gt;.&lt;facultyabbreviation&gt;.tudelt.nl. In general, it‚Äôs best to keep names relatively short and informative to make it easy to reference and remember.\nYou should also be sure to check the instructions in the form and contact your faculty Data Steward or Faculty IT Manager if you need further explanation.\n\n\n\n\nA few days after submitting the request, you will receive an email from ICT with login details. You can connect to your VPS via ssh. If you are in the windows environment, it is recommended to install Cygwin and its packages to be able to use the ssh command in a non-unix environment. The unix based systems (e.g., mac) contain ssh by default. In order to login to your VPS, you need to first ssh to the bastion server with ssh &lt;username&gt;@linux-bastion-ex.tudelft.nl and then from there login to your server ssh &lt;servername&gt;. The first thing we recommend to do after logging into the server is to update the pre-installed packages:\n\nDebian (Ubuntu)RedHat\n\n\nsudo apt-get update && sudo apt-get upgrade\n\n\nsudo yum update\n\n\n\nIt would be also useful to set a password for the VPS when you log in. You can do that by passwd command.\n\n\n\nCommon next steps after obtaining a VPS and storage include initial configuration steps such as establishing a connection via SSH and mounting Project Drive storage; and also software installation steps for tools like Docker, and setting up Apache Web Server. We will add more documentation when common installations come to our attention, so please reach out to us with your questions or suggestions.\n\nInstall Docker\nConfigure Docker for use as non-root\nConfiguring VM connection via SSH\nConfigure a runner for the TU Delft Gitlab\nApache Web Server",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Request a VPS"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_request.html#background",
    "href": "docs/infrastructure/VPS_request.html#background",
    "title": "Request a Virtual Private Server (VPS)",
    "section": "",
    "text": "This guide describes the essentials for requesting and setting up a TU Delft managed server. A server is a computer that can handle requests. Servers are often a critical component of architectural solutions for data management. There are many reasons why you as a researcher may need to request a server, for example:\n\nAutomation of a process in your data collection\nSet up runners for the TU Delft Gitlab\nA part of your analysis should be running continuously, and you cannot do it with your own machine\nSpecific functionality (web server)\nYou need a machine to handle large amounts of requests\nYou want to outsource the maintenance of a server to TU Delft ICT\nRely on safety and security administrated by the University, including backups\nSecuring/controlling access\nMounting storage drive",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Request a VPS"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_request.html#what-this-documentation-will-help-you-achieve",
    "href": "docs/infrastructure/VPS_request.html#what-this-documentation-will-help-you-achieve",
    "title": "Request a Virtual Private Server (VPS)",
    "section": "",
    "text": "This documentation helps researchers to request a VPS and data storage on the Project Drive. There are other forms of storage available, but Project Drive storage is often recommended for expandable and secure data preservation.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Request a VPS"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_request.html#prerequisites",
    "href": "docs/infrastructure/VPS_request.html#prerequisites",
    "title": "Request a Virtual Private Server (VPS)",
    "section": "",
    "text": "TU Delft netID\nBasic knowledge of Linux (if requesting Linux server, recommended)",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Request a VPS"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_request.html#toolssoftware",
    "href": "docs/infrastructure/VPS_request.html#toolssoftware",
    "title": "Request a Virtual Private Server (VPS)",
    "section": "",
    "text": "For Windows users, you will need a programming and runtime environment like Cygwin or SSH client like PuTTY in order to access the VPS running Linux",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Request a VPS"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_request.html#steps",
    "href": "docs/infrastructure/VPS_request.html#steps",
    "title": "Request a Virtual Private Server (VPS)",
    "section": "",
    "text": "Navigate to the TU Delft server request form\nFill and send the form according to your preferences and needs\nReceive confirmation of server deployment from TU Delft ICT\nLogin to your server for the first time\n\n\n\nYou can make a request for a server via the TopDesk self service portal.\n\n\n\nThe form is divided into three sections: Caller Details, General Questions, and Technical Questions.\nCaller Details should contain the contact information of the main administrator of this server. If you select your name, the fields below should be auto-populated with your building, phone number, email, department/program, organizational unit, and (sometimes) room.\n\nThe last question in the Caller Details section access to the server by external users. Generally speaking, granting access to TU Delft-managed servers is not recommended, but if it is necessary you can add the contact details of the external party and the reason(s) for which they should have access. You will need to provide a company-affiliated email address for the external user, and the request may or may not be granted by ICT.\n\n\n\n\n\n\nNote\n\n\n\nKeep in mind that a server provides access to the backend of your application. If for example you want to deploy a web server to share your data widely, users do not need direct access to the server in order to access the data itself.\n\n\nThe next section contains General Questions about the name and purpose of your server. If you plan to use this server ongoing into the future, you can either leave the field ‚ÄúExpiration Date‚Äù blank or add a date in 10+ years. TU Delft ICT will alert you when the expiration date you select is nearing.\n\n\n\n436ab820-8194-4212-8622-93758ba56f56\n\n\nYou can add the netIDs of your collaborators who should have read/write access to the server, and optionally the netID of your faculty Data Steward or of a DCC Team member if you would like their help. You can find your faculty Data Steward contact information here.\nThe Technical Questions section asks you to specify an operating system and some other technical details about your server configuration. You can choose between four basic configuration options - you can of course consider which one best fits your needs. If you are new to working with servers, generally the best choice is Basic configuration 4.\nThe next question deals with opening ports to the server through the TU Delft firewall. Ports are essentially gateways to the server that are specific to different purposes. For example, port 80 is opened to handle HTTP requests, port 20 is opened to handle SSH requests, port 3306 is opened to allow access to a MySQL database, and port 443 is opened to handle HTTPS requests. If you are planning to use your VPS as a webserver, ports 80 and 443 should be open. You can use this space to ask ICT to do so.\nThe next section, FQDN, is the way you can refer to your server on the internet. The recommendation is a format like &lt;servername&gt;.&lt;facultyabbreviation&gt;.tudelt.nl. In general, it‚Äôs best to keep names relatively short and informative to make it easy to reference and remember.\nYou should also be sure to check the instructions in the form and contact your faculty Data Steward or Faculty IT Manager if you need further explanation.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Request a VPS"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_request.html#initial-configuration-of-your-vps",
    "href": "docs/infrastructure/VPS_request.html#initial-configuration-of-your-vps",
    "title": "Request a Virtual Private Server (VPS)",
    "section": "",
    "text": "A few days after submitting the request, you will receive an email from ICT with login details. You can connect to your VPS via ssh. If you are in the windows environment, it is recommended to install Cygwin and its packages to be able to use the ssh command in a non-unix environment. The unix based systems (e.g., mac) contain ssh by default. In order to login to your VPS, you need to first ssh to the bastion server with ssh &lt;username&gt;@linux-bastion-ex.tudelft.nl and then from there login to your server ssh &lt;servername&gt;. The first thing we recommend to do after logging into the server is to update the pre-installed packages:\n\nDebian (Ubuntu)RedHat\n\n\nsudo apt-get update && sudo apt-get upgrade\n\n\nsudo yum update\n\n\n\nIt would be also useful to set a password for the VPS when you log in. You can do that by passwd command.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Request a VPS"
    ]
  },
  {
    "objectID": "docs/infrastructure/VPS_request.html#next-steps",
    "href": "docs/infrastructure/VPS_request.html#next-steps",
    "title": "Request a Virtual Private Server (VPS)",
    "section": "",
    "text": "Common next steps after obtaining a VPS and storage include initial configuration steps such as establishing a connection via SSH and mounting Project Drive storage; and also software installation steps for tools like Docker, and setting up Apache Web Server. We will add more documentation when common installations come to our attention, so please reach out to us with your questions or suggestions.\n\nInstall Docker\nConfigure Docker for use as non-root\nConfiguring VM connection via SSH\nConfigure a runner for the TU Delft Gitlab\nApache Web Server",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers",
      "Request a VPS"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_docker.html",
    "href": "docs/infrastructure/gitlab/gitlab_docker.html",
    "title": "Continuous Integration with GitLab",
    "section": "",
    "text": "If you happen to be working with TU Delft GitLab instance and you want to implement DevOps or CI/CD pipelines, then you need to install a GitLab runner on your own. This should runner should be in a server, responding to changes such as commits or pull requests in your GitLab repository.\n\n\n\nIn order to be ready to run CI/CD pipeline, a gitlab-runner Docker container is running on the server all the time. When a new commit is made in the GitLab repository, this triggers the CI/CD process to run a job (e.g., unit test) based on the pipeline defined in the .gitlab-ci.yml file in the repository. The container used to carry out the CI/CD tests is defined in the .gitlab-ci.yml file in the first line, and spawned from within the continuously running gitlab-runner container. In our example, we define image:python:3.12.3 so every time a commit is made in the repository, a new container based on the python:3.12.3 Docker image is started and used to run tests on the python scripts and generate artifacts as defined in the .gitlab-ci.yml file.\n\n\n\n\nThe documentation below will help you deploy GitLab runner in a Docker container on a server to automatically run CI/CD tests and store artifacts every time there is a new commit to a GitLab repository.\n\n\n\nServer: This example uses a server to run the whole process. You can request a server from TU Delft ICT service following these directions here. It is useful to set this up on a server so that Docker can be running continuously, and be ready to run CI/CD tests whenever a new commit occurs in the repository.\nDocker: We use a Docker container to run the GitLab runner and initialise the CI/CD pipeline.\nGitlab runner: (from GitLab documentation) ‚ÄúRunners are the agents that run the CI/CD jobs that come from GitLab. When you register a runner, you are setting up communication between your GitLab instance and the machine where GitLab Runner is installed. Runners usually process jobs on the same machine where you installed GitLab Runner.‚Äù Link\nGitLab repository: A remote repository that can store your code and keeps track of your project development. You‚Äôre on one right now! :) If you haven‚Äôt already, you use your netID and password to login to TU Delft‚Äôs GitLab instance at gitlab.tudelft.nl and create a repository containing your project code.\nCI/CD pipeline: ‚ÄúA CI/CD pipeline automates your software delivery process. The pipeline builds code, runs tests (CI), and safely deploys a new version of the application (CD)‚Äù Link.\n\n\n\n\nGitLab (TU Delft instance)\nDocker\ngitlab-runner Docker image\n\n\n\n\n\nRequest the server\nConnect to the server via ssh\nInstall Docker on the server\nPull in the gitlab-runner image\nCreate a unit test function stored as a file in the repository\nMake the .gitlab-ci.yml file\nSet up the GitLab runner\nDeploy the GitLab runner in a Docker container\nRegister the runner\nTest the CI/CD pipeline\n\n\n\nIf you don‚Äôt have a VPS already, you can request one from TU Delft ICT. Instructions for requesting a server and storage from ICT can be found under Remote servers/Request a Virtual Private Server.\nWe recommend the following configuration for configuring a GitLab runner:\n\nBasic Configuration 4 (Ubuntu)\nNo additional ports need to be configured for deploying a GitLab runner with Docker.\nAdditional space if your Docker images are larger than ~10Gb.\n\n\n\n\nThe email response from Sysadmin@TUDelft.nl confirming the successful deployment of your server should contain instructions to connect via ssh.\nThe default login procedure is to connect to the Bastion host (an intermediary server) and then to your server, so it is a two-step process. Please check your email for Steps A and B as described by ICT admin.\nYou can also connect to your server using Putty (Windows) or, on Mac/Linux, configure one-step access by storing ssh keys between your local machine and your server and designating an alias.\nWhen you are successfully connected, you should see in your terminal/command prompt something like this:\n\n\n\n\nServers often do not come with Docker installed, so you may need to do it by yourself. To check whether Docker is installed, run docker --version. If you get an error message, you can install it using the following commands:\nsudo su (this will give you the root access) apt install docker.io\nNow, Docker is installed. You can check if it is installed successfully by again typing docker --version in the terminal. The result should show the version of Docker you just installed.\n\n\n\nIn order to run CI/CD jobs for your repository, you need to install GitLab Runner. GitLab Runner is an application that works with GitLab CI/CD to run jobs in a pipeline. Rather than install GitLab Runner directly on the server, we will run a lightweight version of it as a Docker container. To do so, we first need to pull the gitlab-runner Docker image by running:\ndocker pull gitlab/gitlab-runner\nYou can check whether it was successful by running docker images - you should see the gitlab/gitlab-runner image listed in the output.\n\n\n\n\n\n\nThis file in the root of your repository defines what CI/CD tests to run upon each new commit. It does this by prescribing what container to run, what scripts to run inside the container, and what things to store as artefacts.\nIn the first line of the file, you can write image: &lt;image_name&gt;:&lt;tag&gt; to indicate you want to run the runner in a Docker container container. &lt;image_name&gt; should be replaced by the name of the image you want to use to start a container and &lt;tag&gt; should be replaced by the tag of the image you want to use(image names can be found on DockerHub). Tag will be set to latest by default.\nImportant: The file must be named exactly .gitlab-ci.yml so it will be recognizable by GitLab runner. Below is an example .gitlab-ci.yml file.\n# This is a sample build configuration for Python.\n# Check our guides at https://confluence.atlassian.com/x/x4UWN for more examples.\n# Only use spaces to indent your .yml configuration.\n# -----\ntest:\n  # You can specify a custom docker image from Docker Hub as your build environment.\n  image: python:3.12.3\n  cache:\n    paths:\n      - .cache/pip\n      - venv/\n  script: # Modify the commands below to build your repository.\n    - pip install -r requirements.txt\n    - nosetests --with-coverage  --cover-html\n  artifacts:\n    paths:\n      - cover/\nTags can be added as a final section in your .gitlab-ci.yml file (they are optional, we didn‚Äôt enter any in this example). You then need to enter these tags exactly when registering the runner.\n\n\n\n\nFollow the instructions here till step 7 to create a GitLab runner for your repository\nChoose ‚ÄòLinux‚Äô under operating systems\nCopy the authentication token generated and keep it handy. It will be required in Step 9.\n\n\n\n\ndocker run -d --name gitlab-runner --restart always \\\n-v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\ngitlab/gitlab-runner:latest\non Mac OS, use /Users/Shared/ instead of /srv/\nCheck that gitlab-runner container is running using docker ps -a\n\n\n\nRun the following command to register your runner and configure it to deploy in a Docker container on your server.\ndocker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register\non Mac OS, use /Users/Shared/ instead of /srv/\nIn response to this command you will be prompted to answer the following questions\n- GitLab URL: https://gitlab.tudelft.nl\n- gitlab-ci token: Paste the authentication token generated in Step 7.\n- Enter name of the runner: example-runner\n- Type of executor: docker\n- Default Docker image: Specify the same image as the one specified in the 'image' field of the .gitlab-ci.yml file.\nSee an example below.\ndocker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register\nEnter the GitLab instance URL (for example, https://gitlab.com/):\nhttps://gitlab.tudelft.nl\nEnter the registration token:\nxxxxxxxxxxxxxxx\nVerifying runner... is valid                        runner=xxxxxxx\nEnter a name for the runner. This is stored only in the local config.toml file:\n[xxxxxxx]: example-runner\nEnter an executor: instance, kubernetes, docker-windows, docker-autoscaler, parallels, shell, ssh, virtualbox, docker+machine, custom, docker:\ndocker\nEnter the default Docker image (for example, ruby:2.7):\njulia:1.6\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n\nConfiguration (with the authentication token) was saved in \"/etc/gitlab-runner/config.toml\"\n\n\n\n\nIn your repository, navigate to Settings &gt; CI/CD &gt; Click on Expand under Runners: You should see that the runner is active as indicated by a green dot. This means that the CI pipeline is ready to run, but it needs to be triggered.\nIn order to trigger the CI pipeline, you should make a new commit to the GitLab repository.\nAfter you have made a new commit to the repository, navigate to Your Project -&gt; Build -&gt; Pipelines to check the status of CI/CD pipelines connected to your repository. If you find a green message that says ‚Äúpassed‚Äù with a check mark then congratulations, your pipeline works! If you see a red message that says ‚Äúfailed‚Äù, check to see the error message associated with it - sometimes you need to reconfigure your .gitlab-ci.yml file to make sure it uses the correct formatting and defines the tests appropriately.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Continuous Integration with GitLab"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_docker.html#background",
    "href": "docs/infrastructure/gitlab/gitlab_docker.html#background",
    "title": "Continuous Integration with GitLab",
    "section": "",
    "text": "If you happen to be working with TU Delft GitLab instance and you want to implement DevOps or CI/CD pipelines, then you need to install a GitLab runner on your own. This should runner should be in a server, responding to changes such as commits or pull requests in your GitLab repository.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Continuous Integration with GitLab"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_docker.html#quick-overview-of-how-it-works",
    "href": "docs/infrastructure/gitlab/gitlab_docker.html#quick-overview-of-how-it-works",
    "title": "Continuous Integration with GitLab",
    "section": "",
    "text": "In order to be ready to run CI/CD pipeline, a gitlab-runner Docker container is running on the server all the time. When a new commit is made in the GitLab repository, this triggers the CI/CD process to run a job (e.g., unit test) based on the pipeline defined in the .gitlab-ci.yml file in the repository. The container used to carry out the CI/CD tests is defined in the .gitlab-ci.yml file in the first line, and spawned from within the continuously running gitlab-runner container. In our example, we define image:python:3.12.3 so every time a commit is made in the repository, a new container based on the python:3.12.3 Docker image is started and used to run tests on the python scripts and generate artifacts as defined in the .gitlab-ci.yml file.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Continuous Integration with GitLab"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_docker.html#what-this-documentation-will-help-achieve",
    "href": "docs/infrastructure/gitlab/gitlab_docker.html#what-this-documentation-will-help-achieve",
    "title": "Continuous Integration with GitLab",
    "section": "",
    "text": "The documentation below will help you deploy GitLab runner in a Docker container on a server to automatically run CI/CD tests and store artifacts every time there is a new commit to a GitLab repository.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Continuous Integration with GitLab"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_docker.html#prerequisites",
    "href": "docs/infrastructure/gitlab/gitlab_docker.html#prerequisites",
    "title": "Continuous Integration with GitLab",
    "section": "",
    "text": "Server: This example uses a server to run the whole process. You can request a server from TU Delft ICT service following these directions here. It is useful to set this up on a server so that Docker can be running continuously, and be ready to run CI/CD tests whenever a new commit occurs in the repository.\nDocker: We use a Docker container to run the GitLab runner and initialise the CI/CD pipeline.\nGitlab runner: (from GitLab documentation) ‚ÄúRunners are the agents that run the CI/CD jobs that come from GitLab. When you register a runner, you are setting up communication between your GitLab instance and the machine where GitLab Runner is installed. Runners usually process jobs on the same machine where you installed GitLab Runner.‚Äù Link\nGitLab repository: A remote repository that can store your code and keeps track of your project development. You‚Äôre on one right now! :) If you haven‚Äôt already, you use your netID and password to login to TU Delft‚Äôs GitLab instance at gitlab.tudelft.nl and create a repository containing your project code.\nCI/CD pipeline: ‚ÄúA CI/CD pipeline automates your software delivery process. The pipeline builds code, runs tests (CI), and safely deploys a new version of the application (CD)‚Äù Link.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Continuous Integration with GitLab"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_docker.html#toolssoftware",
    "href": "docs/infrastructure/gitlab/gitlab_docker.html#toolssoftware",
    "title": "Continuous Integration with GitLab",
    "section": "",
    "text": "GitLab (TU Delft instance)\nDocker\ngitlab-runner Docker image",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Continuous Integration with GitLab"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_docker.html#steps",
    "href": "docs/infrastructure/gitlab/gitlab_docker.html#steps",
    "title": "Continuous Integration with GitLab",
    "section": "",
    "text": "Request the server\nConnect to the server via ssh\nInstall Docker on the server\nPull in the gitlab-runner image\nCreate a unit test function stored as a file in the repository\nMake the .gitlab-ci.yml file\nSet up the GitLab runner\nDeploy the GitLab runner in a Docker container\nRegister the runner\nTest the CI/CD pipeline\n\n\n\nIf you don‚Äôt have a VPS already, you can request one from TU Delft ICT. Instructions for requesting a server and storage from ICT can be found under Remote servers/Request a Virtual Private Server.\nWe recommend the following configuration for configuring a GitLab runner:\n\nBasic Configuration 4 (Ubuntu)\nNo additional ports need to be configured for deploying a GitLab runner with Docker.\nAdditional space if your Docker images are larger than ~10Gb.\n\n\n\n\nThe email response from Sysadmin@TUDelft.nl confirming the successful deployment of your server should contain instructions to connect via ssh.\nThe default login procedure is to connect to the Bastion host (an intermediary server) and then to your server, so it is a two-step process. Please check your email for Steps A and B as described by ICT admin.\nYou can also connect to your server using Putty (Windows) or, on Mac/Linux, configure one-step access by storing ssh keys between your local machine and your server and designating an alias.\nWhen you are successfully connected, you should see in your terminal/command prompt something like this:\n\n\n\n\nServers often do not come with Docker installed, so you may need to do it by yourself. To check whether Docker is installed, run docker --version. If you get an error message, you can install it using the following commands:\nsudo su (this will give you the root access) apt install docker.io\nNow, Docker is installed. You can check if it is installed successfully by again typing docker --version in the terminal. The result should show the version of Docker you just installed.\n\n\n\nIn order to run CI/CD jobs for your repository, you need to install GitLab Runner. GitLab Runner is an application that works with GitLab CI/CD to run jobs in a pipeline. Rather than install GitLab Runner directly on the server, we will run a lightweight version of it as a Docker container. To do so, we first need to pull the gitlab-runner Docker image by running:\ndocker pull gitlab/gitlab-runner\nYou can check whether it was successful by running docker images - you should see the gitlab/gitlab-runner image listed in the output.\n\n\n\n\n\n\nThis file in the root of your repository defines what CI/CD tests to run upon each new commit. It does this by prescribing what container to run, what scripts to run inside the container, and what things to store as artefacts.\nIn the first line of the file, you can write image: &lt;image_name&gt;:&lt;tag&gt; to indicate you want to run the runner in a Docker container container. &lt;image_name&gt; should be replaced by the name of the image you want to use to start a container and &lt;tag&gt; should be replaced by the tag of the image you want to use(image names can be found on DockerHub). Tag will be set to latest by default.\nImportant: The file must be named exactly .gitlab-ci.yml so it will be recognizable by GitLab runner. Below is an example .gitlab-ci.yml file.\n# This is a sample build configuration for Python.\n# Check our guides at https://confluence.atlassian.com/x/x4UWN for more examples.\n# Only use spaces to indent your .yml configuration.\n# -----\ntest:\n  # You can specify a custom docker image from Docker Hub as your build environment.\n  image: python:3.12.3\n  cache:\n    paths:\n      - .cache/pip\n      - venv/\n  script: # Modify the commands below to build your repository.\n    - pip install -r requirements.txt\n    - nosetests --with-coverage  --cover-html\n  artifacts:\n    paths:\n      - cover/\nTags can be added as a final section in your .gitlab-ci.yml file (they are optional, we didn‚Äôt enter any in this example). You then need to enter these tags exactly when registering the runner.\n\n\n\n\nFollow the instructions here till step 7 to create a GitLab runner for your repository\nChoose ‚ÄòLinux‚Äô under operating systems\nCopy the authentication token generated and keep it handy. It will be required in Step 9.\n\n\n\n\ndocker run -d --name gitlab-runner --restart always \\\n-v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\ngitlab/gitlab-runner:latest\non Mac OS, use /Users/Shared/ instead of /srv/\nCheck that gitlab-runner container is running using docker ps -a\n\n\n\nRun the following command to register your runner and configure it to deploy in a Docker container on your server.\ndocker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register\non Mac OS, use /Users/Shared/ instead of /srv/\nIn response to this command you will be prompted to answer the following questions\n- GitLab URL: https://gitlab.tudelft.nl\n- gitlab-ci token: Paste the authentication token generated in Step 7.\n- Enter name of the runner: example-runner\n- Type of executor: docker\n- Default Docker image: Specify the same image as the one specified in the 'image' field of the .gitlab-ci.yml file.\nSee an example below.\ndocker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register\nEnter the GitLab instance URL (for example, https://gitlab.com/):\nhttps://gitlab.tudelft.nl\nEnter the registration token:\nxxxxxxxxxxxxxxx\nVerifying runner... is valid                        runner=xxxxxxx\nEnter a name for the runner. This is stored only in the local config.toml file:\n[xxxxxxx]: example-runner\nEnter an executor: instance, kubernetes, docker-windows, docker-autoscaler, parallels, shell, ssh, virtualbox, docker+machine, custom, docker:\ndocker\nEnter the default Docker image (for example, ruby:2.7):\njulia:1.6\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n\nConfiguration (with the authentication token) was saved in \"/etc/gitlab-runner/config.toml\"\n\n\n\n\nIn your repository, navigate to Settings &gt; CI/CD &gt; Click on Expand under Runners: You should see that the runner is active as indicated by a green dot. This means that the CI pipeline is ready to run, but it needs to be triggered.\nIn order to trigger the CI pipeline, you should make a new commit to the GitLab repository.\nAfter you have made a new commit to the repository, navigate to Your Project -&gt; Build -&gt; Pipelines to check the status of CI/CD pipelines connected to your repository. If you find a green message that says ‚Äúpassed‚Äù with a check mark then congratulations, your pipeline works! If you see a red message that says ‚Äúfailed‚Äù, check to see the error message associated with it - sometimes you need to reconfigure your .gitlab-ci.yml file to make sure it uses the correct formatting and defines the tests appropriately.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Continuous Integration with GitLab"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_intro.html",
    "href": "docs/infrastructure/gitlab/gitlab_intro.html",
    "title": "TU Delft GitLab",
    "section": "",
    "text": "Imagine the following: you are working with a group on a research software code base. At this point your codebase might be quite large, dozens of scripts, and it has a good amount of dependencies. Furthermore, other researchers depend on your code to work properly for their own research. When your code becomes more relevant to yourself and your community, you will feel the urge to have more control on the quality of contributions. You would like to be able to easily upgrade and maintain the code, but also automate the process of packaging and publishing your code, instead of doing it manually everytime.\nThe TU Delft offers a local instance of GitLab at gitlab.tudelft.nl. GitLab is an online Git repository management tool with a wiki, issue tracker, Continuous Integration and Continuous Deployment built-in. The service is intended for researchers. Similar services are, for example, GitHub.com or GitLab.com. In contrast to these services, GitLab TU Delft is hosted by the TU Delft itself, on campus. For more information, please consult the documentation.\n\n\nThe current instance of the TU Delft GitLab has a few limitations:\n\nHosting a website through pages is currently deactivated\nContinuous integration is not available by default. See our guide on setting this up.\nContainer registry has been disabled\n‚Ä¶\n\nThe free edition of GitLab has the following limitations:\n\nWiki is not available in a private repository\n‚Ä¶",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/gitlab_intro.html#github-or-tu-delft-gitlab",
    "href": "docs/infrastructure/gitlab/gitlab_intro.html#github-or-tu-delft-gitlab",
    "title": "TU Delft GitLab",
    "section": "",
    "text": "The current instance of the TU Delft GitLab has a few limitations:\n\nHosting a website through pages is currently deactivated\nContinuous integration is not available by default. See our guide on setting this up.\nContainer registry has been disabled\n‚Ä¶\n\nThe free edition of GitLab has the following limitations:\n\nWiki is not available in a private repository\n‚Ä¶",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/runner_matlab.html",
    "href": "docs/infrastructure/gitlab/runner_matlab.html",
    "title": "Setting up a Gitlab runner for MATLAB",
    "section": "",
    "text": "With the continuous method of software development, you continuously build, test, and deploy iterative code changes. This iterative process helps reduce the chance that you develop new code based on buggy or failed previous versions. With this method, you strive to have less human intervention or even no intervention at all, from the development of new code until its deployment.\n\n\nWith this guide, you will create a Continuous Integration Pipeline on a repository within the TU Delft Gitlab to use a Matlab environment.\n\n\n\n\n\nTU Delft netID\nMATLAB account\nBasic knowledge of Linux (for setting up a server)\nBasic knowledge of Docker (for creating a custom MATLAB image)\n\n\n\n\n\n\n\nTip\n\n\n\nTo learn more about Docker containers, please look at the Reproducible Computational Environments Using Docker lesson from the Software Carpentries.\n\n\n\n\n\nCI/CD pipeline\nA CI/CD pipeline automates your software delivery process. The pipeline builds code, runs tests (Continuous Intergation), and safely deploys a new version of the application (Continuous Delivery). See this introduction.\nDocker\nWe use a Docker container to run the Gitlab runner and initialise the CI/CD pipeline.\nGitlab runner (from GitLab documentation)\nRunners are the agents that run the CI/CD jobs that come from GitLab. When you register a runner, you are setting up communication between your GitLab instance and the machine where GitLab Runner is installed. Runners usually process jobs on the same machine where you installed GitLab Runner.\nGitlab jobs\nPipeline configuration begins with jobs. Jobs are the most fundamental element of a .gitlab-ci.yml file. Each job is executed by a Gitlab runner. See Gitlab documentation for more info.\n\n\n\n\nRequest a TU Delft Virtual Private Server\nSet up a Gitlab runner\nCreate a Docker image with a custom Matlab installation\nRegister a gitlab runner for the Matlab container\nObtain a Matlab license file\nConfigure the CI/CD pipeline\nAdd a job to test the pipeline\nOptional: Updating the Matlab version\n\n\n\nIf you want to work with the TU Delft Gitlab instance and you want to implement CI/CD pipelines, then you need to install a Gitlab runner on your own. Runners are the agents that run the CI/CD jobs that come from GitLab. Currently, the TU Delft instance does not provide this feature out-of-the-box. Therefore, we need a separate (virtual) server to run the Gitlab runners and execute the jobs in the CI/CD pipeline.\nThe TU Delft offers Virtual Private Servers (VPS) for researchers through the TopDesk selfservice portal. If you don‚Äôt have a VPS already, please follow this guide to request a Virtual Private Server)\nVPS requirements\n\n50Gb disk space (the Matlab installation in this guide requires ~10 Gb, but this depends on the size of the installed addons)\n\n\n\n\nTo set up a gitlab runner on the VPS, please follow this guide for setting up GitLab runners.\nTLDR\n\nInstall docker with\nsudo apt install docker.io\nVerify installation with\nsudo docker --version\nOptional: Move default storage location to larger drive\nIf the file space in the Docker Root directory is not adequate, we must relocate the Docker Root. Please consult this guide for instructions.\nDeploy the gitlab-runner with\ndocker run -d --name gitlab-runner --restart always \\\n-v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\ngitlab/gitlab-runner:latest\nVerify deployment with\nsudo docker ps -a\n\n\n\n\nIn order for a Gitlab runner to execute MATLAB code, it needs to be able to access a container with MATLAB installed. The aim of this step is to create a Docker image with MATLAB installation that can be used by a Gitlab runner. By building our own Docker image, we can specify the MATLAB version and customize the installed toolboxes.\n\n\n\n\n\n\nNote\n\n\n\nWe have looked into using the Docker images developed by Mathworks. When running these images, you are prompted to supply your MATLAB‚Äôs account username and password to activate the instance. Although it is possible to create a new image from such an activated container and use it on the VPS, we have so far not been able to get this solution working with Gitlab runners. We thus rely on downloading a license file (step 6) and storing it as a Variable on Gitlab (step 7).\n\n\nThis Dockerfile is based on MATLAB‚Äôs Dockerfile template. We will make the following modifications to this template:\n\nset bash as the default run command (Gitlab runners need to access a shell)\nadd additional MATLAB products with the flag --products. In this example, we have added the Parallel Computing Toolbox and the Mapping Toolbox.\n\nIn your user folder on the VPS (/home/username), create a file called Dockerfile\nsudo nano Dockerfile\nand copy the content below in the Dockerfile. Make sure to update the MATLAB release and installed addons to your requirements (see in bold).\n\n\n\n\n\n\n# Copyright 2019 - 2021 The MathWorks, Inc.\n\n# To specify which MATLAB release to install in the container, edit the value of the MATLAB_RELEASE argument.\n# Use lower case to specify the release, for example: ARG MATLAB_RELEASE=r2020a\nARG MATLAB_RELEASE=r2021b\n\n# When you start the build stage, this Dockerfile by default uses the Ubuntu-based matlab-deps image.\n# To check the available matlab-deps images, see: https://hub.docker.com/r/mathworks/matlab-deps\nFROM mathworks/matlab-deps:${MATLAB_RELEASE}\n\n# Declare the global argument to use at the current build stage\nARG MATLAB_RELEASE\n\n# Install mpm dependencies\nRUN export DEBIAN_FRONTEND=noninteractive && apt-get update && \\\n    apt-get install --no-install-recommends --yes \\\n    wget \\\n    unzip \\\n    ca-certificates && \\\n    apt-get clean && apt-get autoremove\n\n# Run mpm to install MATLAB in the target location and delete the mpm installation afterwards\nRUN wget -q https://www.mathworks.com/mpm/glnxa64/mpm && \\ \n    chmod +x mpm && \\\n    ./mpm install \\\n    --release=${MATLAB_RELEASE} \\\n    --destination=/opt/matlab \\\n    --products MATLAB Parallel_Computing_Toolbox Mapping_Toolbox && \\\n    rm -f mpm /tmp/mathworks_root.log && \\\n    ln -s /opt/matlab/bin/matlab /usr/local/bin/matlab\n\n# Add \"matlab\" user and grant sudo permission.\nRUN adduser --shell /bin/bash --disabled-password --gecos \"\" matlab && \\\n    echo \"matlab ALL=(ALL) NOPASSWD: ALL\" &gt; /etc/sudoers.d/matlab && \\\n    chmod 0440 /etc/sudoers.d/matlab\n\n# Set user and work directory\nUSER matlab\nWORKDIR /home/matlab\nCMD [\"bash\"]\n\n\n\n\nTo build a Docker image with the name matlab-gitlab and the version reference r2021b, run the following command in the folder containing the Dockerfile:\nsudo docker build . -t matlab-gitlab:r2021b\nYou can verify the presence of the image with\nsudo docker images\nThis image is now available locally on the VPS.\n\n\n\n\n\n\nTip\n\n\n\nYou can also upload your Docker image to Dockerhub and have it available from there. This removes the need to build the image on the VPS as it can be pulled directly from DockerHub.\n\n\n\n\n\nAfter deploying the gitlab-runner in step 2, we need to register a new runner for our matlab-gitlab image. Run the following command to register your runner and configure it to deploy in a Docker container on your server.\ndocker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register\nIn response to this command you will be prompted to answer a series of questions. You can find the required gitlab-ci token in your Gitlab repository under Settings -&gt; CI/CD -&gt; Runners:\nsudo docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register \\\n  --non-interactive \\\n  --url \"https://gitlab.tudelft.nl/\" \\\n  --registration-token \"REPOSITORY_TOKEN\" \\\n  --executor \"docker\" \\\n  --docker-image matlab-gitlab:r2021b \\\n  --description \"matlab-runner\" \\\n  --tag-list \"matlab\" \\\n  --docker-privileged=true \\\n  --docker-cap-add \"NET_ADMIN\" \\\n  --docker-pull-policy \"if-not-present\" \\\nFor the changes to take effect, restart the gitlab-runner with\nsudo docker restart gitlab-runner\nThe runner configurations are stored in /srv/gitlab-runner/config/config.toml. If you would like to view or or modify the MATLAB runner, run\nsudo nano /srv/gitlab-runner/config/config.toml\nAfter registering the runner, the configuration file should contain:\n\n\n\n\n\n\nNote\n\n\n\n\n\nconcurrent = 4\ncheck_interval = 0\n\n[session_server]\n  session_timeout = 1800\n\n[[runners]]\n  name = \"matlab-gitlab\"\n  url = \"https://gitlab.tudelft.nl\"\n  token = \"&lt;token&gt;\"\n  executor = \"docker\"\n  [runners.custom_build_dir]\n  [runners.cache]\n    [runners.cache.s3]\n    [runners.cache.gcs]\n    [runners.cache.azure]\n  [runners.docker]\n    tls_verify = false\n    image = \"matlab-gitlab:r2021b\"\n    privileged = true\n    disable_entrypoint_overwrite = false\n    cap_add = [\"NET_ADMIN\"]\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [\"/cache\"]\n    pull_policy = \"if-not-present\"\n    shm_size = 0\n\n\n\n\n\n\nEvery TU Delft employee has access to an Individual MATLAB license. Normally, you would activate MATLAB only once after installation through an online activation step. However, this does not work for a Docker container as it is relaunched for each CI trigger.\nThe following steps for activating MATLAB on an offline machine are adapted from the MATLAB Forum:\n\nObtain your Host ID\nObtain your computer login name or username\nActivate the license through the License Center to obtain license file\n\n1. Obtain your Host ID\nThe MATLAB license can only be activated for a specifc computer. In the Docker container, we will set the hostID of the container to 0242ac11ffff.\n\n\n\n\n\n\nNote\n\n\n\nDocker automatically assigns an IP address to each running container, starting from 172.17.0.2 until 172.17.0.255. These IP addresses determine the container‚Äôs MAC address (see here for more details), which in turn needs to match with our license. To prevent the MAC address of the MATLAB container from switching and thereby invalidating the license, we will set it to 02:42:ac:11:ff:ff in the .gitlab-ci.yml file.\n\n\n2. Obtain your computer login name or username\nThe MATLAB license is created for a specific user. In the Docker container, we will set the username to matlab.\n3. Activate the license through the License Center to obtain license file\n\nGo to the License Center: https://www.mathworks.com/mwaccount\nUnder My Software, click the license number you want to activate. If you do not see your license number, in the bottom right hand corner, click View Additional Licenses or Trials.\nClick the Install and Activate tab\nClick Activate to Retrieve License File and/or Activate a Computer\nEnter the following information:\n\nthe release you are activating = r2021b (same version as in the Dockerfile)\nthe operating system = Linux\nthe host ID = 0242ac11ffff\nyour user or login name = matlab\nthe Activation Label = matlab-gitlab\n\n\nDownload the license.lic file\n\n\n\n\nBefore we can run a CI job, we need to configure a few settings in our Gitlab repository\n1. Add tag to MATLAB runner\nUnder Settings -&gt; CI/CD -&gt; Runners we can find the available specific runners. Press the edit button on the matlab-gitlab runner and add the tag matlab-gitlab. With this, we can call more easily call this specific runner within our CI pipeline.\n2. Add license as Variable\nUnder Settings -&gt; CI/CD -&gt; Variables add a new variable called MATLAB_LICENSE, past the content of the downloaded license.lic file and set type to file. Having the license available as a Gitlab variable allows us to update it without having to change the MATLAB image.\n\n\n\n\n\n\nNote\n\n\n\nAlternatively, we could have added the license file directly to the Docker image. With the license file in the same folder as the Dockerfile and adding the following command to the Dockerfile, we can build a Docker image with an activated MATLAB:\nCOPY license.lic /opt/matlab/licenses/\nHere, we opted to have it accessible through the Gitlab settings together with the accompanying hostid.\n\n\n\n\n\n\nWarning\n\n\n\nNever share any Docker images that contain license files or other confidential information.\n\n\n\n\n\n\n\nTo test the pipeline, add the following content to .gitlab-ci.yml via CI/CD -&gt; Editor in your repository.\nvariables:\n  MAC_ADDRESS: 02:42:ac:11:ff:ff\n\ncheck_matlab:\n  tags: \n    - matlab-gitlab\n  before_script:\n    # Change the mac-address to match the MATLAB license\n    - sudo ifconfig eth0 hw ether \"$MAC_ADDRESS\"\n\n    # Add the Matlab license to the Matlab installation in the container\n    - sudo mkdir /opt/matlab/licenses\n    - sudo mv ${MATLAB_LICENSE} /opt/matlab/licenses/license.lic   \n  script:    \n    # Run a MATLAB function/script through the -batch argument\n    - matlab -batch \"disp('hello world!')\"\nAfter commiting, the pipeline should run and execute the job check_matlab. You can check the status of the pipeline via CI/CD -&gt; Pipelines.\nIf all went well, you have successfully setup a Gitlab runner to run MATLAB code. Congrats!\n\n\n\nIf you need to update the MATLAB version of the Docker container, you will need to go throught the following steps:\n\nUpdate the MATLAB version in the Dockerfile\nBuild the docker image with sudo docker build . -t matlab-gitlab:&lt;version&gt;\nDownload a new license.lic file (see step 5 of this guide)\nUpdate the CI Variable MATLAB_LICENSE with the new license content\nUpdate the image names (not the tags) in .gitlab-ci.yml to use the new image.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to test your code with multiple MATLAB versions to ensure backward compatibility, please look at this example to use multiple docker images.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Setting up a Gitlab runner for MATLAB"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/runner_matlab.html#background",
    "href": "docs/infrastructure/gitlab/runner_matlab.html#background",
    "title": "Setting up a Gitlab runner for MATLAB",
    "section": "",
    "text": "With the continuous method of software development, you continuously build, test, and deploy iterative code changes. This iterative process helps reduce the chance that you develop new code based on buggy or failed previous versions. With this method, you strive to have less human intervention or even no intervention at all, from the development of new code until its deployment.\n\n\nWith this guide, you will create a Continuous Integration Pipeline on a repository within the TU Delft Gitlab to use a Matlab environment.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Setting up a Gitlab runner for MATLAB"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/runner_matlab.html#prerequisites",
    "href": "docs/infrastructure/gitlab/runner_matlab.html#prerequisites",
    "title": "Setting up a Gitlab runner for MATLAB",
    "section": "",
    "text": "TU Delft netID\nMATLAB account\nBasic knowledge of Linux (for setting up a server)\nBasic knowledge of Docker (for creating a custom MATLAB image)\n\n\n\n\n\n\n\nTip\n\n\n\nTo learn more about Docker containers, please look at the Reproducible Computational Environments Using Docker lesson from the Software Carpentries.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Setting up a Gitlab runner for MATLAB"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/runner_matlab.html#glossary-of-terms",
    "href": "docs/infrastructure/gitlab/runner_matlab.html#glossary-of-terms",
    "title": "Setting up a Gitlab runner for MATLAB",
    "section": "",
    "text": "CI/CD pipeline\nA CI/CD pipeline automates your software delivery process. The pipeline builds code, runs tests (Continuous Intergation), and safely deploys a new version of the application (Continuous Delivery). See this introduction.\nDocker\nWe use a Docker container to run the Gitlab runner and initialise the CI/CD pipeline.\nGitlab runner (from GitLab documentation)\nRunners are the agents that run the CI/CD jobs that come from GitLab. When you register a runner, you are setting up communication between your GitLab instance and the machine where GitLab Runner is installed. Runners usually process jobs on the same machine where you installed GitLab Runner.\nGitlab jobs\nPipeline configuration begins with jobs. Jobs are the most fundamental element of a .gitlab-ci.yml file. Each job is executed by a Gitlab runner. See Gitlab documentation for more info.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Setting up a Gitlab runner for MATLAB"
    ]
  },
  {
    "objectID": "docs/infrastructure/gitlab/runner_matlab.html#steps",
    "href": "docs/infrastructure/gitlab/runner_matlab.html#steps",
    "title": "Setting up a Gitlab runner for MATLAB",
    "section": "",
    "text": "Request a TU Delft Virtual Private Server\nSet up a Gitlab runner\nCreate a Docker image with a custom Matlab installation\nRegister a gitlab runner for the Matlab container\nObtain a Matlab license file\nConfigure the CI/CD pipeline\nAdd a job to test the pipeline\nOptional: Updating the Matlab version\n\n\n\nIf you want to work with the TU Delft Gitlab instance and you want to implement CI/CD pipelines, then you need to install a Gitlab runner on your own. Runners are the agents that run the CI/CD jobs that come from GitLab. Currently, the TU Delft instance does not provide this feature out-of-the-box. Therefore, we need a separate (virtual) server to run the Gitlab runners and execute the jobs in the CI/CD pipeline.\nThe TU Delft offers Virtual Private Servers (VPS) for researchers through the TopDesk selfservice portal. If you don‚Äôt have a VPS already, please follow this guide to request a Virtual Private Server)\nVPS requirements\n\n50Gb disk space (the Matlab installation in this guide requires ~10 Gb, but this depends on the size of the installed addons)\n\n\n\n\nTo set up a gitlab runner on the VPS, please follow this guide for setting up GitLab runners.\nTLDR\n\nInstall docker with\nsudo apt install docker.io\nVerify installation with\nsudo docker --version\nOptional: Move default storage location to larger drive\nIf the file space in the Docker Root directory is not adequate, we must relocate the Docker Root. Please consult this guide for instructions.\nDeploy the gitlab-runner with\ndocker run -d --name gitlab-runner --restart always \\\n-v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\ngitlab/gitlab-runner:latest\nVerify deployment with\nsudo docker ps -a\n\n\n\n\nIn order for a Gitlab runner to execute MATLAB code, it needs to be able to access a container with MATLAB installed. The aim of this step is to create a Docker image with MATLAB installation that can be used by a Gitlab runner. By building our own Docker image, we can specify the MATLAB version and customize the installed toolboxes.\n\n\n\n\n\n\nNote\n\n\n\nWe have looked into using the Docker images developed by Mathworks. When running these images, you are prompted to supply your MATLAB‚Äôs account username and password to activate the instance. Although it is possible to create a new image from such an activated container and use it on the VPS, we have so far not been able to get this solution working with Gitlab runners. We thus rely on downloading a license file (step 6) and storing it as a Variable on Gitlab (step 7).\n\n\nThis Dockerfile is based on MATLAB‚Äôs Dockerfile template. We will make the following modifications to this template:\n\nset bash as the default run command (Gitlab runners need to access a shell)\nadd additional MATLAB products with the flag --products. In this example, we have added the Parallel Computing Toolbox and the Mapping Toolbox.\n\nIn your user folder on the VPS (/home/username), create a file called Dockerfile\nsudo nano Dockerfile\nand copy the content below in the Dockerfile. Make sure to update the MATLAB release and installed addons to your requirements (see in bold).\n\n\n\n\n\n\n# Copyright 2019 - 2021 The MathWorks, Inc.\n\n# To specify which MATLAB release to install in the container, edit the value of the MATLAB_RELEASE argument.\n# Use lower case to specify the release, for example: ARG MATLAB_RELEASE=r2020a\nARG MATLAB_RELEASE=r2021b\n\n# When you start the build stage, this Dockerfile by default uses the Ubuntu-based matlab-deps image.\n# To check the available matlab-deps images, see: https://hub.docker.com/r/mathworks/matlab-deps\nFROM mathworks/matlab-deps:${MATLAB_RELEASE}\n\n# Declare the global argument to use at the current build stage\nARG MATLAB_RELEASE\n\n# Install mpm dependencies\nRUN export DEBIAN_FRONTEND=noninteractive && apt-get update && \\\n    apt-get install --no-install-recommends --yes \\\n    wget \\\n    unzip \\\n    ca-certificates && \\\n    apt-get clean && apt-get autoremove\n\n# Run mpm to install MATLAB in the target location and delete the mpm installation afterwards\nRUN wget -q https://www.mathworks.com/mpm/glnxa64/mpm && \\ \n    chmod +x mpm && \\\n    ./mpm install \\\n    --release=${MATLAB_RELEASE} \\\n    --destination=/opt/matlab \\\n    --products MATLAB Parallel_Computing_Toolbox Mapping_Toolbox && \\\n    rm -f mpm /tmp/mathworks_root.log && \\\n    ln -s /opt/matlab/bin/matlab /usr/local/bin/matlab\n\n# Add \"matlab\" user and grant sudo permission.\nRUN adduser --shell /bin/bash --disabled-password --gecos \"\" matlab && \\\n    echo \"matlab ALL=(ALL) NOPASSWD: ALL\" &gt; /etc/sudoers.d/matlab && \\\n    chmod 0440 /etc/sudoers.d/matlab\n\n# Set user and work directory\nUSER matlab\nWORKDIR /home/matlab\nCMD [\"bash\"]\n\n\n\n\nTo build a Docker image with the name matlab-gitlab and the version reference r2021b, run the following command in the folder containing the Dockerfile:\nsudo docker build . -t matlab-gitlab:r2021b\nYou can verify the presence of the image with\nsudo docker images\nThis image is now available locally on the VPS.\n\n\n\n\n\n\nTip\n\n\n\nYou can also upload your Docker image to Dockerhub and have it available from there. This removes the need to build the image on the VPS as it can be pulled directly from DockerHub.\n\n\n\n\n\nAfter deploying the gitlab-runner in step 2, we need to register a new runner for our matlab-gitlab image. Run the following command to register your runner and configure it to deploy in a Docker container on your server.\ndocker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register\nIn response to this command you will be prompted to answer a series of questions. You can find the required gitlab-ci token in your Gitlab repository under Settings -&gt; CI/CD -&gt; Runners:\nsudo docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register \\\n  --non-interactive \\\n  --url \"https://gitlab.tudelft.nl/\" \\\n  --registration-token \"REPOSITORY_TOKEN\" \\\n  --executor \"docker\" \\\n  --docker-image matlab-gitlab:r2021b \\\n  --description \"matlab-runner\" \\\n  --tag-list \"matlab\" \\\n  --docker-privileged=true \\\n  --docker-cap-add \"NET_ADMIN\" \\\n  --docker-pull-policy \"if-not-present\" \\\nFor the changes to take effect, restart the gitlab-runner with\nsudo docker restart gitlab-runner\nThe runner configurations are stored in /srv/gitlab-runner/config/config.toml. If you would like to view or or modify the MATLAB runner, run\nsudo nano /srv/gitlab-runner/config/config.toml\nAfter registering the runner, the configuration file should contain:\n\n\n\n\n\n\nNote\n\n\n\n\n\nconcurrent = 4\ncheck_interval = 0\n\n[session_server]\n  session_timeout = 1800\n\n[[runners]]\n  name = \"matlab-gitlab\"\n  url = \"https://gitlab.tudelft.nl\"\n  token = \"&lt;token&gt;\"\n  executor = \"docker\"\n  [runners.custom_build_dir]\n  [runners.cache]\n    [runners.cache.s3]\n    [runners.cache.gcs]\n    [runners.cache.azure]\n  [runners.docker]\n    tls_verify = false\n    image = \"matlab-gitlab:r2021b\"\n    privileged = true\n    disable_entrypoint_overwrite = false\n    cap_add = [\"NET_ADMIN\"]\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [\"/cache\"]\n    pull_policy = \"if-not-present\"\n    shm_size = 0\n\n\n\n\n\n\nEvery TU Delft employee has access to an Individual MATLAB license. Normally, you would activate MATLAB only once after installation through an online activation step. However, this does not work for a Docker container as it is relaunched for each CI trigger.\nThe following steps for activating MATLAB on an offline machine are adapted from the MATLAB Forum:\n\nObtain your Host ID\nObtain your computer login name or username\nActivate the license through the License Center to obtain license file\n\n1. Obtain your Host ID\nThe MATLAB license can only be activated for a specifc computer. In the Docker container, we will set the hostID of the container to 0242ac11ffff.\n\n\n\n\n\n\nNote\n\n\n\nDocker automatically assigns an IP address to each running container, starting from 172.17.0.2 until 172.17.0.255. These IP addresses determine the container‚Äôs MAC address (see here for more details), which in turn needs to match with our license. To prevent the MAC address of the MATLAB container from switching and thereby invalidating the license, we will set it to 02:42:ac:11:ff:ff in the .gitlab-ci.yml file.\n\n\n2. Obtain your computer login name or username\nThe MATLAB license is created for a specific user. In the Docker container, we will set the username to matlab.\n3. Activate the license through the License Center to obtain license file\n\nGo to the License Center: https://www.mathworks.com/mwaccount\nUnder My Software, click the license number you want to activate. If you do not see your license number, in the bottom right hand corner, click View Additional Licenses or Trials.\nClick the Install and Activate tab\nClick Activate to Retrieve License File and/or Activate a Computer\nEnter the following information:\n\nthe release you are activating = r2021b (same version as in the Dockerfile)\nthe operating system = Linux\nthe host ID = 0242ac11ffff\nyour user or login name = matlab\nthe Activation Label = matlab-gitlab\n\n\nDownload the license.lic file\n\n\n\n\nBefore we can run a CI job, we need to configure a few settings in our Gitlab repository\n1. Add tag to MATLAB runner\nUnder Settings -&gt; CI/CD -&gt; Runners we can find the available specific runners. Press the edit button on the matlab-gitlab runner and add the tag matlab-gitlab. With this, we can call more easily call this specific runner within our CI pipeline.\n2. Add license as Variable\nUnder Settings -&gt; CI/CD -&gt; Variables add a new variable called MATLAB_LICENSE, past the content of the downloaded license.lic file and set type to file. Having the license available as a Gitlab variable allows us to update it without having to change the MATLAB image.\n\n\n\n\n\n\nNote\n\n\n\nAlternatively, we could have added the license file directly to the Docker image. With the license file in the same folder as the Dockerfile and adding the following command to the Dockerfile, we can build a Docker image with an activated MATLAB:\nCOPY license.lic /opt/matlab/licenses/\nHere, we opted to have it accessible through the Gitlab settings together with the accompanying hostid.\n\n\n\n\n\n\nWarning\n\n\n\nNever share any Docker images that contain license files or other confidential information.\n\n\n\n\n\n\n\nTo test the pipeline, add the following content to .gitlab-ci.yml via CI/CD -&gt; Editor in your repository.\nvariables:\n  MAC_ADDRESS: 02:42:ac:11:ff:ff\n\ncheck_matlab:\n  tags: \n    - matlab-gitlab\n  before_script:\n    # Change the mac-address to match the MATLAB license\n    - sudo ifconfig eth0 hw ether \"$MAC_ADDRESS\"\n\n    # Add the Matlab license to the Matlab installation in the container\n    - sudo mkdir /opt/matlab/licenses\n    - sudo mv ${MATLAB_LICENSE} /opt/matlab/licenses/license.lic   \n  script:    \n    # Run a MATLAB function/script through the -batch argument\n    - matlab -batch \"disp('hello world!')\"\nAfter commiting, the pipeline should run and execute the job check_matlab. You can check the status of the pipeline via CI/CD -&gt; Pipelines.\nIf all went well, you have successfully setup a Gitlab runner to run MATLAB code. Congrats!\n\n\n\nIf you need to update the MATLAB version of the Docker container, you will need to go throught the following steps:\n\nUpdate the MATLAB version in the Dockerfile\nBuild the docker image with sudo docker build . -t matlab-gitlab:&lt;version&gt;\nDownload a new license.lic file (see step 5 of this guide)\nUpdate the CI Variable MATLAB_LICENSE with the new license content\nUpdate the image names (not the tags) in .gitlab-ci.yml to use the new image.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to test your code with multiple MATLAB versions to ensure backward compatibility, please look at this example to use multiple docker images.",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "TU Delft GitLab",
      "Setting up a Gitlab runner for MATLAB"
    ]
  },
  {
    "objectID": "docs/infrastructure/intro_servers.html",
    "href": "docs/infrastructure/intro_servers.html",
    "title": "Remote servers",
    "section": "",
    "text": "Remote servers\nTU Delf offers employees the use of Faculty Managed Servers. The only condition is that it is not possible to use these servers to set up services that are already provided by the basic services of SSC ICT. All Faculty Managed Servers available as standard are virtual.\nHosting Faculty Managed Servers includes:\n\nICT provides the server, operating service (Windows, Linux (Redhat Enterprise Linux (preferred), Ubuntu (LTS) and CentOS)) and network access.\nThe user manages the server and can install whatever he wants within the given conditions (see form ‚Ä¶) and is therefore provided with admin rights.\nICT provides backup, restore and virus scanning (Windows).\nICT ensures that the Operating System (OS) of the Server (e.g.¬†security patches) is up to date except for Linux.\nUser has the freedom to concentrate on his own applications that are needed for research.\n\nSome use cases and examples\n\nYou might want to run an instance of a service. For example an ftp-server or a PostgreSQL database for your lab or research group, others.\nYou want to setup a server to host a static website or web application.\nYou need a server to execute Gitlab-runners\n\nGeneral required skills\n\nWorking with the command line, shell scripting and linux\nWorking remotely and securely using ssh\nTransfer files from one computer to another\nWorking with containers",
    "crumbs": [
      "Guides",
      "‚öôÔ∏è **Computing Infrastructure**",
      "Remote servers"
    ]
  },
  {
    "objectID": "docs/listing.html",
    "href": "docs/listing.html",
    "title": "References",
    "section": "",
    "text": "Branch management\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFAIR Software\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFAIR assessment cards\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFAIR checklist for research software\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGetting started\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSoftware management plan\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSoftware testing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTesting with MATLAB\n\n\n\ntesting\n\n\nmatlab\n\n\n\nWriting and running tests with MATLAB.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing a docker container with a GUI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion control with Git\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorking with containers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "docs/resources/curriculum.html",
    "href": "docs/resources/curriculum.html",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "These materials represent a curated curriculum designed to help you develop and maintain your repository and code base. All of the resources listed below are free to access and use, and supplementary material like video lessons has been added where possible and relevant.\n\n\n\nWhat is Bash? - of all the shells available, Bash is one of the most popular, the most powerful, and the most friendly\nBash Essentials ‚Äì Bash commands commonly used to navigate file directories in your Terminal/GitBash\nThe Unix Shell lesson from Software Carpentries - use of the shell is fundamental to using a wide range of other powerful tools and computing resources. These lessons will start you on a path towards using these resources effectively\nInstallation Instructions - particularly important for Windows users, as Bash comes pre-installed on Mac. Windows users will need to install GitBash following the instructions at this link\nUsing the Terminal in Mac - The Terminal app allows you to control your Mac using a command prompt\n\n\n\n\n\nWhat is Git?- 2-minute video overview of the technology and how it works\nInstall Git from GitHub Guides - Check if Git is already installed on your machine; if not, follow these instructions to get started. Notes: If you‚Äôve already installed GitBash on Windows OS, you will have Git already. Installing GitHub Desktop will also install the latest version of Git if you don‚Äôt already have it.\nInstalling Git from Software Carpentries - Alternative installation instructions from Software Carpentries, including videos and details per OS.\nIntro to version control with Git from Code Refinery ‚Äì self-paced introductory lesson to version control using Git\nGit Intro video lesson from Code Refinery - Day 1 - Recorded lesson from a May 2021 Code Refinery workshop on material in Intro to version control with Git, part 1/2\nGit Intro video lesson from Code Refinery - Day 2 - Recorded lesson from a May 2021 Code Refinery workshop on material in Intro to version control with Git, part 2/2\nBranching and merging ‚Äì lesson from Code Refinery on concept of branching in Git (featuring octopus diagram)\nWhat is .gitignore? ‚Äì introduction to how and why to use the .gitignore file to not track some files in a project folder (e.g., because of their size or sensitivity)\nGit command cheat sheet ‚Äì commonly used Git commands in one page that can also be downloaded\n\n\n\n\n\nUnderstanding the GitHub flow ‚Äì guide from GitHub on how and why to work with branches\nCollaborative distributed version control - We have learned how to make a git repository for a single person. What about sharing?\nSSH connection to GitHub ‚Äì instructions to set up SSH connection to GitHub so that you do not need to input your login credentials with every push/pull\nGitlab and SSH keys - instructions to add an SSH key to your (TU Delft) GitLab account for the same reason as above\nGitHub without the Command Line from Code Refinery - practice collaborating and sharing using either the GitHub website or GitHub desktop application\nGitHub Guides: Mastering Markdown - Markdown is a lightweight and easy-to-use syntax for styling all forms of writing on the GitHub platform.\n\n\n\n\n\nIntroduction to Jupyter and JupyterLab - lesson material on the user interface of JupyterLab, how Jupyter notebooks work, and what some common and powerful usecases are\n\n\n\n\n\nAnaconda Installation Guide from Software Carpentries - Although one can install a plain-vanilla Python and all required libraries by hand, we recommend installing Anaconda, a Python distribution that comes with the latest version of Python and Jupyter Notebooks by default\nIntro to Anaconda Navigator - Anaconda Navigator is a graphical user interface to the conda package and environment manager. This 10-minute guide to Navigator will have you navigating the powerful conda program in a web-like interface without having to learn command line commands\nIntroduction to Conda for (Data) Scientists - Conda is an open source package and environment management system that easily creates, saves, loads, and switches between environments on your local computer\nManaging Conda environments - documentation on performing a range of common tasks with Conda using the command line\n\n\n\n\n\nScientific Computing with Python - a free video course series that teaches the basics of using Python 3\nApplied Data Science with Python Specialization - Coursera course in which you can enroll for free\nLearnPython.org - Whether you are an experienced programmer or not, this website is intended for everyone who wishes to learn the Python programming language\nProgramming with Python from Software Carpentries - this introduction to Python is built around a common scientific task: data analysis\nPlotting and Programming with Python from Software Carpentries - an introduction to programming in Python for people with little or no previous programming experience using plotting as its motivating example\nData Analysis and Visualization with Python for Social Scientists - basic information about Python syntax, the Jupyter notebook interface, how to import CSV files, using the pandas package to work with data frames, how to calculate summary information from a data frame, and a brief introduction to plotting. The last lesson demonstrates how to work with databases directly from Python\nCan You Speak Python? - test your knowledge of some important features of the Python programming language and the NumPy and Pandas libraries\n\n\n\n\n\nGetting started with Pandas - documentation and quick start guide for Pandas, an essential Python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data\nPandas Tutorial - 14-part tutorial series featuring live code examples and tests of your knowledge\nPandas Data Wrangling Cheat Sheet - to excel data analysis/data science/machine learning in Python, Pandas is a library you need to master. Here is a cheat sheet of some of the most used syntax that you probably don‚Äôt want to miss\nPandas Cheat Sheet - Visual - visual, printable 2-page reference guide on commonly performed operations using Pandas\nUltimate Pandas Guide ‚Äî Inspecting Data Like a Pro - Whether you‚Äôre working on a simple analysis or a complex machine learning model, there‚Äôs a lot of value in being able to answer quick, exploratory questions about the nature of your data. This is a walk through of several DataFrame attributes and methods that make data inspection painless and productive\n10 Efficient Ways for Inspecting a Pandas DataFrame Object - A guide to using pandas effectively and efficiently\n\n\n\n\n\nGetting Started with Plotly - The plotly Python library is an interactive, open-source plotting library that supports over 40 unique chart types covering a wide range of statistical, financial, geographic, scientific, and 3-dimensional use-cases\nPlotly Python Open Source Graphing Library - Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts\nHeatmaps with Plotly - How to make Heatmaps in Python with Plotly\n\n\n\n\n\nIpywidgets documentation - ipywidgets, also known as jupyter-widgets or simply widgets, are interactive HTML widgets for Jupyter notebooks and the IPython kernel.\nIntroduction to ipywidgets - in this tutorial video, learn about ipywidgets, a Python library for building interactive HTML widgets for your Jupyter browser.\nIpywidgets Interact Function | ipywidgets Examples of Slider, Dropdown, Checkbox, Text Box - Video demo on how to make an ipywidgets slider, ipywidgets dropdown, ipywidgets checkbox, or an ipywidgets text box using Python code.\n\n\n\n\n\nInstall R guide from Software Carpentries - R is a programming language that is especially powerful for data exploration, visualization, and statistical analysis. To interact with R, we use RStudio, which must also be installed separately from here\nProgramming with R from Software Carpentries - this introduction to R is built around a common scientific task: data analysis\nR for Reproducible Data Analysis from Software Carpentries - write modular code and best practices for using R for data analysis\nR for Social Scientists - basic information about R syntax, the RStudio interface, how to import CSV files, the structure of data frames, how to deal with factors, how to add/remove rows and columns, how to calculate summary statistics from a data frame, and a brief introduction to plotting\n\n\n\n\n\nUsing git with MATLAB - Introduction into using MATLAB and version control with git\nProgramming with MATLAB - Lesson from the Software Carpentries on the basics of programming with MATLAB\n\n\n\n\n\nWriting tests - lesson from CodeRefinery on automated testing\nVideo testing lesson - recording from software testing workshop by Code Refinery\nModular coding - slides on modular code from Code Refinery\n\n\n\n\n\nInstalling Docker - installation instructions for Windows, macOS, and Linux\nInstall WSL2 update - manual WSL2 update for Windows\nDockerfile reference - information on how to write a Dockerfile\n\n\n\n\n\nSetting up VSCode for Linux - guide to getting started using VSCode with Windows Subsystem for Linux\n\n\n\n\n\nGitHub Actions introduction course - an introductory course from GitHub on how to use GitHub Actions\n\n\n\n\n\nReproducible Research material from Code Refinery - demonstrates how version control, workflows, containers, and package managers can be used to record reproducible environments and computational steps\nReproducible Research video lesson from Code Refinery - Recorded video lesson from Code Refinery workshop in May 2021 on Reproducible Research material\nData + Code + Software = PDF - Slides to an overview on how to integrate data and software into a PDF.",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#bash",
    "href": "docs/resources/curriculum.html#bash",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "What is Bash? - of all the shells available, Bash is one of the most popular, the most powerful, and the most friendly\nBash Essentials ‚Äì Bash commands commonly used to navigate file directories in your Terminal/GitBash\nThe Unix Shell lesson from Software Carpentries - use of the shell is fundamental to using a wide range of other powerful tools and computing resources. These lessons will start you on a path towards using these resources effectively\nInstallation Instructions - particularly important for Windows users, as Bash comes pre-installed on Mac. Windows users will need to install GitBash following the instructions at this link\nUsing the Terminal in Mac - The Terminal app allows you to control your Mac using a command prompt",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#git",
    "href": "docs/resources/curriculum.html#git",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "What is Git?- 2-minute video overview of the technology and how it works\nInstall Git from GitHub Guides - Check if Git is already installed on your machine; if not, follow these instructions to get started. Notes: If you‚Äôve already installed GitBash on Windows OS, you will have Git already. Installing GitHub Desktop will also install the latest version of Git if you don‚Äôt already have it.\nInstalling Git from Software Carpentries - Alternative installation instructions from Software Carpentries, including videos and details per OS.\nIntro to version control with Git from Code Refinery ‚Äì self-paced introductory lesson to version control using Git\nGit Intro video lesson from Code Refinery - Day 1 - Recorded lesson from a May 2021 Code Refinery workshop on material in Intro to version control with Git, part 1/2\nGit Intro video lesson from Code Refinery - Day 2 - Recorded lesson from a May 2021 Code Refinery workshop on material in Intro to version control with Git, part 2/2\nBranching and merging ‚Äì lesson from Code Refinery on concept of branching in Git (featuring octopus diagram)\nWhat is .gitignore? ‚Äì introduction to how and why to use the .gitignore file to not track some files in a project folder (e.g., because of their size or sensitivity)\nGit command cheat sheet ‚Äì commonly used Git commands in one page that can also be downloaded",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#githubgitlab-remote-repositories",
    "href": "docs/resources/curriculum.html#githubgitlab-remote-repositories",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Understanding the GitHub flow ‚Äì guide from GitHub on how and why to work with branches\nCollaborative distributed version control - We have learned how to make a git repository for a single person. What about sharing?\nSSH connection to GitHub ‚Äì instructions to set up SSH connection to GitHub so that you do not need to input your login credentials with every push/pull\nGitlab and SSH keys - instructions to add an SSH key to your (TU Delft) GitLab account for the same reason as above\nGitHub without the Command Line from Code Refinery - practice collaborating and sharing using either the GitHub website or GitHub desktop application\nGitHub Guides: Mastering Markdown - Markdown is a lightweight and easy-to-use syntax for styling all forms of writing on the GitHub platform.",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#jupyter-notebooks-and-jupyterlab",
    "href": "docs/resources/curriculum.html#jupyter-notebooks-and-jupyterlab",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Introduction to Jupyter and JupyterLab - lesson material on the user interface of JupyterLab, how Jupyter notebooks work, and what some common and powerful usecases are",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#anaconda-navigator-and-managing-conda-environments",
    "href": "docs/resources/curriculum.html#anaconda-navigator-and-managing-conda-environments",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Anaconda Installation Guide from Software Carpentries - Although one can install a plain-vanilla Python and all required libraries by hand, we recommend installing Anaconda, a Python distribution that comes with the latest version of Python and Jupyter Notebooks by default\nIntro to Anaconda Navigator - Anaconda Navigator is a graphical user interface to the conda package and environment manager. This 10-minute guide to Navigator will have you navigating the powerful conda program in a web-like interface without having to learn command line commands\nIntroduction to Conda for (Data) Scientists - Conda is an open source package and environment management system that easily creates, saves, loads, and switches between environments on your local computer\nManaging Conda environments - documentation on performing a range of common tasks with Conda using the command line",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#python",
    "href": "docs/resources/curriculum.html#python",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Scientific Computing with Python - a free video course series that teaches the basics of using Python 3\nApplied Data Science with Python Specialization - Coursera course in which you can enroll for free\nLearnPython.org - Whether you are an experienced programmer or not, this website is intended for everyone who wishes to learn the Python programming language\nProgramming with Python from Software Carpentries - this introduction to Python is built around a common scientific task: data analysis\nPlotting and Programming with Python from Software Carpentries - an introduction to programming in Python for people with little or no previous programming experience using plotting as its motivating example\nData Analysis and Visualization with Python for Social Scientists - basic information about Python syntax, the Jupyter notebook interface, how to import CSV files, using the pandas package to work with data frames, how to calculate summary information from a data frame, and a brief introduction to plotting. The last lesson demonstrates how to work with databases directly from Python\nCan You Speak Python? - test your knowledge of some important features of the Python programming language and the NumPy and Pandas libraries",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#pandas",
    "href": "docs/resources/curriculum.html#pandas",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Getting started with Pandas - documentation and quick start guide for Pandas, an essential Python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data\nPandas Tutorial - 14-part tutorial series featuring live code examples and tests of your knowledge\nPandas Data Wrangling Cheat Sheet - to excel data analysis/data science/machine learning in Python, Pandas is a library you need to master. Here is a cheat sheet of some of the most used syntax that you probably don‚Äôt want to miss\nPandas Cheat Sheet - Visual - visual, printable 2-page reference guide on commonly performed operations using Pandas\nUltimate Pandas Guide ‚Äî Inspecting Data Like a Pro - Whether you‚Äôre working on a simple analysis or a complex machine learning model, there‚Äôs a lot of value in being able to answer quick, exploratory questions about the nature of your data. This is a walk through of several DataFrame attributes and methods that make data inspection painless and productive\n10 Efficient Ways for Inspecting a Pandas DataFrame Object - A guide to using pandas effectively and efficiently",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#plotly",
    "href": "docs/resources/curriculum.html#plotly",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Getting Started with Plotly - The plotly Python library is an interactive, open-source plotting library that supports over 40 unique chart types covering a wide range of statistical, financial, geographic, scientific, and 3-dimensional use-cases\nPlotly Python Open Source Graphing Library - Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts\nHeatmaps with Plotly - How to make Heatmaps in Python with Plotly",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#ipywidgets",
    "href": "docs/resources/curriculum.html#ipywidgets",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Ipywidgets documentation - ipywidgets, also known as jupyter-widgets or simply widgets, are interactive HTML widgets for Jupyter notebooks and the IPython kernel.\nIntroduction to ipywidgets - in this tutorial video, learn about ipywidgets, a Python library for building interactive HTML widgets for your Jupyter browser.\nIpywidgets Interact Function | ipywidgets Examples of Slider, Dropdown, Checkbox, Text Box - Video demo on how to make an ipywidgets slider, ipywidgets dropdown, ipywidgets checkbox, or an ipywidgets text box using Python code.",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#r",
    "href": "docs/resources/curriculum.html#r",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Install R guide from Software Carpentries - R is a programming language that is especially powerful for data exploration, visualization, and statistical analysis. To interact with R, we use RStudio, which must also be installed separately from here\nProgramming with R from Software Carpentries - this introduction to R is built around a common scientific task: data analysis\nR for Reproducible Data Analysis from Software Carpentries - write modular code and best practices for using R for data analysis\nR for Social Scientists - basic information about R syntax, the RStudio interface, how to import CSV files, the structure of data frames, how to deal with factors, how to add/remove rows and columns, how to calculate summary statistics from a data frame, and a brief introduction to plotting",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#matlab",
    "href": "docs/resources/curriculum.html#matlab",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Using git with MATLAB - Introduction into using MATLAB and version control with git\nProgramming with MATLAB - Lesson from the Software Carpentries on the basics of programming with MATLAB",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#modular-code-and-testing",
    "href": "docs/resources/curriculum.html#modular-code-and-testing",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Writing tests - lesson from CodeRefinery on automated testing\nVideo testing lesson - recording from software testing workshop by Code Refinery\nModular coding - slides on modular code from Code Refinery",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#docker",
    "href": "docs/resources/curriculum.html#docker",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Installing Docker - installation instructions for Windows, macOS, and Linux\nInstall WSL2 update - manual WSL2 update for Windows\nDockerfile reference - information on how to write a Dockerfile",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#vscode",
    "href": "docs/resources/curriculum.html#vscode",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Setting up VSCode for Linux - guide to getting started using VSCode with Windows Subsystem for Linux",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#continuous-integration",
    "href": "docs/resources/curriculum.html#continuous-integration",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "GitHub Actions introduction course - an introductory course from GitHub on how to use GitHub Actions",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/resources/curriculum.html#reproducible-research",
    "href": "docs/resources/curriculum.html#reproducible-research",
    "title": "Research Software Curriculum",
    "section": "",
    "text": "Reproducible Research material from Code Refinery - demonstrates how version control, workflows, containers, and package managers can be used to record reproducible environments and computational steps\nReproducible Research video lesson from Code Refinery - Recorded video lesson from Code Refinery workshop in May 2021 on Reproducible Research material\nData + Code + Software = PDF - Slides to an overview on how to integrate data and software into a PDF.",
    "crumbs": [
      "Guides",
      "üìñ **Resources**",
      "Research Software Curriculum"
    ]
  },
  {
    "objectID": "docs/software/checklist.html",
    "href": "docs/software/checklist.html",
    "title": "FAIR checklist for research software",
    "section": "",
    "text": "The goal of the FAIR principles is to improve research transparency, reproducibility and reusability. To achieve this, your research needs to be described through metadata, should be open for inspection, well-documented, and well structured. This ensures that it can be replicated, expanded upon, merged, reinterpreted, or reimplemented. The acronym FAIR stands for:\n\nFindable: Your research software can be easily found (i.e.¬†has rich metadata, unique identifiers).\nAccessible: Once found, it can be accessed, ideally through well-defined and open protocols.\nInteroperable: Your research is compatible with other datasets, tools, and workflows, allowing for integration and reuse across various applications and fields.\nReusable: The ultimate goal is that your research outputs can be reused in different contexts. This requires comprehensive documentation, clear licensing, and a modular structure.\n\nWhile originally targetting data management, the FAIR for Research Software (FAIR4RS) extends these principles to research software, which, unlike data, is executable and evolves over time. Ensuring the findability of software involves metadata, identifiers, and version control systems, while accessibility includes guidelines for obtaining, installing, and running the software. Interoperability involves adherence to community-driven standards or protocols, and reusability requires detailed documentation and user guides to effectively apply the software in new research projects.\n\n\n\n\n\n\nFurther reading\n\n\n\n\nFAIR Guiding Principles for scientific data management and stewardship to research software\nFAIR4RS community in Zenodo\nFAIR Software Checklist - five recommendations for FAIR (scientific) software\n\n\n\n\n\n\n\n\n\n\n\nVersion control\n\n\n\nEssential\n\nUse git as a version control system\nUpload your project on GitHub or TU Delft GitLab\n\nRecommended\n\nMake your repository public\nConsider your branch hygiene\nUse a branching model (e.g.¬†GitFlow)\nUse meaningful commit messages\n\n\n\n\n\n\n\n\n\nCollaboration\n\n\n\nEssential\n\nMake use of GitHub issues\n\nRecommended\n\nContribution guidelines\nCode of conduct\n\n\n\n\n\n\n\n\n\nProject documentation\n\n\n\nEssential\n\nREADME\nApply a TU Delft pre-approved LICENSE\nCITATION\n\n\n\n\n\n\n\n\n\nSoftware documentation\n\n\n\nEssential\n\nSource code documentation (docstrings)\nDocument your project dependencies\nInstallation instructions\nUser documentation\n\nRecommended\n\nDeveloper documentation and setup\nExamples and tutorials (e.g.¬†Jupyter Notebooks)\n\nOptional\n\nDocumentation tools (Sphinx, JupyterBook, Quarto)\nBuild an API reference from docstrings\nHosting (GitHub Pages, Readthedocs)\n\n\n\n\n\n\n\n\n\nSoftware testing\n\n\n\nEssential\n\nInstallation/execution verification\n\nRecommended\n\nDefensive programming\nTest your software with integration tests and unit tests\nMake use of Continuous Integration to automate testing\n\nOptional\n\nCode coverage check (e.g.¬†Sonarcloud, codecov)\n\n\n\n\n\n\n\n\n\nSoftware quality\n\n\n\nEssential\n\nOrganize your project for reproducibility\nRecord and manage your software dependencies\n\nRecommended\n\nMake refactoring part of your workflow\nFollow best coding practices\n\nRecommended for Python\n\nFollow PEP8 guidelines\nUse a tool for dependency management (e.g.¬†poetry)\nUse linter (e.g.¬†pylint, flake8)\nUse a formatter (e.g.¬†black)\n\n\n\n\n\n\n\n\n\nReleases\n\n\n\nEssential\n\nObtain a DOI (Zenodo or 4TU.ResearchData)\n\nRecommended\n\nUse semantic versioning\nCreate tagged releases (GitHub)\nCHANGELOG\nUpload to registry (e.g.¬†PyPI, conda)\nReleasing guide\n\nOptional\n\nContinuous Integration for automated build and release\n\n\n\n\n\n\n\neScience Center - matchms - Matchms is an open-source Python package to import, process, clean, and compare mass spectrometry data.\nTU Delft - Transposonmapper - Transposonmapper is an open-source python package and Docker image for mapping transposons from sequencing data.\n\n\nFor more information on the principles behind FAIR software, please have a look at the following resources:\n\nThe Turing Way - Guide for Reproducible Research - general guide to reproducible research\nTowards FAIR principles for research software - publication on the translation of FAIR principles for data to FAIR principles for software\nFrom FAIR research data toward FAIR and open research software\nFAIR Principles for Research Software\n\n\n\n\n\nThe checklist was in part based on the checklist provided by the eScience Center, licensed under CC BY 4.0.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR checklist for research software"
    ]
  },
  {
    "objectID": "docs/software/checklist.html#checklist",
    "href": "docs/software/checklist.html#checklist",
    "title": "FAIR checklist for research software",
    "section": "",
    "text": "Version control\n\n\n\nEssential\n\nUse git as a version control system\nUpload your project on GitHub or TU Delft GitLab\n\nRecommended\n\nMake your repository public\nConsider your branch hygiene\nUse a branching model (e.g.¬†GitFlow)\nUse meaningful commit messages\n\n\n\n\n\n\n\n\n\nCollaboration\n\n\n\nEssential\n\nMake use of GitHub issues\n\nRecommended\n\nContribution guidelines\nCode of conduct\n\n\n\n\n\n\n\n\n\nProject documentation\n\n\n\nEssential\n\nREADME\nApply a TU Delft pre-approved LICENSE\nCITATION\n\n\n\n\n\n\n\n\n\nSoftware documentation\n\n\n\nEssential\n\nSource code documentation (docstrings)\nDocument your project dependencies\nInstallation instructions\nUser documentation\n\nRecommended\n\nDeveloper documentation and setup\nExamples and tutorials (e.g.¬†Jupyter Notebooks)\n\nOptional\n\nDocumentation tools (Sphinx, JupyterBook, Quarto)\nBuild an API reference from docstrings\nHosting (GitHub Pages, Readthedocs)\n\n\n\n\n\n\n\n\n\nSoftware testing\n\n\n\nEssential\n\nInstallation/execution verification\n\nRecommended\n\nDefensive programming\nTest your software with integration tests and unit tests\nMake use of Continuous Integration to automate testing\n\nOptional\n\nCode coverage check (e.g.¬†Sonarcloud, codecov)\n\n\n\n\n\n\n\n\n\nSoftware quality\n\n\n\nEssential\n\nOrganize your project for reproducibility\nRecord and manage your software dependencies\n\nRecommended\n\nMake refactoring part of your workflow\nFollow best coding practices\n\nRecommended for Python\n\nFollow PEP8 guidelines\nUse a tool for dependency management (e.g.¬†poetry)\nUse linter (e.g.¬†pylint, flake8)\nUse a formatter (e.g.¬†black)\n\n\n\n\n\n\n\n\n\nReleases\n\n\n\nEssential\n\nObtain a DOI (Zenodo or 4TU.ResearchData)\n\nRecommended\n\nUse semantic versioning\nCreate tagged releases (GitHub)\nCHANGELOG\nUpload to registry (e.g.¬†PyPI, conda)\nReleasing guide\n\nOptional\n\nContinuous Integration for automated build and release",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR checklist for research software"
    ]
  },
  {
    "objectID": "docs/software/checklist.html#example-repositories",
    "href": "docs/software/checklist.html#example-repositories",
    "title": "FAIR checklist for research software",
    "section": "",
    "text": "eScience Center - matchms - Matchms is an open-source Python package to import, process, clean, and compare mass spectrometry data.\nTU Delft - Transposonmapper - Transposonmapper is an open-source python package and Docker image for mapping transposons from sequencing data.\n\n\nFor more information on the principles behind FAIR software, please have a look at the following resources:\n\nThe Turing Way - Guide for Reproducible Research - general guide to reproducible research\nTowards FAIR principles for research software - publication on the translation of FAIR principles for data to FAIR principles for software\nFrom FAIR research data toward FAIR and open research software\nFAIR Principles for Research Software",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR checklist for research software"
    ]
  },
  {
    "objectID": "docs/software/checklist.html#acknowledgements",
    "href": "docs/software/checklist.html#acknowledgements",
    "title": "FAIR checklist for research software",
    "section": "",
    "text": "The checklist was in part based on the checklist provided by the eScience Center, licensed under CC BY 4.0.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "FAIR checklist for research software"
    ]
  },
  {
    "objectID": "docs/software/containers/intro.html",
    "href": "docs/software/containers/intro.html",
    "title": "Working with containers",
    "section": "",
    "text": "Working with containers\nüèóÔ∏è Under construction",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Working with containers"
    ]
  },
  {
    "objectID": "docs/software/getting_started.html",
    "href": "docs/software/getting_started.html",
    "title": "Getting started",
    "section": "",
    "text": "Getting started\nüèóÔ∏è Under construction",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Getting started"
    ]
  },
  {
    "objectID": "docs/software/git/intro.html",
    "href": "docs/software/git/intro.html",
    "title": "Version control with Git",
    "section": "",
    "text": "Version control with Git\nUsing a version control system provides better management to your code. It allows tracing back changes made, facilitates collaboration and dissemination of the code files. As using a version control system is becoming standard, some scientific journals (e.g.¬†Science and Nature) require code used for modelling or data analysis to be available in a publicly accessible repository. Git is the most popular and commonly used version control software.\nFollowing are the different ways in which you can learn version control with Git:\n\nSign up for the software carpentry workshop (free of cost) at TU Delft.\nLearn at your own pace using the publicly available training material from the Software Carpentry and Code Refinery\nUse the Repository Template to make your code more compliant with FAIR principles",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Version control with git"
    ]
  },
  {
    "objectID": "docs/software/software_management_plan.html",
    "href": "docs/software/software_management_plan.html",
    "title": "Software management plan",
    "section": "",
    "text": "Research software plays a crucial role in academic research and has become a key output of many research projects. A software management plan helps to implement best practices during software development and ensures that software is accessible and reusable in the short and longer term. It also contributes to the reproducibility of results and stimulates collaborative work on open-source software for research.\nThe Netherlands eScience Center and NWO, the Dutch Research Council, have taken the initiative to form a working group to develop (national) guidelines for software management plans. This working group ‚Äì composed of five experts in research software, representing different research organizations in the Netherlands, and roles within those organizations ‚Äì started their work in December 2021.\nThe initiative resulted in the publication of the Practical guide to Software Management Plans in October 2022. You can read more about the process leading up to the guide in this blog. The DCC is currently evaluating the adoption of these guidelines for TU Delft research software.\n\n\n\nUnderstanding the Phases of the Software Development Life Cycle\nSoftware Management from AcqNotes\nSoftware Development Plan - Template\nSoftware Sustainability Institute - Software Management Plans\nSoftware Management Plan\nSoftware Development Plan\nSoftware Architecture - Design and Evaluation\nFundamentals of Software Architecture\nFull Stack Software Design\nDLR Software Engineering Initiative\nBlog on testing for research software\nA Framework for Understanding Research Software Sustainability\n\n\n\n\nProducing Open Source Software\n\n\n\n\n\nC4 model\nC4 model video\nAdopting the C4 model",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "Software management plan"
    ]
  },
  {
    "objectID": "docs/software/software_management_plan.html#resources-for-software-development",
    "href": "docs/software/software_management_plan.html#resources-for-software-development",
    "title": "Software management plan",
    "section": "",
    "text": "Understanding the Phases of the Software Development Life Cycle\nSoftware Management from AcqNotes\nSoftware Development Plan - Template\nSoftware Sustainability Institute - Software Management Plans\nSoftware Management Plan\nSoftware Development Plan\nSoftware Architecture - Design and Evaluation\nFundamentals of Software Architecture\nFull Stack Software Design\nDLR Software Engineering Initiative\nBlog on testing for research software\nA Framework for Understanding Research Software Sustainability\n\n\n\n\nProducing Open Source Software\n\n\n\n\n\nC4 model\nC4 model video\nAdopting the C4 model",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "FAIR Software",
      "Software management plan"
    ]
  },
  {
    "objectID": "docs/software/testing_matlab.html",
    "href": "docs/software/testing_matlab.html",
    "title": "Testing with MATLAB",
    "section": "",
    "text": "In this guide, we will discuss writing and running tests with MATLAB. See the documentation from Matlab for more information.",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Software testing",
      "Testing with MATLAB"
    ]
  },
  {
    "objectID": "docs/software/testing_matlab.html#writing-tests",
    "href": "docs/software/testing_matlab.html#writing-tests",
    "title": "Testing with MATLAB",
    "section": "Writing tests",
    "text": "Writing tests\nTests should be kept separate from the code base, usually in a folder tests/. The naming convention for writing a test for a particular MATLAB script is to prefix ‚Äútest_‚Äù to the name of the script that is being tested. For example, a test for the file draw_random_number.m should be called test_draw_random_number.m. In general, Matlab will recognize any scripts that are prefixed or suffixed with the string ‚Äútest‚Äù as tests.\nYou can find an example below with the matlab syntax for writing Class-based unit tests:\n\n\n\n\n\n\nClick to view\n\n\n\n\n\n% Test classes are created by inheriting (&lt; symbol) the  Matlab Testing \n% framework.\n%\n% e.g. classdef nameOfTest &lt; matlab.unittest.TestCase\n%      end\n\nclassdef (TestTags = {'Unit'}) test_example &lt; matlab.unittest.TestCase \n%                              It's convention to name the test file \n%                              test_\"filename being tested\".m\n%\n%         TestTags are an optional feature that are useful for identifying \n%         what kind of test you're coding, as you might only want to run \n%         certain tests that are related.\n\n    properties \n        % Class properties are not required, but are useful to contain \n        % common parameters between tests.\n    end\n    \n    methods (TestClassSetup) \n        % TestClassSetup methods are not required, but are usually used to\n        % setup common testing variables, or loading data. These methods\n        % are executed *prior to* the (Test) methods.\n    end\n    \n    methods (TestClassTeardown) \n        % TestClassTeardown methods are not required, but are useful to\n        % delete any files created during the test execution. These methods\n        % are executed *after* the (Test) methods.\n    end\n    \n    methods (Test) % Each test is it's own method function, and takes \n                   % testCase as their only argument.\n\n        function test_sumNumbers_returns_expected_value_for_integer_case(testCase) \n        % Use very descriptive test method names - this helps for debugging\n        % when error occurs.\n                        \n            % Call the function you'd like to test, e.g:\n%             actualValue = sumNumbers(2,2); % Test example integer case, 2+2\n            % Since the function sumNumbers is not defined, the test will\n            % fail. Instead, we will define the actual value.\n            actualValue = 4;\n\n\n            expectedValue = 4; % We know that we expect that 2+2 = 4\n\n            testCase.assertEqual(expectedValue, actualValue)\n            % Assert functions are the core of unit tests; if it fails,\n            % test log will return failed tests and details.\n            %\n            % They are called as methods of the testCase object.\n            %\n            % Example assert methods:\n            %\n            % assertEqual(expected, actual): Passes if the two input values\n            %                                are equal.\n            % assertTrue(boolValue): Passes if the value or statement is \n            %                        true (e.g. 2&gt;1)\n            % assertFalse(boolValue): Passes if the value or statement is\n            %                         false (e.g. 1==0)\n            %\n            % See Matlab's documentation for more assert methods: \n            % https://www.mathworks.com/help/matlab/ref/matlab.unittest.qualifications.assertable-class.html\n        end\n    end\n\nend",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Software testing",
      "Testing with MATLAB"
    ]
  },
  {
    "objectID": "docs/software/testing_matlab.html#executing-tests",
    "href": "docs/software/testing_matlab.html#executing-tests",
    "title": "Testing with MATLAB",
    "section": "Executing tests",
    "text": "Executing tests\nWe will create a Matlab script called run_testsuite.m in the folder tests/. This function can run the tests present in the folder tests/ and can create test reports.\n\n\n\n\n\n\nClick to view\n\n\n\n\n\nfunction result = run_testsuite(varargin)\n%RUNTESTS - Run all tests and produce coverage report\n%\n% Requires Matlab version &gt;= R2017a\n%\n% This script is designed to be placed with the folder tests/ following\n% the folder organization as seen below:\n%\n% - root/\n%   | - src/\n%   |   | - function_1.m\n%   |   \\ - function_2.m\n%   |\n%   \\ - tests/\n%       | - reports/    % Folder will be generated during testing\n%       | - run_testsuite.m\n%       | - test_function_1.m\n%       \\ - test_function_2.m\n% \n% Resources:\n% https://nl.mathworks.com/help/matlab/ref/matlab.unittest.plugins.codecoverageplugin-class.html\n%\n% \n% Parameters\n% ----------\n% srcFolderName : char, optional\n%   Name of the source code directory. Defaults to 'pvmd'.\n% TestTag : char, optional\n%   Only tests with this tag will be run. Defaults to running all tests,\n% ExcludedFiles : cell, optional\n%   List of filenames that will be excluded from the coverage report.\n%   Defaults to reading the file 'excludedFiles.json'.\n% PDFReport : logical, optional\n%   Add to generate a PDF report. Defaults to true.\n% JUnitResults : logical, optional\n%   Add to generate a JUnit report. Defaults to true.\n% CoberturaCodeCoverageXML : logical, optional\n%   Add to generate a XML Cobertura coverage report. Defaults to true.\n% CoberturaCodeCoverageHTML : logical, optional\n%   Add to generate a HTML Cobertura coverage report. Defaults to true.\n%\n%\n% Returns\n% -------\n% result : matlab.unittest.TestResult\n%\n%\n% Examples\n% --------\n%       result = run_testsuite('TestTag', 'Unit');   \n%       result = run_testsuite('TestTag', 'Unit', ...\n%                'ExcludedFiles', {'function_1.m');\n% \n\np = inputParser;\np.addParameter('srcFolderName', 'src', @ischar);\np.addParameter('TestTag', '', @ischar);\np.addParameter('ExcludedFiles', {}, @iscell);\np.addParameter('PDFReport', true, @islogical);\np.addParameter('JUnitResults', true, @islogical);\np.addParameter('CoberturaCodeCoverageXML', true, @islogical);\np.addParameter('CoberturaCodeCoverageHTML', true, @islogical);\n\np.parse(varargin{:});\n\nsrcFolderName            = p.Results.srcFolderName;\ntestTag                  = p.Results.TestTag;\nproducePDFReport         = p.Results.PDFReport;\nproduceJUnit             = p.Results.JUnitResults;\nproduceCoberturaXML      = p.Results.CoberturaCodeCoverageXML;\nproduceCoberturaHTML     = p.Results.CoberturaCodeCoverageHTML;\nexcludedFiles            = p.Results.ExcludedFiles;\n\n% Import required Matlab libraries\nimport matlab.unittest.TestSuite\nimport matlab.unittest.TestRunner\nimport matlab.unittest.plugins.XMLPlugin\nimport matlab.unittest.plugins.TestReportPlugin\nimport matlab.unittest.plugins.CodeCoveragePlugin\nimport matlab.unittest.plugins.codecoverage.CoverageReport\nimport matlab.unittest.plugins.codecoverage.CoberturaFormat\nimport matlab.unittest.selectors.HasTag\n\n% Define folder structure\nrootDir = getRootDir();\ntestFolder = fullfile(rootDir, 'tests');\nsrcFolder = fullfile(rootDir, srcFolderName);\nreportFolder = fullfile(testFolder, 'reports');\n\n% Add source folder plus all subfolders to the path.\naddFilesToPath(srcFolder);\n\n% Create test suite\nsuite = TestSuite.fromFolder(testFolder, 'IncludingSubfolders', true);\nrunner = TestRunner.withTextOutput;\n\n% Exclude files from coverage report\ncodeFilePaths = excludeFilesFromCoverage(srcFolder, excludedFiles);\n\n% Produce JUnit report\nif produceJUnit\n    mkdirIfNeeded(reportFolder)\n    xmlFile = fullfile(reportFolder, 'junit.xml');\n    runner.addPlugin(XMLPlugin.producingJUnitFormat(xmlFile));\nend\n\n% Prepare HTML format output\nif produceCoberturaHTML\n    mkdirIfNeeded(reportFolder)\n    reportFileHTML = 'coverage.html';\n    pluginHTML = CodeCoveragePlugin.forFile(codeFilePaths,...\n    'Producing', CoverageReport(reportFolder, 'MainFile', reportFileHTML));\n    runner.addPlugin(pluginHTML);\nend\n\n% Prepare XML format output\nif produceCoberturaXML\n    mkdirIfNeeded(reportFolder)\n    reportFileXML = fullfile(reportFolder, 'coverage.xml');\n    reportFormat = CoberturaFormat(reportFileXML);\n    pluginXML = CodeCoveragePlugin.forFile(codeFilePaths,...\n        'Producing', reportFormat);\n    runner.addPlugin(pluginXML);\nend\n\n% Produce PDF test report (Not supported on MacOS platform)\nif producePDFReport\n    if ismac\n        warning('MATLAB:testArtifact:unSupportedPlatform', ...\n            'Producing a PDF test report is not currently supported on MacOS platforms.');\n    else\n        mkdirIfNeeded(reportFolder);\n        reportFilePDF = fullfile(reportFolder, 'testreport.pdf');\n        runner.addPlugin(TestReportPlugin.producingPDF(reportFilePDF));        \n    end\nend\n\n% Select tests with specific TestTag\nif testTag\n    if ~isempty(suite.selectIf(HasTag(testTag)))\n        suite = suite.selectIf(HasTag(testTag));\n    end\nend\n\n% Run testsuite\nresult = runner.run(suite);\n\n% Print coverage result to command window\nif isfile(reportFileXML)\n    printCoverage(reportFileXML)\nend\n\n\nfunction rootDir = getRootDir\n    here = pwd;\n    idx = strfind(here, filesep);\n    rootDir = fullfile(here(1:idx(end)-1));\n\nfunction mkdirIfNeeded(dir)\n    if exist(dir,'dir') ~= 7\n        mkdir(dir);\n    end\n\nfunction excludedFiles = readExcludedFiles\n    try\n        json = fileread('excludedFiles.json');\n        excludedFiles = jsondecode(json);\n    catch ME\n        msg = strcat(ME.message, ' No files will be excluded from code coverage.');\n        warning(msg)\n    end\n\nfunction codeFilePaths = excludeFilesFromCoverage(srcFolder, excludedFiles)\n    dirOut = dir(fullfile(srcFolder, '**', '*.m'));\n    codeFilePaths = string({dirOut.folder}) + filesep + string({dirOut.name});\n    codeFilePaths(contains(codeFilePaths, excludedFiles)) = [];\n\nfunction addFilesToPath(srcFolder)\n    if exist(srcFolder, 'dir') == 7\n        addpath(genpath(srcFolder));\n    else\n        error('Cannot find source folder: %s', srcFolder);\n    end\n\nfunction printCoverage(coverageFile)\n    S = parseXML(coverageFile);\n    index = find(strcmp('line-rate', {S.Attributes.Name}));\n    coverage = str2double(S.Attributes(index).Value)*100;\n    formatSpec = '%.2f%% covered \\n';\n    fprintf(formatSpec, coverage)\n\n\n\nAdditionally, we can selectively run test by defining TestTags. In the example above, we added the tag ‚ÄòUnit‚Äô. You can then call the function in the MATLAB command window to run all tests with the tag ‚ÄòUnit‚Äô with\nresult = run_testsuite('TestTag', 'Unit')\n\n\n\n\n\n\nTip\n\n\n\nIf you want to quickly check whether your tests pass without having to start up Matlab, you can also call run_testsuite from the terminal. In the folder containing the function, execute\nmatlab -batch \"run_testsuite('TestTag', 'Unit')\"",
    "crumbs": [
      "Guides",
      "üíª **Research Software**",
      "Software testing",
      "Testing with MATLAB"
    ]
  }
]